[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 23,
      "-": 18
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public AddCommand(String content) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            tasks.add(Parser.addCommand(content));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            Ui.print(\"Got it. I\u0027ve added this task: \\n\" + tasks.get(tasks.size() - 1)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 26
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Ui.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 17
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public abstract void execute(ArrayList\u003cTask\u003e tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setTime(Date by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"D | \" + (this.isDone ? 1 : 0) + \" | \" + this.description + \" | \" + ft.format(this.by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 31
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public DeleteCommand(String line) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            int order \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            Ui.print(\"Noted. I\u0027ve removed this task: \\n\" + tasks.remove(order - 1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(\"Not a valid task number\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 26
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public DoneCommand(String line) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            int order \u003d Integer.parseInt(line);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            tasks.get(order - 1).markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            Ui.print(\"Nice! I\u0027ve marked this task as done: \\n\" + tasks.get(order - 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(\"Not a valid task number\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 27
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    static File duketxt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    static InputStream is;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    static OutputStream os;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        tasks \u003d storage.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cp\u003emain running structure of Duke.\u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Ui.welcome();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                String fullCommand \u003d Ui.readLine(in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                Command c \u003d Parser.commandLine(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                c.execute(tasks, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                Ui.print(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cp\u003eMain method of the entire project.\u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param args command line arguments, not used here"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        new Duke(\"../data/tasks.txt\").run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 42,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setTime(Date at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"E | \" + (this.isDone ? 1 : 0) + \" | \" + this.description + \" | \" + ft.format(this.at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 31
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private String line;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public FindCommand(String line) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.line \u003d line.trim();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String output \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        int resultCount \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (tasks.get(i).description.contains(line)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                output +\u003d \"\\n\" + (resultCount++) + \".\" + tasks.get(i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Ui.print(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 26
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e tasks, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String output \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0;i \u003c tasks.size();i++) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            output +\u003d \"\\n\" + (i + 1) + \".\" + tasks.get(i);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Ui.print(output);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 21
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cp\u003eparse a line in the data text to an object.\u003c/p\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param line a line of String to be parsed, without \\n last"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return a Task object produced by the input line"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws ParseException if the line cannot be parsed properly"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static Task dataLine(String line) throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] splites \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (splites.length \u003c 3 || (splites.length \u003c 2 \u0026\u0026 (splites[0].equals(\"E\") || splites[0].equals(\"D\")))) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new ParseException(\"Invalid Duke data line, the information is incomplete.\", -1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Task temp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (splites[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new ToDo(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new Event(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new Deadline(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                    \"Invalid data line input: the first character is not T, E or D,\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                            + \" which cannot represent any task type Duke support.\",-1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (Integer.parseInt(splites[1]) !\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                temp.markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new ParseException(\"Invalid number format for the second column of Duke data line.\", -1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        temp.setDescription(splites[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (splites[0].equals(\"E\") || splites[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                temp.setTime(ft.parse(splites[3]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cp\u003eParse a command line String to a Command object.\u003c/p\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param line the input command line String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the new Command object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException if the format of command cannot be parsed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static Command commandLine(String line) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] splites \u003d line.replaceAll(\"\\\\s{2,}\", \" \").split(\" \",2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        splites[0] \u003d splites[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Command temp \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (splites[0].equals(\"ADD\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new AddCommand(splites[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"LIST\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new ListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"DONE\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new DoneCommand(splites[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"BYE\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new ByeCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"DELETE\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new DeleteCommand(splites[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"FIND\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new FindCommand(splites[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(\"command not found\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * \u003cp\u003eParse an add command to get the corresponding Task object.\u003c/p\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param line the add command line with \"add\" removed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @return the corresponding Task object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @throws DukeException if the format of command cannot be parsed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static Task addCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String[] splites \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        splites[0] \u003d splites[0].toUpperCase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        Task temp \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(\"No description\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        if (splites[0].equals(\"TODO\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            temp \u003d new ToDo(splites[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splites \u003d splites[1].split(\"/by\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"No time keyword /by\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splites[0] \u003d splites[0].trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                temp \u003d new Deadline(splites[0], ft.parse(splites[1]));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else if (splites[0].equals(\"EVENT\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splites \u003d splites[1].split(\"/at\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (splites.length \u003c 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"No time keyword /at\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splites[0] \u003d splites[0].trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            splites[1] \u003d splites[1].trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                temp \u003d new Event(splites[0], ft.parse(splites[1]));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                throw new DukeException(\"Invalid date format, the correct format is: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            throw new DukeException(\"Task type \" + splites[0] + \" not recognized\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 123
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private File dataFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private InputStream is;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * read the data stored in hard disk to taskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            is \u003d new FileInputStream(dataFile);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                tasks.add(Parser.dataLine(line));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * save the tasks data to the hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param taskList the array list of tasks to be saved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public boolean store(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size();i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            output +\u003d taskList.get(i).dataString() + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(dataFile));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            bw.write(output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 51
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return (isDone ?  \"V\" : \"x\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void setTime(Date d) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        //for polymorphism use"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public abstract String dataString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 40
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public String dataString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return \"T | \" + (this.isDone ? 1 : 0) + \" | \" + this.description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 15
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    private static final String horizontalLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * print out Duke logo and welcome message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static void welcome() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        print(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    /***\u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * This is a method to print the message Duke said, automatically add"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * horizontal lines and indentations to the original message and print them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * A sample output is:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *     ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *      Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *      What can I do for you?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     *     ____________________________________________________________\u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     * @param toPrint the message need to be printed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static void print(String toPrint) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        toPrint \u003d \"\\t\" + toPrint;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        for (int i \u003d 0;i \u003c toPrint.length();i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            if (toPrint.charAt(i) \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "                toPrint \u003d toPrint.substring(0, i + 1) + \"\\t\" + toPrint.substring(i + 1, toPrint.length());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        System.out.println(toPrint);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public static String readLine(Scanner in) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 44
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chenyuheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chenyuheng": 10
    }
  }
]
