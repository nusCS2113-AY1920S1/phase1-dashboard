[
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "Hashir Zahir": 23
    }
  },
  {
    "path": "src/main/java/CommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public enum commandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        QUIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        MARKDONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        IGNORE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        DEFAULT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private static final String triggerListText \u003d \"list\", triggerDeleteText \u003d \"delete\",triggerDoneText \u003d \"done\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                triggerQuitText \u003d \"bye\", triggerTodoText \u003d \"todo\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                triggerDeadlineText \u003d \"deadline\", triggerEventText \u003d \"event\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                triggerFindText \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public static final String splitDeadlineText \u003d \"/by \", splitEventText \u003d \"/at \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private String inputStr, splitText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private String[] argStrArr;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private commandType command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public CommandParser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.command \u003d commandType.DEFAULT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.splitText \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void setInputStr(String inputStr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.inputStr \u003d inputStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            process();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.IGNORE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private void process() throws DukeException{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String[] splitStr \u003d this.inputStr.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String command \u003d splitStr[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String restOfStr \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (splitStr.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            String[] restOfStrArr \u003d Arrays.copyOfRange(splitStr, 1, splitStr.length);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            restOfStr \u003d String.join(\" \", restOfStrArr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (command.equals(triggerQuitText)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.QUIT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerListText)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.LIST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerDeleteText)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.DELETE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerDoneText)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.MARKDONE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerTodoText)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.TODO;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerDeadlineText)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.DEADLINE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.splitText \u003d splitDeadlineText;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerEventText)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.EVENT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.splitText \u003d splitEventText;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (command.equals(triggerFindText)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.command \u003d commandType.FIND;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            throw new DukeException(DukeException.dukeExceptionType.UNKNOWN);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        setArgs(restOfStr);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public commandType getCommandType() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "       return this.command;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String getCommandText() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        switch(this.command) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case QUIT:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"bye\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case MARKDONE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"done\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"todo\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"deadline\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"event\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"find\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                return \"unknown\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private void setArgs(String argStr) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (this.command \u003d\u003d commandType.DEADLINE || this.command \u003d\u003d commandType.EVENT) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            String[] splitStr \u003d argStr.split(this.splitText);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            if (argStr.isBlank() || splitStr[0].isBlank()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                if (this.command \u003d\u003d commandType.DEADLINE) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                    throw new DukeException(DukeException.dukeExceptionType.DEADLINE_DESC_EMPTY, this.getCommandText());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                else if (this.command \u003d\u003d commandType.EVENT) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                    throw new DukeException(DukeException.dukeExceptionType.EVENT_DESC_EMPTY, this.getCommandText());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            else if (splitStr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                if (this.command \u003d\u003d commandType.DEADLINE) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                    throw new DukeException(DukeException.dukeExceptionType.DEADLINE_DATE_EMPTY, this.getCommandText());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                else if (this.command \u003d\u003d commandType.EVENT) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                    throw new DukeException(DukeException.dukeExceptionType.EVENT_DATE_EMPTY, this.getCommandText());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                this.argStrArr \u003d argStr.split(this.splitText);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else if (this.command \u003d\u003d commandType.TODO) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            if (argStr.isBlank()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                throw new DukeException(DukeException.dukeExceptionType.TODO_DESC_EMPTY, this.getCommandText());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                this.argStrArr \u003d new String[]{argStr};"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.argStrArr \u003d new String[]{argStr};"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String[] getArgs() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.argStrArr;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 157
    }
  },
  {
    "path": "src/main/java/DateParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private SimpleDateFormat dateFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public DateParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.dateFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public Date getDateObj(String dateTimeStr) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.date \u003d this.dateFormatter.parse(dateTimeStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            // if there is error, save as current date. TODO: Better error resolution"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(pe);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            this.date \u003d new Date();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String getDateStr(Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.dateFormatter.format(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 31
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    Date date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    DateParser dateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public Deadline(String descriptionStr, String dateStr){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        super(descriptionStr, \"D\", dateStr);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.dateParser \u003d new DateParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.date \u003d dateParser.getDateObj(dateStr);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return super.toString() + \"(by: \" + this.dateParser.getDateStr(date) + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 17
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private static String logo \u003d \"\\n ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private static final String welcomeMsg \u003d \"Hello from\" + logo + \"What can I do for you today?\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            quitMsg \u003d \"Bye. Hope to see you again!\\n\" + logo, markAsDoneMsg \u003d \"Nice! I\u0027ve marked this task as done:\\n\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            taskAddedMsg \u003d \"Got it. I\u0027ve added this task: \\n\", taskDeletedMsg \u003d \"Noted. I\u0027ve removed this task:\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            numberOfTasksMsg_1 \u003d \"Now you have \", getNumberOfTaskMsg_2 \u003d \" task\", getNumberOfTasksMsg_2 \u003d \" tasks\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            getGetNumberOfTasksMsg_3 \u003d \" in the list\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            deleteTaskNotIntegerMsg \u003d \"Sorry! The index you entered was not an integer. Please try again.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            deleteTaskOutOfBoundsMsg \u003d \"Sorry! The task with that index does not exist. Please try again.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private static FileIOManager fileIOManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private CommandParser commandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        fileIOManager \u003d new FileIOManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String inputStr \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        taskArrayList \u003d fileIOManager.loadSavedData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        duke.greeting();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                inputStr \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                if (!duke.reply(inputStr)) break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.taskArrayList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        System.out.println(welcomeMsg);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public boolean reply(String inputStr) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        // TODO: check if whitespace is considered as input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (inputStr.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        boolean isQuit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        final String horizontalSeparator \u003d \"______________________________________\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        System.out.println(horizontalSeparator);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        commandParser.setInputStr(inputStr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        CommandParser.commandType command \u003d commandParser.getCommandType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String[] commandArgs \u003d commandParser.getArgs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        switch(command) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case QUIT:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                isQuit \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                System.out.println(quitMsg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                listReply(this.taskArrayList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                deleteTask(commandArgs[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case MARKDONE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                markReply(commandArgs[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                t \u003d new Todo(commandArgs[0]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                addReply(t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                t \u003d new Deadline(commandArgs[0], commandArgs[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                addReply(t);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                t \u003d new Event(commandArgs[0], commandArgs[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                addReply(t);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                findTask(commandArgs[0]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case IGNORE:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        System.out.println(horizontalSeparator);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return !isQuit;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void echoReply(String inputStr) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        System.out.println(inputStr);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void addReply(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.taskArrayList.add(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        System.out.println(taskAddedMsg + task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        System.out.println(getTasksLeftStr());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        fileIOManager.saveData(this.taskArrayList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void listReply(ArrayList\u003cTask\u003e taskArrayList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        int currIndex \u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        for (Task task : taskArrayList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(currIndex + \". \" + task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            currIndex +\u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void deleteTask(String indexStr) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            index \u003d Integer.parseInt(indexStr);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(deleteTaskNotIntegerMsg);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        // 0-index arrayList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        index -\u003d 1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (index \u003e\u003d taskArrayList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(\"You have opted to remove task no. \" + (index+1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(deleteTaskOutOfBoundsMsg);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(\"Please enter index in range of 1 to \" + taskArrayList.size() + \" inclusive\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(taskDeletedMsg);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(taskArrayList.get(index));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            taskArrayList.remove(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(getTasksLeftStr());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            fileIOManager.saveData(this.taskArrayList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void markReply(String indexStr) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if(indexStr.matches(\"^[0-9]+$\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            int index \u003d Integer.parseInt(indexStr) - 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            if (index \u003e\u003d 0 \u0026\u0026 index \u003c this.taskArrayList.size()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                this.taskArrayList.get(index).markTaskDone();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                System.out.println(markAsDoneMsg + this.taskArrayList.get(index));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                System.out.println(\"Index provided is out of range. Cannot mark as done\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(\"Improper \u0027Done\u0027 command given. Please follow: done [integer].\\n example: done 2\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        fileIOManager.saveData(this.taskArrayList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private String getTasksLeftStr() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String taskText \u003d (this.taskArrayList.size() \u003e 1) ? getNumberOfTasksMsg_2 : getNumberOfTaskMsg_2;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return numberOfTasksMsg_1 + this.taskArrayList.size() + taskText + getGetNumberOfTasksMsg_3;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private void findTask(String findStr) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        ArrayList\u003cTask\u003e foundTaskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        for (Task task : taskArrayList) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            if (task.toString().contains(findStr)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                foundTaskList.add(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (foundTaskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            listReply(foundTaskList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(\"No match found!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Hashir Zahir": 182
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    enum dukeExceptionType {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        EVENT_DESC_EMPTY,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        DEADLINE_DESC_EMPTY,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        TODO_DESC_EMPTY,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        EVENT_DATE_EMPTY,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        DEADLINE_DATE_EMPTY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        UNKNOWN"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private static final String unknownErrText \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                knownCommands \u003d \"Please type one of these recognized commands:\\nlist\\ndelete\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                                \"todo\\ndeadline\\nevent\\nfind\\nbye\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                emptyErrText1 \u003d \"☹ OOPS!!! The description of a \","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                emptyDateErrText1 \u003d \"☹ OOPS!!! The date of a \","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                                emptyErrText2 \u003d \" cannot be empty.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    String errText, commandStr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public DukeException(dukeExceptionType det, String commandStr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.errText \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        setExceptionText(det, commandStr);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public DukeException(dukeExceptionType det) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this(det, \"unknown\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private void setExceptionText(dukeExceptionType det, String commandStr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        switch (det) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case TODO_DESC_EMPTY:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case EVENT_DESC_EMPTY:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case DEADLINE_DESC_EMPTY:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                this.errText \u003d getEmptyDescText(commandStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case EVENT_DATE_EMPTY:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case DEADLINE_DATE_EMPTY:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                this.errText \u003d getEmptyDateText(commandStr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case UNKNOWN:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                this.errText \u003d unknownErrText + knownCommands;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private String getEmptyDescText(String command) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return emptyErrText1 + command + emptyErrText2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private String getEmptyDateText(String command) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return emptyDateErrText1 + command + emptyErrText2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.errText;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 58
    }
  },
  {
    "path": "src/main/java/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    String dateStr;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public Event(String descriptionStr, String dateStr){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        super(descriptionStr, \"E\", dateStr);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return super.toString() + \"(at: \" + this.dateStr + \")\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 12
    }
  },
  {
    "path": "src/main/java/FileIOManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class FileIOManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private final String dukeFileLocationStr \u003d \"data/\", dukeFileNameStr \u003d \"duke_tasks.txt\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                        dukeFileStr \u003d dukeFileLocationStr + dukeFileNameStr, fileCharRegex \u003d \" \\\\| \", fileCharText \u003d \" | \","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                        noFileErrorText \u003d \"Could not find previous saved data for Duke, starting fresh new session....\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private BufferedReader fileReader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private BufferedWriter fileWriter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public FileIOManager() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public ArrayList\u003cTask\u003e loadSavedData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            fileReader \u003d new BufferedReader(new FileReader(dukeFileStr));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            for(String lineStr; (lineStr \u003d fileReader.readLine()) !\u003d null; ) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                Task t \u003d getTaskFromStr(lineStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                taskArr.add(t);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(e + \"\\n\" + noFileErrorText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return taskArr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        boolean saveDataStatus \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            fileWriter \u003d new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dukeFileStr)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            new File(dukeFileLocationStr).mkdirs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            saveData(taskArr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            for (Task t : taskArr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                fileWriter.write(getStrFromTask(t));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            System.out.println(\"Error while saving task to file: \" + e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private Task getTaskFromStr(String inputStr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String[] splitStr \u003d inputStr.split(fileCharRegex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String taskLetter \u003d splitStr[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        boolean taskIsDone \u003d Integer.parseInt(splitStr[1]) !\u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String[] args \u003d Arrays.copyOfRange(splitStr, 2, splitStr.length);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        switch (taskLetter) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "               task \u003d new Event(args[0], args[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "               break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                task \u003d new Deadline(args[0], args[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                task \u003d new Todo(args[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                // TODO: How to handle malformed/unknown string?"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                task \u003d new Task(\"\", \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (taskIsDone) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            task.markTaskDone();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    private String getStrFromTask(Task t) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String outStr \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        outStr +\u003d t.getTaskLetter() + fileCharText;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        outStr +\u003d (t.getTaskMarkDoneStatus() ? \"1\" : \"0\") + fileCharText;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        outStr +\u003d t.getDescriptionStr();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        for (String argStr : t.getArgStrArr()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            outStr +\u003d fileCharText + argStr;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return outStr+\"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 108
    }
  },
  {
    "path": "src/main/java/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    protected String descriptionStr, taskLetter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    protected String[] argStrArr;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    protected boolean is_done;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public Task(String descriptionStr, String taskLetter, String ...argStrArr) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.descriptionStr \u003d descriptionStr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.taskLetter \u003d taskLetter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.argStrArr \u003d argStrArr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.is_done \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public void markTaskDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        this.is_done \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public boolean getTaskMarkDoneStatus() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.is_done;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String getDescriptionStr() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.descriptionStr;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String[] getArgStrArr() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return argStrArr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String getTaskLetter() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return this.taskLetter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        String outStr \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        outStr +\u003d \"[\" + getTaskLetter() + \"]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        if (getTaskMarkDoneStatus()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            outStr +\u003d \"[✓] \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "            outStr +\u003d \"[✗] \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        outStr +\u003d this.descriptionStr;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return outStr;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 48
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        super(description, \"T\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hashir Zahir"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hashir Zahir": 9
    }
  }
]
