[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Class containing the main method. Establishes current session\u0027s Ui, TaskList, and Storage,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * and cues Ui to begin taking input from the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * This method prepares the user\u0027s new session with Duke. It creates a Storage, TaskList, and Ui class to use during the session."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * If the filePath referenced when making the new Storage has been used previously and a file with data is present,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * the data will be read and the list from the previous session is used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param filePath The relative path of the saved data file from a previous session."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws IOException If the Storage class cannot successfully load the data file, this exception is thrown."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.tasks \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            System.out.println(\"File could not be loaded. Starting a new save file and list...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        storage.updateTasks(this.tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.ui \u003d new Ui(this.tasks, this.storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * This method prompts the Duke to begin receiving input, and recording input to the file in the referenced filePath."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        new Duke(\"./duke.txt\").run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * When Ui and new Duke object has been created, this method"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * will support the ongoing session and quit once the Ui stops receiving input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ui.handleInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 49,
      "-": 3
    }
  },
  {
    "path": "src/main/java/ParseActionsInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * An interface used to designate actions for the Ui. The parser determines an action and passes one of the"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * provided enumerations in order to prompt the Ui to act."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public interface ParseActionsInterface {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Enumerations meant to direct the actions of Ui and Parser classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    enum ActionType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        EXIT, LIST, FIND, DELETE, DONE, TODO, DEADLINE, EVENT, INVALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 13
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Class designated to take user input, and parse it into a format that can be used by the Ui."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * This returned output is typically in the form of a String or integer, otherwise the class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * will return an invalid output that is handled by the Ui accordingly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Parser implements ParseActionsInterface {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private static String badFormat \u003d \"badFormat\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * The constructor for the Parser class. It receives a specific user command and saves it to its input field"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * for future reference."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Parser(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * This method detects keywords within the user\u0027s input, matches them to an enumerated action,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * and returns the enumeration which tells the Ui class how to behave."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return ActionType enumeration--one of nine instructions for the Ui."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ParseActionsInterface.ActionType determineAction() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.EXIT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.LIST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().contains(\"find\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.FIND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().contains(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.DONE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().contains(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.TODO;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().contains(\"deadline\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.DEADLINE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().contains(\"event\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.EVENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (input.toLowerCase().contains(\"delete\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return ActionType.DELETE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return ActionType.INVALID;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method to parse the user input when the command is specifically meant for finding a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the usable String to the Ui."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseFind() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (!userInput.contains(\"find \")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badFormat;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            userInput \u003d userInput.replaceFirst(\"find \", \"\").toLowerCase().trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (userInput.isEmpty() || userInput.isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badFormat;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method to parse the user input when the command is specifically meant for deleting a task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the usable integer as an index for the Ui."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public int parseDelete() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (!userInput.contains(\"delete \")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String task \u003d userInput.replaceFirst(\"delete \", \"\").trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (task.isBlank() || task.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            index \u003d Integer.parseInt(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method to parse the user input when the command is specifically meant for marking a task as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the usable integer as an index for the Ui."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public int parseDone() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int badIndex \u003d -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (!userInput.contains(\"done \")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badIndex;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String parsedInput[] \u003d input.split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((parsedInput.length \u003c\u003d 1)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badIndex;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                Integer index \u003d Integer.parseInt(parsedInput[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                if (index \u003c\u003d 0"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        || index \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    return badIndex;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (NumberFormatException | NullPointerException nfe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return badIndex;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method to parse the user input when the command is specifically meant for creating a ToDo task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the usable String for the Ui."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseToDo() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (!userInput.contains(\"todo \")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badFormat;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String taskName \u003d userInput.replace(\"todo \", \"\").trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (taskName.isEmpty() || taskName.isBlank()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badFormat;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method to parse the user input when the command is specifically meant for creating a Deadline task."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the usable String array for the Ui. The first element is the task name. The second is its time."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseDeadline() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] badOutput \u003d new String[0];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((!userInput.contains(\"deadline \")) || (!userInput.contains(\" /by \"))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badOutput;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userInput \u003d userInput.replaceFirst(\"deadline \", \"\").trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] taskComponents \u003d userInput.split(\" /by \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c taskComponents.length; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskComponents[i].trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (taskComponents.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badOutput;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String taskName \u003d taskComponents[0];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String taskDeadline \u003d taskComponents[1];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((taskName.isEmpty() || taskName.isBlank())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                || (taskDeadline.isEmpty() || taskDeadline.isBlank())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badOutput;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskComponents;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method to parse the user input when the command is specifically meant for creating an Event task."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the usable String array for the Ui. The first element is the task name. The second is its time."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseEvent() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] badOutput \u003d new String[0];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String userInput \u003d input.trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((!userInput.contains(\"event \")) || (!userInput.contains(\" /at \"))) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badOutput;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String task \u003d userInput.replaceFirst(\"event \", \"\").trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] taskComponents \u003d task.split(\" /at \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c taskComponents.length; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskComponents[i].trim();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (taskComponents.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badOutput;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String taskName \u003d taskComponents[0];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String taskTime \u003d taskComponents[1];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((taskName.isEmpty() || taskName.isBlank())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                || (taskTime.isEmpty() || taskTime.isBlank())) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return badOutput;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskComponents;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 190
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * A class meant to save the user\u0027s ongoing list by writing the data onto a file. When a new session begins,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * the Storage class will attempt to read the referenced file to re-create the list from prior sessions. If it"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * cannot read the file, it will write a new file. As the user adds/deletes/completes tasks, the Storage class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * will update its file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * The constructor for the Storage class. It takes in the relative path of a file to load/save data onto during"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * the user\u0027s session."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param filePath The relative path of the load/save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A method used when a new Duke session begins. The Storage class will try to read the referenced"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * file to recreate the list from the earlier session, or it will create a new file to record the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * new data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return It returns an ArrayList with all the tasks from prior sessions\u0027 task lists, or an empty"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ArrayList if no earlier data is found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws IOException When Storage is unable to locate/read the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            BufferedReader taskFile \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String currentLine \u003d taskFile.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (currentLine !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                while (currentLine !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    String[] parsedCurrentLine \u003d currentLine.split(\"//\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    if (parsedCurrentLine.length \u003c 3) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        currentLine \u003d taskFile.readLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    if (parsedCurrentLine[0].equals(Task.TaskType.TODO.toString())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        ToDo readTask \u003d new ToDo(parsedCurrentLine[2]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        if (parsedCurrentLine[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                            readTask.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        tasks.add(readTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    } else if (parsedCurrentLine[0].equals(Task.TaskType.DEADLINE.toString())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        Deadline readTask \u003d new Deadline(parsedCurrentLine[2], parsedCurrentLine[3]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        if (parsedCurrentLine[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                            readTask.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        tasks.add(readTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    } else if (parsedCurrentLine[0].equals(Task.TaskType.EVENT.toString())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        Event readTask \u003d new Event(parsedCurrentLine[2], parsedCurrentLine[3]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        if (parsedCurrentLine[1].equals(\"true\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                            readTask.markAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        tasks.add(readTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    currentLine \u003d taskFile.readLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskFile.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            //System.out.println(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            System.out.println(\"File could not be found. Starting a new file and list...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Used to update the load/save file whenever the user submits a command that alters the TaskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param tasks This method takes in the updated TaskList, and modifies the information so it can be recorded"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *              in the load/save file properly."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws IOException This exception is thrown whenever the information fails to be written into the file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void updateTasks(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        writeInFile(formatFileText());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Boolean writeInFile(String savedText) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            FileWriter taskFile \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskFile.write(savedText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskFile.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            System.out.println(\"I couldn\u0027t save your information to the file.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Standardizes the Task List and makes it more easily parsed when the file is being referenced in the future."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return The returned String is printed into the save file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String formatFileText() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String textToWrite \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            textToWrite \u003d textToWrite"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + tasks.getTaskAt(i).taskType"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"//\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + tasks.getTaskAt(i).isTaskDone()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"//\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + tasks.getTaskAt(i).getTaskName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (tasks.getTaskAt(i).taskType.equals(Task.TaskType.DEADLINE)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    || tasks.getTaskAt(i).taskType.equals(Task.TaskType.EVENT)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                textToWrite \u003d textToWrite"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"//\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + tasks.getTaskAt(i).getBasicTime()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                textToWrite \u003d textToWrite + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return textToWrite;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 129
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * A class for the storage of the user\u0027s current list of Tasks. As the user puts in more"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * commands affecting the list of Tasks, the TaskList designated to the session will update."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * The constructor method for the TaskList class. Upon being created, the TaskList will attempt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * to use the saved data from Storage, though if it cannot find a prior list, it will"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * use a new, empty ArrayList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param savedList ArrayList used to organize Tasks in TaskList. It may contain prior Tasks from"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *                  earlier sessions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e savedList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskList \u003d savedList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Returns the encapsulated ArrayList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the ArrayList that was stored in the TaskList class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Will locate and provide the Task at a certain index in the TaskList\u0027s ArrayList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param index used in order to locate the desired Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the Task at the index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Task getTaskAt(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Will return the number of Tasks in the stored ArrayList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the number of stored Tasks for the session."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Will insert a new Task into the stored ArrayList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param task the Task being inserted into the ArrayList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Will remove and return the requested Task from the stored ArrayList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param index used to locate the desired Task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the removed Task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Task removeTaskAt(int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 66
    }
  },
  {
    "path": "src/main/java/TaskPackage/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package TaskPackage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Child of Task class, different in how the user must specify a \u0027/by\u0027 time in order to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * successfully create this task. If the time is formatted in a specific way, the time"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * will be converted to a formatted \u0027Date\u0027."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Deadline(String taskName, String deadline) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super(taskName, deadline);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        convertTimeToDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return \" (by: \" + super.getTime() + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getFullDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (this.getHasDate()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return \" (by: \" + super.getFullDate() + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 28
    }
  },
  {
    "path": "src/main/java/TaskPackage/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package TaskPackage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Child of Task class, different in how the user must specify an \u0027/at\u0027 time in order to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * successfully create this task. If the time is formatted in a specific way, the time"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * will be converted to a formatted \u0027Date\u0027."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Event(String taskName, String eventTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super(taskName, eventTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        convertTimeToDate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return \" (at: \" + super.getTime() + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getFullDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (this.getHasDate()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return \" (at: \" + super.getFullDate() + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 30
    }
  },
  {
    "path": "src/main/java/TaskPackage/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package TaskPackage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * An abstract class--parent to ToDo, Deadline, and Event classes. Users can create"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * a Task to add to their session\u0027s TaskList. The constructor takes a taskName at minimum, though"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * certain subclasses require a designated time as well."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public enum TaskType { TODO, DEADLINE, EVENT;}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Boolean isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String dateInputPattern \u003d \"d/M/yyyy HHmm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String dateInputPattern2 \u003d \"d/M/yyyy h:mma\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String dateOutputPattern \u003d \"MMMM d, yyyy h:mma\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Boolean hasDate \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public TaskType taskType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Task(String taskName, String taskTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.time \u003d taskTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        convertTimeToDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Method with the same functionality as getTime, though it has not been overridden by subclasses."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Used mainly when saving a Task\u0027s time to a file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Returns the time without additional strings added in the overridden getTime()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * methods of subclasses."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getBasicTime() { //Needed a function that wasn\u0027t overridden by subclasses."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Boolean getHasDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return hasDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void convertTimeToDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateInputPattern);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            LocalDateTime reformattedDate \u003d LocalDateTime.parse(this.time, formatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.date \u003d reformattedDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.hasDate \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateInputPattern2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                LocalDateTime reformattedDate2 \u003d LocalDateTime.parse(this.time, formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                this.date \u003d reformattedDate2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                this.hasDate \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                //No date matched, thus we will not give the field a value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getFullDate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateOutputPattern);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String fullDate \u003d this.date.format(formatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return fullDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Boolean isTaskDone() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (this.isDone !\u003d true) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lmtaek": 94
    }
  },
  {
    "path": "src/main/java/TaskPackage/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package TaskPackage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Child of Task class that does not require a time in order to create the Object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * All the ToDo class requires is a taskName."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super(taskName, \"No time specified.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 18
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * A class meant to react to the Duke user\u0027s input. It receives commands, sends them to the Parser class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * to make the input more usable, then uses the returned input in order to respond in a specific manner to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * the given command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Ui implements ParseActionsInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String dukeGreeting \u003d \"Hello, I\u0027m Duke.\\nWhat can I do to help you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String logo \u003d \" ____        _\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private static String dukeNeedsValidInput \u003d \"\\tI\u0027m not sure that I understand. Could you reformat your request?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private static String dukeGoodbye \u003d \"\\tBye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private static String badFormat \u003d \"badFormat\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Boolean isUserFinished \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * The constructor method for the Ui class. Will take in a TaskList and Storage in order to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * manipulate a session\u0027s TaskList and Storage according to the user\u0027s requests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param tasks the TaskList used during the session."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param storage the Storage used during the session."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Ui(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * A looping method that will continue taking input until the user types \"bye\". Each line of"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * input is sent to be parsed. Once it is returned, Ui determines what to do, and how to respond."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void handleInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        System.out.println(dukeGreeting + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        // The user will enter commands from this point onwards."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        while (input.hasNextLine()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.parser \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            ActionType action \u003d parser.determineAction();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            switch(action) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(readTaskList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case FIND:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(findTask(parser.parseFind()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(deleteTask(parser.parseDelete()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(markTaskAsDone(parser.parseDone()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(addTodo(parser.parseToDo()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(addDeadline(parser.parseDeadline()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(addEvent(parser.parseEvent()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                case EXIT:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    this.isUserFinished \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(dukeGoodbye);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    System.out.println(dukeNeedsValidInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (isUserFinished) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /* ACTIONS */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String readTaskList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String response \u003d \"\\tHere are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i\u003c tasks.getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            response \u003d response"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\t\\t\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + (i+1)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskTypeLabel(tasks.getTaskAt(i))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskCompletionStatus(tasks.getTaskAt(i).isTaskDone())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + tasks.getTaskAt(i).getTaskName()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + getTimeOrDate(tasks.getTaskAt(i))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String findTask(String userInput) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String response \u003d \"\\tHere are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (userInput.equals(badFormat)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return dukeNeedsValidInput;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (tasks.getTaskAt(i).getTaskName().toLowerCase().contains(userInput)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                response \u003d response"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"\\t\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + (i+1)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + taskTypeLabel(tasks.getTaskAt(i))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + taskCompletionStatus(tasks.getTaskAt(i).isTaskDone())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + tasks.getTaskAt(i).getTaskName()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + getTimeOrDate(tasks.getTaskAt(i))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String deleteTask(int index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String response \u003d \"\\tNoted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((index \u003c\u003d 0) || index \u003e tasks.getNumberOfTasks()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return dukeNeedsValidInput;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            Task removedTask \u003d tasks.removeTaskAt(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            response \u003d response"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\t\\t\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + (index+1)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskTypeLabel(removedTask)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskCompletionStatus(removedTask.isTaskDone())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + removedTask.getTaskName()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + getTimeOrDate(removedTask)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\tNow you have \" + tasks.getNumberOfTasks() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        updateFile();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String response \u003d \"\\tNice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if ((index \u003c\u003d 0) || (index \u003e tasks.getNumberOfTasks())) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return dukeNeedsValidInput;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            Task task \u003d tasks.getTaskAt(index);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            response \u003d response"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\t\\t\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskTypeLabel(task)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskCompletionStatus(task.isTaskDone())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + task.getTaskName()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + getTimeOrDate(task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            updateFile();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private void updateFile() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            storage.updateTasks(tasks);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String addTodo(String userInput) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (userInput.equals(badFormat)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return dukeNeedsValidInput;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            ToDo newTask \u003d new ToDo(userInput);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return addToList(newTask);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String addDeadline(String[] userInput) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (userInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return dukeNeedsValidInput;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String taskName \u003d userInput[0];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String taskDeadline \u003d userInput[1];"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            Deadline newTask \u003d new Deadline(taskName, taskDeadline);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return addToList(newTask);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String addEvent(String[] userInput) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (userInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return dukeNeedsValidInput;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String taskName \u003d userInput[0];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String taskTime \u003d userInput[1];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            Event newTask \u003d new Event(taskName, taskTime);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return addToList(newTask);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String addToList(Task task) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (tasks.getNumberOfTasks() \u003e\u003d 100) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return \"\\tYou can\u0027t add any more tasks to your list!\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            updateFile();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String output \u003d \"\\tGot it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\n\\t\\t\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskTypeLabel(task)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskCompletionStatus(task.isTaskDone())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + task.getTaskName()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + getTimeOrDate(task)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\n\\tNow you have \" + tasks.getNumberOfTasks() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /* FOR FORMATTING */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    static String taskTypeLabel(Task task) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String taskLabel;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (task.taskType.equals(Task.TaskType.TODO)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskLabel \u003d \"[T] \";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (task.taskType.equals(Task.TaskType.DEADLINE)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskLabel \u003d \"[D] \";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else if (task.taskType.equals(Task.TaskType.EVENT)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskLabel \u003d \"[E] \";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskLabel \u003d \"\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskLabel;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    static String getTimeOrDate(Task task) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (task.getHasDate()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return task.getFullDate();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return task.getTime();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    static String taskCompletionStatus(Boolean isDone) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (isDone) { return \"[✓] \";}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        else { return \"[✗] \"; }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 268
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskName \u003d \"Finish writing paper\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskBasicTime \u003d \"midnight\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskFormattableTime \u003d \"8/9/2019 2359\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetDeadlineName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskName, taskBasicTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(taskName, testDeadline.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetDeadlineUnformattedTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskName, taskBasicTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(false, testDeadline.getHasDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\" (by: \" + taskBasicTime + \")\", testDeadline.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetDeadlineFormattedTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskName, taskFormattableTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(true, testDeadline.getHasDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\" (by: September 8, 2019 11:59PM)\", testDeadline.getFullDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testMarkDeadlineAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskName, taskBasicTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(false, testDeadline.isTaskDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        testDeadline.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(true, testDeadline.isTaskDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 39
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validFilePath \u003d \"./duke.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testNewDuke() throws IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            Duke duke \u003d new Duke(validFilePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) { fail(); }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: test Duke without access to valid filePath. Verify new file is made at ./duke.txt."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 21
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskName \u003d \"Group project meeting\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskBasicTime \u003d \"some time this afternoon\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskFormattableTime \u003d \"11/8/2019 12:11PM\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testEventGetTaskName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Event testEvent \u003d new Event(taskName, taskBasicTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(taskName, testEvent.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetEventUnformattedTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Event testEvent \u003d new Event(taskName, taskBasicTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(false, testEvent.getHasDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\" (at: \" + taskBasicTime + \")\", testEvent.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetEventFormattedTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Event testEvent \u003d new Event(taskName, taskFormattableTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(true, testEvent.getHasDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\" (at: August 11, 2019 12:11PM)\", testEvent.getFullDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testMarkEventAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Event testEvent \u003d new Event(taskName, taskBasicTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(false, testEvent.isTaskDone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        testEvent.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(true, testEvent.isTaskDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 39
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validToDoInput \u003d \"todo make a list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String invalidToDoInput \u003d \"todofinish project\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validDeadlineInput \u003d \"deadline submit application /by 9:45\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String invalidDeadlineInput \u003d \"deadline submit applicationby 9:45\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validEventInput \u003d \"event Dinner With Family /at 09/30/1998 1800\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String invalidEventInput \u003d \"event /at 09/30/1998 1800\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validFindInput \u003d \"find with\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String invalidFindInput \u003d \"findwith\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validDeleteInput \u003d \"delete 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String invalidDeleteInput \u003d \"delete that\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validDoneInput \u003d \"done 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String invalidDoneInput \u003d \"done -1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String badFormat \u003d \"badFormat\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testParseToDo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser validTestParser \u003d new Parser(validToDoInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String validOutput \u003d validTestParser.parseToDo();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"make a list\", validOutput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser invalidTestParser \u003d new Parser(invalidToDoInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String invalidOutput \u003d invalidTestParser.parseToDo();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(badFormat, invalidOutput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testParseDeadline() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser validTestParser \u003d new Parser(validDeadlineInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] validOutput \u003d validTestParser.parseDeadline();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"submit application\", validOutput[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"9:45\", validOutput[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser invalidTestParser \u003d new Parser(invalidDeadlineInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] invalidOutput \u003d invalidTestParser.parseDeadline();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(0, invalidOutput.length);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testParseEvent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser validTestParser \u003d new Parser(validEventInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] validOutput \u003d validTestParser.parseEvent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"Dinner With Family\", validOutput[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"09/30/1998 1800\", validOutput[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser invalidTestParser \u003d new Parser(invalidEventInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] invalidOutput \u003d invalidTestParser.parseEvent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(0, invalidOutput.length);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testParseFind() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser validTestParser \u003d new Parser(validFindInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String validOutput \u003d validTestParser.parseFind();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"with\", validOutput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser invalidTestParser \u003d new Parser(invalidFindInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String invalidOutput \u003d invalidTestParser.parseFind();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(badFormat, invalidOutput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testParseDone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser validTestParser \u003d new Parser(validDoneInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int validOutput \u003d validTestParser.parseDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(1, validOutput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser invalidTestParser \u003d new Parser(invalidDoneInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int invalidOutput \u003d invalidTestParser.parseDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(-1, invalidOutput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testParseDelete() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser validTestParser \u003d new Parser(validDeleteInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int validOutput \u003d validTestParser.parseDelete();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(1, validOutput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser invalidTestParser \u003d new Parser(invalidDeleteInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int invalidOutput \u003d invalidTestParser.parseDelete();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(-1, invalidOutput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 96
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String filePath \u003d \"./duke.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private ToDo testToDo \u003d new ToDo(\"go for a jog\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testLoadFile() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Storage testStorage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            testStorage.loadFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testUpdateFile() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Storage testStorage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.tasks \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        tasks.addTask(testToDo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            testStorage.updateTasks(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) { fail(); }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            ArrayList\u003cTask\u003e readList \u003d testStorage.loadFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertEquals(tasks.getNumberOfTasks(), readList.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertEquals(tasks.getTaskAt(0).getTaskName(), readList.get(0).getTaskName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e2) { fail(); }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 42
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cTask\u003e makeArrayList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        tasks.add(new ToDo(\"take a hike\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        tasks.add(new Event(\"Celebrate friend\u0027s birthday\", \"09/15/1998 3:45PM\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        tasks.add(new ToDo(\"Nap\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        tasks.add(new Deadline(\"FINISH PAPER\", \"midnight\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testCreateList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d makeArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        TaskList testTaskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(tasks.size(), testTaskList.getNumberOfTasks());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i\u003d0; i\u003ctasks.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertEquals(tasks.get(i).getTaskName(), testTaskList.getTaskAt(i).getTaskName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testRemoveTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d makeArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        TaskList testTaskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int taskListSize \u003d testTaskList.getNumberOfTasks();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        testTaskList.removeTaskAt(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(taskListSize-1, testTaskList.getNumberOfTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 43
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import TaskPackage.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String taskName \u003d \"wash car\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetTaskName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ToDo testToDo \u003d new ToDo(taskName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(taskName, testToDo.getTaskName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testGetTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ToDo testToDo \u003d new ToDo(taskName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(\"\", testToDo.getTime());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void testIsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ToDo testToDo \u003d new ToDo(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(false, testToDo.isTaskDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        testToDo.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertEquals(true, testToDo.isTaskDone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 28
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String validFilePath \u003d \"./duke.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Ui newUi() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Ui newUi \u003d new Ui(new TaskList(new ArrayList\u003c\u003e()), new Storage(validFilePath));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return newUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: Test adding ToDos and incorrect inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: Test adding Events and incorrect inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: Test adding Deadlines and incorrect inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: Test \u0027find\u0027 feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: Test \u0027delete\u0027 feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * ToDo: Test \u0027bye\u0027 feature."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 24
    }
  }
]
