[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "test {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "patwaririshab": 22
    }
  },
  {
    "path": "src/main/java/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class DateAndTime {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected Map\u003cInteger,String\u003e month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected int numerical_month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected int date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected int year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected int numerical_time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected String hour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected String minutes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    String ampm \u003d \"am\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private void mapMonths(Map month){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(1,\"January\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(2,\"February\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(3,\"March\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(4,\"April\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(5,\"May\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(6,\"June\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(7, \"July\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(8,\"August\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(9,\"September\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(10,\"October\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(11,\"November\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month.put(12,\"December\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public DateAndTime (String unparsedDT) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String[] date_time \u003d unparsedDT.split(\" \",0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String upDate \u003d date_time[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        numerical_time \u003d Integer.parseInt(date_time[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String[] parsedDate \u003d upDate.split(\"/\", 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        date \u003d Integer.parseInt(parsedDate[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        numerical_month \u003d Integer.parseInt(parsedDate[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        year \u003d Integer.parseInt(parsedDate[2]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String getEnding(int Date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        if (Date \u003d\u003d 11 || Date \u003d\u003d 12 || Date \u003d\u003d 13) return \"th\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        switch(Date%10){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case(1):"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                return \"st\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case(2):"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                return \"nd\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case(3):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                return \"rd\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                return \"th\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        month \u003d new HashMap();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        mapMonths(month);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return ( date + getEnding(date) + \" of \" + month.get(numerical_month) + \" \" + year);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String input \u003d Integer.toString(numerical_time);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        DateFormat oldFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        DateFormat outputFormat \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String time12hr \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        Date time24hr \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            time24hr \u003d oldFormat.parse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            time12hr \u003d outputFormat.format(time24hr);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }catch(ParseException pe){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return time12hr;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 81
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Deadline extends Todo {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected String by; //stores the date/time deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected DateAndTime myDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Deadline(String description, String deadline) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        Type \u003d TypeClass.D; //updates Type to D"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        by \u003d deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        myDateTime \u003d new DateAndTime(by);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getAppointment() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return (myDateTime.getDate()+ \",\" + myDateTime.getTime());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 20
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * This Duke program implements a command line application which allows users to store"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * their tasks such as Todo, Deadline and Events to a local persistent storage."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * @author rishabpatwari"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * @version 1.o"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public static String line \u003d \"________________________________________________________\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Duke (String filepath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        ui \u003d new Ui(); //Creates Command Line User Interface which calls Parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            tasks \u003d new TaskList(storage.load()); //Loads existing data from persistent storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        ui.run(tasks); //After constructor loads existing data/creates new file, run parser to get input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        storage.updateStorage(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String currentDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String filePath \u003d currentDir + \"/src/main/java/task.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        new Duke(filePath).run(); //Creates Duke Object Instance and executes the method run()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "patwaririshab": 37
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Event extends Todo {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected DateAndTime myDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Event(String description, String eventat) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        Type \u003d TypeClass.E; //updates Type to E"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        at \u003d eventat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        myDateTime \u003d new DateAndTime(at);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getAppointment() { return (myDateTime.getDate()+ \",\" + myDateTime.getTime()); }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 18
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public InvalidInputException(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        if (command.equals(\"todo\") || command.equals(\"done\") || command.equals(\"list\") ||command.equals(\"event\")){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 14
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * The parser class is used to make sense of the user input. It has a processInput function"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * which takes in the current TaskList being modified and the current input line obtained from"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * the Ui class. ProcessInput executes getCommand() and getDescription() to obtain details of the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * input and executes the  desired action based on the command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String line \u003d Duke.line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private static String getCommandWord(String indes) throws InvalidInputException { // ! UPDATE whenever you add new command word"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String[] words \u003d indes.split(\"\\\\s\",0); // splits the string based on whitespace"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        if (words[0].equals(\"todo\") || words[0].equals(\"done\") ||words[0].equals(\"list\") ||words[0].equals(\"event\") || words[0].equals(\"deadline\") || words[0].equals(\"find\") || words[0].equals(\"delete\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            return words[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        else"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            throw new InvalidInputException(words[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private static String getDescription(String[] words, String type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        switch(type){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case (\"done\"):"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                return words[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case (\"todo\"):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case (\"find\"):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                StringJoiner sj \u003d new StringJoiner(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                for (int i \u003d 1; i \u003c words.length; ++i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    sj.add(words[i]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                return sj.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case (\"deadline\"):"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                for(int i \u003d 1; i \u003c words.length; ++i) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    if (words[i].equals(\"/by\")){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        String[] wordlist \u003d new String[i-1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        for(int j \u003d 1; j \u003c i; j++){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                            wordlist[j-1] \u003d words[j];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        return String.join(\" \", wordlist);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            case (\"event\"):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                for(int i \u003d 1; i \u003c words.length; ++i) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    if (words[i].equals(\"/at\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        String[] wordlist \u003d new String[i-1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        for(int j \u003d 1; j \u003c i; j++){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                            wordlist[j-1] \u003d words[j];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        return String.join(\" \", wordlist);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void processInput(TaskList tasks, String indes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            String[] words \u003d indes.split(\"\\\\s\", 0); //splitting input based on whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                switch (getCommandWord(indes)) { //remember to update the list of acceptable words in the method if adding new commands"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"list\"):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        System.out.print(line + \"  Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        tasks.viewList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"done\"):"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        tasks.updateDone(getDescription(words, \"done\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"todo\"):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        tasks.addToDo( getDescription(words, \"todo\"), words);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"deadline\"):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        tasks.addSpecial( getDescription(words, \"deadline\"), words, \"by\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"event\"):"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        tasks.addSpecial(getDescription(words, \"event\"), words, \"at\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"delete\"):"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        tasks.deleteTask(getDescription(words, \"done\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"find\"):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        find.searchTaskList(tasks, getDescription(words, \"find\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                System.out.println(line + \"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" + line );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 98
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private ArrayList\u003cTodo\u003e itemslist;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private void loadFile(String filePath, ArrayList\u003cTodo\u003e itemslist) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            for(String w:lines) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                String[] splitline \u003d w.split(\" \" + \"\\\\|\" + \" \", 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                switch (splitline[0]) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case(\"T\"):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        Todo temp \u003d new Todo(splitline[2]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        if (splitline[1].equals(\"1\")) temp.setDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        itemslist.add(temp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case(\"D\"):"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        Deadline temp2 \u003d new Deadline(splitline[2],splitline[3]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        if (splitline[1].equals(\"1\")) temp2.setDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        itemslist.add(temp2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case(\"E\"):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        Event temp3 \u003d new Event(splitline[2],splitline[3]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        if (splitline[1].equals(\"1\")) temp3.setDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        itemslist.add(temp3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        catch (IOException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public ArrayList\u003cTodo\u003e load() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            loadFile(filePath, itemslist); // Load existing list from persistent storage and update itemslist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                System.out.println(\"Your storage location cannot be accessed.\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return itemslist;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private void writeToFile(FileWriter fw, ArrayList\u003cTodo\u003e itemslist) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        for(Todo item:itemslist){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            switch(item.getType()){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case T:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    fw.write(\"T | \" + (item.getDone() ? \"1\" : \"0\") + \" | \" + item.getDescription() +\u0027\\n\u0027);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    fw.write(\"D | \" + (item.getDone() ? \"1\" : \"0\") + \" | \" + item.getDescription() + \" | \" + ((Deadline) item).getBy() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    fw.write(\"E | \" + (item.getDone() ? \"1\" : \"0\") + \" | \" + item.getDescription() + \" | \" + ((Event) item).getAt() + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void updateStorage(TaskList taskList) { // Updating persistent storage"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            File fold \u003d new File(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            fold.delete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            writeToFile(fw, taskList.getTaskList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(\"Something Went Wrong!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        itemslist \u003d new ArrayList\u003c\u003e(); // Creating an arraylist of todo class"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 95
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected TypeClass Type;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    protected enum TypeClass {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        T, D, E;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public TypeClass getType() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return this.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 19
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * TaskList contains a collection of Tasks. The tasks can be viewed as a list, their status updated,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * and addition and deletion of tasks can be done through the methods of this class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private ArrayList\u003cTodo\u003e TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void viewList(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        for(int i \u003d 0; i \u003c TaskList.size(); ++i){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.print(\"  \" + (i+1) + \". [\" + TaskList.get(i).getType() + \"] [\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + TaskList.get(i).isDone() + \"]  \" + TaskList.get(i).getDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            switch (TaskList.get(i).getType()){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case T:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.println(\" (by: \" + ((Deadline) TaskList.get(i)).getAppointment() + \")\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.println(\" (at: \" + ((Event) TaskList.get(i)).getAppointment() + \")\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        System.out.print(Duke.line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void updateDone(String words) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            int itemNo \u003d Integer.parseInt(words);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            TaskList.get(itemNo - 1).setDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + \"  [\" + TaskList.get(itemNo - 1).isDone() + \"] \" + TaskList.get(itemNo - 1).getDescription() + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + Duke.line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                            + \"Oops! I could not update the indicated task index. Could you re-enter the task you want to update? Here is your current tasklist:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            this.viewList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void addToDo( String description, String[] words) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            String test_input \u003d words[1]; //try to purposely access second element of the array to check for input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            Todo tempTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            TaskList.add(tempTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line + \"  Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + \"    [T] [\" + tempTask.isDone() + \"]  \" // to add type"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + tempTask.getDescription() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + \"  Now you have \" + TaskList.size() + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    + Duke.line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line + \" \\u2639 OOPS!!! The description of a todo cannot be empty.\\n\" + Duke.line);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void addSpecial(String description, String[] words, String keyword){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            int byIndex \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            for (int i \u003d 1; i \u003c words.length; ++i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                if (words[i].equals(\"/\" + keyword)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    byIndex \u003d i;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            if (byIndex !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                Vector\u003cString\u003e sb \u003d new Vector\u003cString\u003e(50);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                for (int i \u003d byIndex + 1; i \u003c words.length; ++i) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    sb.add(words[i]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                String resultantString \u003d String.join(\" \", sb);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                Todo newTodo;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                switch (keyword) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"by\"):"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        newTodo \u003d new Deadline(description, resultantString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        TaskList.add(newTodo);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        System.out.println(Duke.line + \"  Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + \"    [\" + newTodo.getType() + \"] [\" + newTodo.isDone() + \"]  \" // to add type"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + newTodo.getDescription() + \" (\" + keyword + \": \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + ((Deadline) newTodo).getAppointment() + \")\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + \"  Now you have \" + TaskList.size() + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + Duke.line);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    case (\"at\"):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        newTodo \u003d new Event(description, resultantString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        TaskList.add(newTodo);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        System.out.println(Duke.line + \"  Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + \"    [\" + newTodo.getType() + \"] [\" + newTodo.isDone() + \"]  \" // to add type"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + newTodo.getDescription() + \" (\" + keyword + \": \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + ((Event) newTodo).getAppointment() + \")\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + \"  Now you have \" + TaskList.size() + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                                + Duke.line);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line + \"  You have entered an invalid input, ensure that the deadline or appointment is of the form:\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    \"  DD/MM/YY HHmm\\n\" + Duke.line);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void deleteTask(String deleteIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            int delete \u003d Integer.parseInt(deleteIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            Todo temp \u003d TaskList.get(delete - 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            TaskList.remove((delete - 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            String temptextA \u003d (Duke.line + \"  Noted. I have removed this task:\\n\" + \"    [\" + temp.getType() + \"] [\"+ temp.isDone() + \"] \" + temp.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            String temptextB \u003d String.format(\"  Now you have %d tasks in the list.\", TaskList.size()) + \"\\n\" + Duke.line;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            switch (temp.getType()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case T:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.println(temptextA);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.print(temptextB);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.println(temptextA + \" (by: \" + ((Deadline) temp).getAppointment() + \")\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.print(temptextB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.println(temptextA + \" (at: \" + ((Event) temp).getAppointment() + \")\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    System.out.print(temptextB);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line + \"  Unable to delete task, could you double check the index of the task you want to delete?\\n\" + Duke.line);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public ArrayList\u003cTodo\u003e getTaskList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return TaskList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.TaskList \u003d new ArrayList\u003cTodo\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public TaskList(ArrayList\u003cTodo\u003e itemsList) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.TaskList \u003d itemsList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 140
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        Type \u003d TypeClass.T; //updates Type to T"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public String isDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public boolean getDone() { return isDone; }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        isDone \u003d !isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 17
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * The Ui class handles user interaction. When initialized, it prints out"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * DUKE and a Welcome message. It then reads user input lines continuously"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * and calls the Parser to process the input. When the bye command is obtained"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * it terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String line \u003d Duke.line;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private Scanner input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String indes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private void showWelcome() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                \" ____        _\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        System.out.println(logo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                + line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                + \"  Hello I\u0027m Duke!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                + \"  What can I do for you?\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                + line);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        System.out.println(\"No \\\"task.txt\\\" file was found. A new task.txt file has been created.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void run(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.input \u003d new Scanner(System.in); // Simplify call to read input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        this.indes \u003d input.nextLine(); // Reading the whole input description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        while(!indes.equals(\"bye\")){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            new Parser().processInput(taskList, indes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            indes \u003d input.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        System.out.print( line + \"  Bye. Hope to see you again soon!\\n\" + line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        showWelcome();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 43
    }
  },
  {
    "path": "src/main/java/find.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * Find class obtains the keywords entered by the user, and then looks through the tasklist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * first searching all the descriptions, and if have, searching all the appointments. It prints"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " * the search results."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class find {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private ArrayList\u003cTodo\u003e tasklist;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    private static void showSearchResult(ArrayList\u003cTodo\u003e searchResult) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        if(searchResult.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(\"No task matching query was found, please refine your search!\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.print(Duke.line + \"  Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            TaskList tempTaskList \u003d new TaskList(searchResult);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            tempTaskList.viewList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public find(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            this.tasklist \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public static void searchTaskList(TaskList taskList, String searchdescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        String[] searchwords \u003d searchdescription.split(\" \", 0); //Creates a iterable array of search words"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        ArrayList\u003cTodo\u003e returnList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        //For each task in taskList, check if it matches any search word"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        for (Todo task:taskList.getTaskList()){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            ArrayList\u003cString\u003e taskwords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            //Add all the words of the task description to the taskwords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            taskwords.addAll(Arrays.asList(task.getDescription().split(\" \",0)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            switch (task.getType()){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case D:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    taskwords.addAll(Arrays.asList(((Deadline) task).getAppointment().split(\" \")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    taskwords.addAll(Arrays.asList(((Deadline) task).getBy().split(\" \")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                case E:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    taskwords.addAll(Arrays.asList(((Event) task).getAppointment().split(\" \")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    taskwords.addAll(Arrays.asList(((Event) task).getAt().split(\" \")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            // Iterate through searchwords and taskwords and check if any words match, if so break and add to return list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            boolean flag \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            for(String word:searchwords){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                if (flag) {break;}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                for(String taskword:taskwords){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    if(word.equals(taskword)){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        returnList.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        showSearchResult(returnList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 64
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void testGetAppointment(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(\"12th of December 2019,03:00 PM\", new Event(\"testing\",\"12/12/2019 1500\").getAppointment());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void testGetAt() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(\"12/12/2019 1500\", new Event(\"testing\", \"12/12/2019 1500\").getAt());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void testGetDescription(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(\"testing\", new Event(\"testing\", \"12/12/2019 1500\").getDescription());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void testDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        Event testCase \u003d new Event(\"testing\", \"12/12/2019 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        testCase.setDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(true, testCase.getDone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void testGetType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            Event testCase \u003d new Event(\"testing\", \"12/12/2019 1500\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            assertEquals(Task.TypeClass.E, testCase.getType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 35
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void testGetCommandWord() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        new Parser().processInput(testTaskList, \"todo testthisapp\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(Task.TypeClass.T, testTaskList.getTaskList().get(0).getType());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        new Parser().processInput(testTaskList, \"deadline testthisapp /by 12/12/2019 1500\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(Task.TypeClass.D, testTaskList.getTaskList().get(1).getType());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        new Parser().processInput(testTaskList, \"event testthisapp /at 12/12/2019 1500\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        assertEquals(Task.TypeClass.E, testTaskList.getTaskList().get(2).getType());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    public void getCommandWord_Exception_Test() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            new Parser().processInput(testTaskList, \"dingdong abc\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "            System.out.println(Duke.line + \"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" + Duke.line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patwaririshab"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "patwaririshab": 30
    }
  }
]
