[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The due date of this Deadline.*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDateTime dueDate; //includes date and time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The time that this Deadline is due at.*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static DateTimeFormatter formatterD \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HH:mm\");//24h clock"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param description of this Deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateTime the due date and time of this Deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Deadline (String description, String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.dueDate \u003d LocalDateTime.parse(dateTime, formatterD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.identifier \u003d \"[D]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Formats the details of this Deadline and returns it as a string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Format: [D][✘/✓] \u003cdeadline\u0027s description\u003e (by: \u003cdue time\u003e)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the formatted details of this Deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return (super.format() + \" (by: \" + formatterD.format(this.dueDate) + \")\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 35
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * The main class of the project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Executes the main bulk of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deduces if the user did not enter a description for the command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the list containing the user\u0027s task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param parser the Parser object that will process the user\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if parser.parse(list) fails."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void executeDuke(TaskList list, Parser parser) throws IOException{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.readInput();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                parser.parse(list);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Ui.printEmptyDescription(parser.command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Executes the whole of Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Creates the Ui, TaskList and Parser object for this Duke to run."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param args the array that stores the input from the command line."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if a TaskList object cannot be created and if the executeDuke method fails."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void main(String[] args) throws IOException{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui.startup();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        executeDuke(list, parser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 38,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Represents an event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The date that this Event is occurring on.*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The starting time of this Event.*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalTime start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The ending time of this Event.*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalTime end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * The format that the date of the Event needs to be in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static DateTimeFormatter formatterED \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * The format that the start/end time of this Event needs to be in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static DateTimeFormatter formatterET \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param description this Event\u0027s description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period the date and timing of this Event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Event(String description, String period) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] dateTime \u003d period.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTime[0], formatterED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.start \u003d LocalTime.parse(time[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.end \u003d LocalTime.parse(time[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.identifier \u003d \"[E]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Returns the details of this Event as a formatted string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * The format is \u0027[E][✘/✓] \u003cevent\u0027s description\u003e (at: \u003cdate of event\u003e \u003cstart time-end time\u003e)\u0027."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the details of this Event as a string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return (super.format() + \" (at: \" + formatterED.format(this.date) + \" \" + this.start.format(formatterET)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"-\" + this.end.format(formatterET) + \")\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 52
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Process and store the user\u0027s input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //deals with making sense of the user command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**Stores the user input.*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected String[] userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**Stores the command word entered by the user.*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The Scanner object that contains the user\u0027s input.*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected Scanner in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Sets up the Scanner object to prepare to read input from the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.in \u003d new Scanner(System.in); //setting up to read in input from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Makes sense of the user\u0027s input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Splits up the user\u0027s input into command word and detials of the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void readInput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String input \u003d in.nextLine().trim(); // read in input (the whole line)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        userInput \u003d  input.split(\" \", 2); //extract out the command word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        command \u003d userInput[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Uses the command keyword to decide the methods that need to be called to carry out the action the user wants."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the TaskList containing the user\u0027s tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the addTask methods fails."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void parse(TaskList list) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.equals(\"\")) { //user enters nothing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.printEnterSomething();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"bye\")) { //BYE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.printBye();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"list\")) { //LIST"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.printList(list.userList.isEmpty(), list.userList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"done\")) { //DONE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                int taskNum \u003d Integer.parseInt(userInput[1]) - 1; //if fail gives exception n"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                list.doneTask(taskNum);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Ui.printDone(list.userList, taskNum);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (NumberFormatException | IOException n) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The task number has to be in digits. :)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"delete\")) { //REMOVING TASK"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                int taskNum \u003d Integer.parseInt(userInput[1])-1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Ui.printDelete(list.userList, taskNum);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                list.deleteTask(taskNum);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (NumberFormatException | IOException f) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The task number has to be in digits. :)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"find\")) { //FINDING TASK: search for keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String keyword \u003d userInput[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ArrayList\u003cTask\u003e match \u003d new ArrayList\u003cTask\u003e(); //to store task that contains the keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            list.findTask(match, keyword);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.printFind(match);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Task t \u003d new Task(userInput[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            list.addTask(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] deadline \u003d userInput[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Task t \u003d new Deadline(deadline[0], deadline[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                list.addTask(t);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }  catch (DateTimeParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Ui.printDeadlineError();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] event \u003d userInput[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Task t \u003d new Event(event[0], event[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                list.addTask(t);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (DateTimeParseException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Ui.printEventError();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.printDono();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 94
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * It enables reading, writing and overwriting the Data.txt file in a formatted manner."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *Writes, by appending, the new task added to the TaskList to the Data.txt file in a formatted manner."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param task new Task to be added to a list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException If a Filewriter object cannot be created and if data cannot be written to the Data.txt file created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToFile (Task task) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        FileWriter file \u003d new FileWriter(\"C:\\\\Users\\\\yy2\\\\Documents\\\\CS2113Tproject\\\\duke\\\\src\\\\main\\\\java\\\\Data.txt\", true); //curr working dir is duke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.write(task.identifier + \u0027;\u0027);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.write(Boolean.toString(task.isDone) + \u0027;\u0027);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.write(task.description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (task.identifier.equals(\"[D]\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write( \u0027;\u0027 + Deadline.formatterD.format(((Deadline)task).dueDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            //write the date and time as a string to the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else if (task.identifier.equals(\"[E]\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(\u0027;\u0027 + Event.formatterED.format(((Event)task).date) + \u0027 \u0027);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(Event.formatterET.format(((Event)task).start) + \u0027-\u0027);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(Event.formatterET.format(((Event)task).end));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.write(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *Rewrites the data in the existing Data.txt file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list a list of tasks to be written to the Data.txt file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException If a Filewriter object cannot be created and if data cannot be written to the Data.txt file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void overrideFile (ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        FileWriter file \u003d new FileWriter(\"C:\\\\Users\\\\yy2\\\\Documents\\\\CS2113Tproject\\\\duke\\\\src\\\\main\\\\java\\\\Data.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.write(\"\"); // to clear the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task l : list) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            writeToFile(l);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *Load saved data from the Data.txt file into an TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the list that the tasks stored in the Data.txt file is being put into."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws FileNotFoundException if the Data.txt file that is being read does not exists."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromFile (ArrayList\u003cTask\u003e list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File data \u003d new File(\"C:\\\\Users\\\\yy2\\\\Documents\\\\CS2113Tproject\\\\duke\\\\src\\\\main\\\\java\\\\Data.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Scanner txtFile \u003d new Scanner(data);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Scanner s \u003d new Scanner(txtFile.nextLine());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            s.useDelimiter(\";\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String id \u003d s.next();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String done \u003d s.next();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String des \u003d s.next();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (id.equals(\"[D]\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String due \u003d s.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                t \u003d new Deadline(des, due);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (id.equals(\"[E]\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String due \u003d s.next();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                t \u003d new Event(des, due);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                t \u003d new Task(des);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                t.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            list.add(t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 83
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Represents a task/to do."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //same as ToDos"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**The description of this Task.*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**Specifies if this Task is done or not.*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**Specifies the type of task: To Do; Event; Deadline.*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected String identifier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param description of this Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.identifier \u003d \"[T]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Returns the status symbol for this Task depending on the value of isDone."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the status symbol for this Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Marks a Task as done by setting isDone of this Task to be true."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Formats the details of this Task and returns it as a string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Format: [T][✘/✓] \u003ctask\u0027s description\u003e."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the formatted details of this Task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return (this.identifier + \"[\" + this.getStatusIcon() + \"] \" + this.description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 49
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Represents a list of tasks that needs to be done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**A list storing the user\u0027s task.*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected ArrayList\u003cTask\u003e userList \u003d new ArrayList\u003cTask\u003e(); //ArrayList is similar to vectors in c++"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Loads saved data from the Data.txt file into this TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the Data.txt file cannot be read."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public TaskList() throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Storage.readFromFile(userList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes the specified task from this TaskList and updates the data in Data.txt."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param taskNum the index of the specified task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if data cannot be written to Data.txt or if Data.txt does not exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteTask(int taskNum) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        userList.remove(taskNum);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage.overrideFile(userList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Marks the specified task in this Tasklist as completed and updates Data.txt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param taskNum the index of the specified task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if data cannot be written to Data.txt or if Data.txt does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void doneTask(int taskNum) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        userList.get(taskNum).markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage.overrideFile(userList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Add tasks that matches the user\u0027s keyword into a list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param match the list that will contain the matching tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param keyword the phrase that the user wants to search for."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void findTask(ArrayList\u003cTask\u003e match, String keyword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task task : userList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                match.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds the specified task to this TaskList and updates Data.txt."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param t the task to be added into this TaskList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if data cannot be written to Data.txt or if Data.txt does not exist."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addTask (Task t) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        userList.add(t); //add input into the arraylist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage.writeToFile(t);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui.printAdd(t, userList.size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 68
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Prints messages to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints the initial message when Duke starts up."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void startup() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo); //start up logo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\"); //initial greeting"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"-Note for date and time format-\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"\\tDeadlines: dd/mm/yy hh:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"\\tEvents: dd/mm/yy hh:mm-hh:mm\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the task specified has been successfully deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userList the list containing the user\u0027s tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param taskNum the index of the task that is being deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printDelete(ArrayList\u003cTask\u003e userList, int taskNum) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\" \" + userList.get(taskNum).format());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(String.format(\"Now you have %d tasks in the list.\", userList.size()-1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Says bye to the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printBye() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the user\u0027s list of tasks if the list of not empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Otherwise, it tells the user that the list is empty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param b if true, the list is empty. else if false, the list has tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userList the user\u0027s list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printList (boolean b, ArrayList\u003cTask\u003e userList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (b) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Congrats! You have no tasks! :D\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c userList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"\\t\" + (i+1) + \".\" + userList.get(i).format());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the tasks specified has been successfully marked as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userList the user\u0027s list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param taskNum the index of the tasks to be marked as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printDone (ArrayList\u003cTask\u003e userList, int taskNum) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"\\t\" + userList.get(taskNum).format());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Shows the user the tasks that match their search if there are matches."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Otherwise, it tells the user that there are no matching tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the user\u0027s list of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printFind (ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"There are no matching tasks. :-(\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int j \u003d 0; j \u003c list.size(); j++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"\\t\" + (j+1) + \".\" + list.get(j).format());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the specified task has been successfully added to their list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param t the task to be added to the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param size the number of tasks in the user\u0027s list after adding the new task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printAdd (Task t, int size) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\" \" + t.format());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(String.format(\"Now you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user the correct format to input the date and time for deadlines."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printDeadlineError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Please input the date and time(24h format) in the format \\\u0027dd/mm/yy hh:mm\\\u0027\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user the correct format to input the date and time for events."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printEventError() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Please input the date and time(24h format) in the format \\\u0027dd/mm/yy hh:mm-hh:mm\\\u0027\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the command word they have entered is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printDono() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the command that they have entered cannot have an empty description."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is onyl printed if the command is valid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param s the command that the user typed in."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printEmptyDescription(String s) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.printf(\"☹ OOPS!!! The description of a %s cannot be empty.\\n\", s);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Asks the user to enter some words."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void printEnterSomething() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Please enter a command! :D\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 137
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void format() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task d \u003d new Deadline(\"return book\", \"04/03/02 02:00\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"[D][✘] return book (by: 04/03/02 02:00)\", d.format());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        d.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"[D][✓] return book (by: 04/03/02 02:00)\", d.format());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 14
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "@DisplayName(\"Empty_Description_Test\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    DukeTest() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void setupStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void restoreStream(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //------------------------------------------TESTS-----------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyTodo_throwsException() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"todo\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyTodoWithWhiteSpace_throwsException() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"  todo   \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyDeadline_givesException() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"deadline\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a deadline cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyDeadlineWithWhiteSpace_givesException() throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"       deadline  \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a deadline cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyEvent_givesException() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"event\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a event cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyEventWithWhiteSpace_givesException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"       event  \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a event cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyDone_givesException() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"done\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a done cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyDoneWithWhiteSpace_givesException() throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"       done  \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a done cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyDelete_givesException() throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"delete\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a delete cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyDeleteWithWhiteSpace_givesException() throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"       delete  \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a delete cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyFine_givesException() throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"find\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a find cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testExecuteDuke_emptyFindWithWhiteSpace_givesException() throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            parser.in \u003d new Scanner(\"       find  \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Duke.executeDuke(list, parser);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a find cannot be empty.\\n\", output.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 163
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testFormat() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task e \u003d new Event(\"project meeting\",  \"15/09/89 22:30-04:03\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"[E][✘] project meeting (at: 15/09/89 22:30-04:03)\", e.format());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        e.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"[E][✓] project meeting (at: 15/09/89 22:30-04:03)\", e.format());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 14
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //to prevent system exit in method being tested"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void setupStream() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void restoreStream(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //-----------------------------------------------TESTS-----------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testReadInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        p.in \u003d new Scanner(\"deadline do homework /by 04/05/10 00:00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        p.readInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertTrue(p.command.equals(\"deadline\") \u0026\u0026 p.userInput[1].equals(\"do homework /by 04/05/10 00:00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_emptyUserInput_printString() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser emp \u003d new Parser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.command \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.parse(l);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please enter a command! :D\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_doneTask_success() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task t \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        l.userList.add(t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser emp \u003d new Parser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.command \u003d \"done\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.userInput[1] \u003d Integer.toString(l.userList.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.parse(l);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Nice! I\u0027ve marked this task as done:\\r\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"\\t[T][✓] read book\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_doneTask_exceptionThrown() throws IOException{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task t \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        l.userList.add(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser emp \u003d new Parser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.command \u003d \"done\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.userInput[1] \u003d \"k\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.parse(l);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The task number has to be in digits. :)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_deleteTask_success() throws IOException{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task t \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        l.userList.add(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser del \u003d new Parser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.command \u003d \"delete\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.userInput[1] \u003d Integer.toString(l.userList.size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.parse(l);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String s \u003d \"Noted. I\u0027ve removed this task:\\r\\n\" + \" [T][✘] read book\\r\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\\r\\n\", l.userList.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(s, output.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_deleteTask_exceptionThrown() throws IOException{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser del \u003d new Parser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.command \u003d \"done\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.userInput[1] \u003d \"k\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        del.parse(l);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The task number has to be in digits. :)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_addDeadline_success() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task t \u003d new Deadline(\"return book\", \"03/04/12 23:00\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        l.userList.add(t);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser emp \u003d new Parser();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.command \u003d \"deadline\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.userInput[1] \u003d \"return book /by 03/04/12 23:00\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        emp.parse(l);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \\r\\n\" + \" [D][✘] return book (by: 03/04/12 23:00)\\r\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\\r\\n\", l.userList.size()), output.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_addDeadline_exceptionThrown() throws IOException{"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser ded \u003d new Parser();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.command \u003d \"deadline\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.userInput[1] \u003d \"return book /by 25/05/78 1200\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.parse(l);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please input the date and time(24h format) in the format \\\u0027dd/mm/yy hh:mm\\\u0027\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_addEvent_success() throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task t \u003d new Event(\"return book\", \"03/04/12 23:00-09:00\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        l.userList.add(t);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser e \u003d new Parser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        e.command \u003d \"event\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        e.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        e.userInput[1] \u003d \"return book /at 03/04/12 23:00-09:00\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        e.parse(l);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \\r\\n\" + \" [E][✘] return book (at: 03/04/12 23:00-09:00)\\r\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\\r\\n\", l.userList.size()), output.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_addEvent_exceptionThrown() throws IOException{"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser ded \u003d new Parser();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.command \u003d \"event\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.userInput[1] \u003d \"return book /at 25/05/78 1200-09:00\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ded.parse(l);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please input the date and time(24h format) in the format \\\u0027dd/mm/yy hh:mm-hh:mm\\\u0027\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_dono1() throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser dono \u003d new Parser();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.command \u003d \"events\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.userInput[1] \u003d \"return book /at 03/04/12 23:00-09:00\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.parse(l);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testParse_dono2() throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Parser dono \u003d new Parser();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.command \u003d \"deadlinesjdkj\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.userInput \u003d new String[4];"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.userInput[1] \u003d \"return book /at 03/04/12 23:00-09:00\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        dono.parse(l);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 174
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void testFormat() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Task t \u003d new Task(\"borrow book\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"[T][✘] borrow book\", t.format());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"[T][✓] borrow book\", t.format());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 14
    }
  }
]
