[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "laurenthg": 5
    }
  },
  {
    "path": "src/main/java/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.zip.DataFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private GregorianCalendar d;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date(GregorianCalendar d){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.d \u003d d;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        SimpleDateFormat fmt \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        fmt.setCalendar(this.d);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String dateFormatted \u003d fmt.format(this.d.getTime());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return  dateFormatted; //no need secondes and time zone"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 19
    }
  },
  {
    "path": "src/main/java/DateEventFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class DateEventFormatException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public DateEventFormatException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t dateEventFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the date format for an event\" +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"\\n\\t\\t\\t dd/MM/yyyy HH:mm - dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 9
    }
  },
  {
    "path": "src/main/java/DateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class DateFormatException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public DateFormatException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t dateFormatException:\\n\\t\\t ☹ OOPS!!! Please respect the date format\\n\\t\\t\\t \" +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                \"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 9
    }
  },
  {
    "path": "src/main/java/DeadlinesTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class DeadlinesTask extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String tag; // [D]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private Date deadlines;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public DeadlinesTask(String task, Date deadlines){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public DeadlinesTask(String task, String mark, Date deadlines){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super.setMark(mark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d\"[D]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date getDeadlines(){ return this.deadlines;}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "laurenthg": 22
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void display(String s){ // Used also by Exception Classes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    Display the list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static void displayList(List\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        for (int i \u003d 0 ;i\u003c tasks.size() ; i++ ){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            System.out.print(displayOneElementList(tasks,i));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(\"\\t---------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    return the String of display of one element of list of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static String displayOneElementList(List\u003cTask\u003e tasks, int index){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Task t \u003d tasks.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String result \u003d \"\\t \"+ (index+1) + \". \" + t.getTag() +t.getMark() + \" \" +t.getTask();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (t instanceof DeadlinesTask){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            result +\u003d  \" by:\" + ((DeadlinesTask) t).getDeadlines() + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else if ( t instanceof EventsTask){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            result +\u003d  \" at:\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    ((EventsTask) t).getDateFirst() + \" - \" + ((EventsTask) t).getDateSecond() + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            result +\u003d \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static void displayLogo(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    Initialization of the tasks list by reading the data file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static void initialization(List\u003cTask\u003e tasks, BufferedReader bufferedReader){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String readLine \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String[] line;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            String mark \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            while (readLine !\u003d null \u0026\u0026 !readLine.isBlank()){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                line \u003d readLine.split(\"//\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                mark \u003d line[2];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                switch ( line[1] ){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    case \"[T]\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new TodoTask(line[3],mark));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    case \"[D]\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new DeadlinesTask(line[3],mark,stringToDate(line[4].substring(4).trim())));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    case \"[E]\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                new EventsTask(line[3],mark,stringToDate(line[4].substring(4)), stringToDate(line[5])));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                readLine \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            display(\"\\t IOException: \\n\\t\\t error when readFile for initialization of tasks list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (InexistentDateException e){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            e.print();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private static Date stringToDate(String deadlineString) throws InexistentDateException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] dateString \u003d deadlineString.split(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] daysString \u003d dateString[0].split(\"/\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String[] hoursString \u003d dateString[1].split(\":\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int day \u003d Integer.parseInt(daysString[0]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int month \u003d Integer.parseInt(daysString[1]) -1 ;// Convention of Gregorian Calendar Jan\u003d 0; Feb \u003d1; Dec \u003d11;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int year \u003d Integer.parseInt(daysString[2]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int hrs\u003d Integer.parseInt(hoursString[0]) ;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        int min \u003d Integer.parseInt(hoursString[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (min\u003c0 || min \u003e59){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new InexistentDateException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (hrs \u003c0 || hrs \u003e23){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            throw new InexistentDateException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        switch( month){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            case 0: case 2: case 4: case 6: case 7: case 9: case 11: // month with 31 days : 11 for december"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (day \u003e 31 || day \u003c0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new InexistentDateException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            case 3 : case 5: case 8: case 10: // month with 31 days"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (day \u003e 30 || day \u003c0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new InexistentDateException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            case 1 : // February"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                // second part : no leap year and day\u003d\u003d29"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if ((day \u003e29 || day \u003c 0) || ((!((year % 4 \u003d\u003d0 \u0026\u0026 year % 100 !\u003d 0) || year % 400 \u003d\u003d 0))\u0026\u0026 day\u003d\u003d29) ){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new InexistentDateException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                throw new InexistentDateException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        GregorianCalendar d \u003d new GregorianCalendar(year,month,day,hrs,min);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return new Date(d);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e(); // Use of ArrayList (A-Collections) to store tasks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String file \u003d\"\"; // file name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        if (args.length !\u003d 0 ){ // test file in case of test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            file \u003d args[0];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        else{ // no test file"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            file \u003d System.getProperty(\"user.dir\")+ \"/data/duke.txt\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        ReadFile rFile \u003d new ReadFile(file);// reader for initialization of tasks list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        BufferedReader bufferedReader \u003d rFile.getBufferedReader();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        initialization(tasks,bufferedReader); //initialization of tasks list from the Duke.txt datafile"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        rFile.freeBufferedReader();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        WriteFile wFile \u003d new WriteFile(file,true); // true: writer of file by appending txt"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        displayLogo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        display(\"\\t Hello I\u0027m Duke\\n\\t What can I do for you ?\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        String user \u003d sc.nextLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        while (!user.equals(\"bye\")){"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                if (user.equals(\"list\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        displayList(tasks);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        display(\"\\t There is any task yet \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if (user.matches(\"find (.*)\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String find \u003d user.substring(5);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String result \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    for ( int i \u003d 0 ; i\u003c tasks.size() ; i++){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if ( tasks.get(i).getTask().contains(find)){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            result +\u003d displayOneElementList(tasks,i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if ( result.isEmpty()){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        display(\"\\t There is no matching tasks in your list\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        display(\"\\t Here are the matching tasks in your list: \\n\" + result );"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if (user.matches(\"done \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    int index \u003d Integer.parseInt(user.substring(5)) - 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new InexistentTaskException();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else { // to change the mark, the whole file is rewritten ( probably a better way to do it)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.get(index).taskDone();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String text\u003d\"\" , line \u003d\"\", oldLine \u003d(index+1)+\"//\"+task.getTag()+\"//\"+\"[✗]\" ,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                newLine \u003d(index+1)+\"//\"+task.getTag()+\"//\"+task.getMark();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        ReadFile readFile \u003d new ReadFile(file);// reader to read before change the data file"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        BufferedReader bufferedR \u003d readFile.getBufferedReader();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            while ((line \u003d bufferedR.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                if (line.contains(oldLine)){"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    line \u003d line.replace(oldLine,newLine);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                text +\u003d line + \"\\n\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        catch(IOException e){"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t IOException: \\n\\t\\t error when reading the whole file\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        readFile.freeBufferedReader(); //close the reader"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        // false :// rewriter of file by replacing the whole file"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        WriteFile rwFile \u003d new WriteFile(file,false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            rwFile.write(text);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        catch (IOException e){"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t IOException: \\n\\t\\t error when writing the whole file\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        rwFile.freeBufferedWriter();//free the writer"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        display(\"\\t Nice! I\u0027ve marked this task as done:\\n\\t \" + tasks.get(index).getTag() +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    tasks.get(index).getMark() + \" \" + tasks.get(index).getTask());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if (user.matches(\"delete \\\\d+\")) {// if it is done and a number of task"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    int index \u003d Integer.parseInt(user.substring(7)) - 1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (index \u003e tasks.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new InexistentTaskException();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else { // the tasks exist"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String text\u003d\"\" , line \u003d\"\", oldLine \u003d(index+1)+\"//\"+removedTask.getTag() ,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                newLine \u003d\"\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        ReadFile readFile \u003d new ReadFile(file);// reader to read before change the data file"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        BufferedReader bufferedR \u003d readFile.getBufferedReader();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            for (int i \u003d 0 ; i\u003c tasks.size()+1 ; i++){ // one task have been just removed"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                line \u003d bufferedR.readLine();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                if (!line.contains(oldLine)){"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    if (i \u003e index ) { // we should minus 1 to each line after the line removed"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        line \u003d line.replace( (i+1) +\"//\", (i)+\"//\"  ) + \"\\n\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        text +\u003d line ;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    else{"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        text+\u003d line +\"\\n\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        catch(IOException e){"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t IOException: \\n\\t\\t error when reading the whole file\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        readFile.freeBufferedReader(); //close the reader"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        // false :// rewriter of file by replacing the whole file"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        WriteFile rwFile \u003d new WriteFile(file,false);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        try{"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            rwFile.write(text);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        catch (IOException e){"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t IOException: \\n\\t\\t error when writing the whole file\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        rwFile.freeBufferedWriter();//free the writer"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        display(\"\\t Noted. I\u0027ve removed this task: \\n\" +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                \"\\t\\t \"+removedTask.getTag() + removedTask.getMark() + \" \" + removedTask.getTask()+"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                \"\\n\\t Now you have \"+ tasks.size() +\" tasks in the list\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if (user.matches(\"todo(.*)\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (user.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new EmptyTodoException();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        tasks.add(new TodoTask(user.substring(4).trim()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        TodoTask newTask \u003d (TodoTask) tasks.get(tasks.size() - 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            wFile.write(tasks.size() + \"//\" + newTask.getTag() + \"//\" +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    newTask.getMark() + \"//\" + newTask.getTask()+\"\\n\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        catch (IOException e){"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t IOException:\\n\\t\\t error when writing a todoTask to file\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    + newTask.getTag() + newTask.getMark() + newTask.getTask() +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if (user.matches(\"deadline (.*)\")) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String[] taskDescription \u003d user.substring(8).split(\"/by\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new EmptyDeadlineException();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else if (taskDescription.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new EmptyDeadlineDateException();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String deadlineString \u003d taskDescription[1].trim();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        //date format used: dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String regex \u003d\"[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9] [0-9][0-9]:[0-9][0-9]\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (!deadlineString.matches(regex)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            throw new DateFormatException();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            Date deadline \u003d stringToDate(deadlineString);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new DeadlinesTask(description, deadline));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            DeadlinesTask newTask \u003d (DeadlinesTask) tasks.get(tasks.size() - 1);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                wFile.write(tasks.size() + \"//\" + newTask.getTag() + \"//\" +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        newTask.getMark() + \"//\" + newTask.getTask() + \"//\" + \" by:\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        +newTask.getDeadlines() + \"\\n\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            } catch (IOException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                display(\"\\t IOException:\\n\\t\\t error when writing a deadline to file\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    + newTask.getTag() + newTask.getMark() + newTask.getTask() + \" by:\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    + newTask.getDeadlines() +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else if (user.matches(\"event (.*)\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    String[] taskDescription \u003d user.substring(5).split(\"/at\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    if (taskDescription[0].isBlank()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new EmptyEventException();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else if (taskDescription.length \u003d\u003d 1) { // no /by in input"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        throw new EmptyEventDateException();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String description \u003d taskDescription[0].trim();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String periodString \u003d taskDescription[1].trim();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        //date format used: dd/MM/yyyy HH:mm - dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        String regex \u003d\"[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9] [0-9][0-9]:[0-9][0-9] \" +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                \"- [0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9] [0-9][0-9]:[0-9][0-9]\";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        if (!periodString.matches(regex)) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            throw new DateEventFormatException();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            String[] dateString \u003d periodString.split(\" - \");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            Date dateFirst \u003d stringToDate(dateString[0]);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            Date dateSecond \u003d stringToDate(dateString[1]);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            tasks.add(new EventsTask(description, dateFirst,dateSecond));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            EventsTask newTask \u003d (EventsTask) tasks.get(tasks.size() - 1);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                wFile.write(tasks.size() + \"//\" + newTask.getTag() + \"//\" +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        newTask.getMark() + \"//\" + newTask.getTask() + \"//\"+"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                        \" at:\" + newTask.getDateFirst() + \"//\" + newTask.getDateSecond()+\"\\n\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            catch (IOException e){"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                display(\"\\t IOException:\\n\\t\\t error when writing a event to file\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                            display(\"\\t Got it. I\u0027ve added this task:\\n\\t   \""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    + newTask.getTag() + newTask.getMark() + newTask.getTask() + \" at:\""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                            + newTask.getDateFirst() + \" - \" + newTask.getDateSecond() +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                                    \"\\n\\t Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                    throw new UnmeaningException();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            catch (DukeException e){ // catch one of subclass of dukeException and print the right message"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "                e.print();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            user\u003dsc.nextLine();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        display(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        wFile.freeBufferedWriter();  // close() bufferedwriter"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 347,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public abstract class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public abstract void print();"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 3
    }
  },
  {
    "path": "src/main/java/EmptyDeadlineDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EmptyDeadlineDateException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EmptyDeadlineDateException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t emptyDeadlineDateException:\\n\\t\\t ☹ OOPS!!! Please enter a deadline for the task\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/EmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EmptyDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EmptyDeadlineException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t emptyDeadlineException:\\n\\t\\t ☹ OOPS!!! The description of a deadline task cannot be empty\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/EmptyEventDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EmptyEventDateException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EmptyEventDateException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t emptyEventDateException:\\n\\t\\t ☹ OOPS!!! Please enter a period for the event task\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/EmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EmptyEventException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EmptyEventException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t emptyEventException:\\n\\t\\t ☹ OOPS!!! The description of a event task cannot be empty\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/EmptyTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EmptyTodoException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EmptyTodoException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t emptyTodoException:\\n\\t\\t ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/EventsTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class EventsTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String tag; // [E]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private Date dateFirst;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private Date dateSecond;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventsTask(String task, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateSecond \u003d dateSecond;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public EventsTask(String task, String mark, Date dateFirst, Date dateSecond) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super.setMark(mark);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateFirst \u003d dateFirst;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.dateSecond \u003ddateSecond;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date getDateFirst(){ return this.dateFirst;}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public Date getDateSecond(){ return this.dateSecond; }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "laurenthg": 26
    }
  },
  {
    "path": "src/main/java/InexistentDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class InexistentDateException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public InexistentDateException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t inexistentDateException:\\n\\t\\t ☹ OOPS!!! \\n\\t\\t\\t The date doesn\u0027t exist\" );"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/InexistentTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class InexistentTaskException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public InexistentTaskException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t inexistentTaskException:\\n\\t\\t ☹ OOPS!!! The task doesn\u0027t exist\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/ReadFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class ReadFile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private BufferedReader bufferedR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public ReadFile(String file){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            FileReader fileReader \u003d new FileReader(file);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.bufferedR \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Duke.display(\"\\t FileNotFoundException: \\n\\t\\t the \" + file +\" isn\u0027t found \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Duke.display(\"\\t IOException: \\n\\t\\t error with fileReader\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public BufferedReader getBufferedReader() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return bufferedR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void freeBufferedReader(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.bufferedR.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Duke.display(\"\\t IOException: \\n\\t\\t error when close the bufferedReader\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 36
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String mark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected Task (String task){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d \"[✗]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected void setMark(String mark){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark\u003d mark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected void taskDone(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.mark \u003d \"[✓]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected String getTask(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    protected String getMark(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        return this.mark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public abstract String getTag();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 26
    }
  },
  {
    "path": "src/main/java/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class TodoTask extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private String tag; // [T]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public TodoTask(String task){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d\"[T]\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public TodoTask(String task, String mark){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        super.setMark(mark);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        this.tag \u003d\"[T]\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public String getTag(){ return this.tag;}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 16
    }
  },
  {
    "path": "src/main/java/UnmeaningException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class UnmeaningException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public UnmeaningException(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void print(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        Duke.display(\"\\t unmeaningException:\\n\\t\\t OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\\"\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 8
    }
  },
  {
    "path": "src/main/java/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private BufferedWriter bufferedW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    private StringBuffer stringBuffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public WriteFile(String file, boolean append){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            FileWriter fileW \u003d new FileWriter(file,append); // write only for append text on datafile"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.bufferedW \u003d new BufferedWriter(fileW);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch(IOException e){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Duke.display(\"\\t IOException: \\n\\t\\t error with fileWritter\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void write(String s) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        bufferedW.write(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        bufferedW.flush();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    public void freeBufferedWriter(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            this.bufferedW.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "            Duke.display(\"\\t IOException: \\n\\t\\t error when close the bufferedWriter\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "laurenthg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "laurenthg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "laurenthg": 34
    }
  }
]
