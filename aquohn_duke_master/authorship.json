[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 23,
      "-": 18
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private DukeContext ctx; //holds the tasklist, ui and storage classes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates a new Duke object, with an associated DukeContext."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see DukeContext"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param filePath The path where the data file will be located."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        Ui ui \u003d new Ui(System.in, System.out); //UI construction is safe, send welcome first"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            //construct tasklist from storage and ui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            ctx \u003d new DukeContext(new Storage(filePath), ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeFatalException excp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            excp.killProgram(ui); //standard exit on fatal exception"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.printHello();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Continually extracts and executes commands from user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                Command c \u003d ctx.ui.parseCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                c.execute(ctx);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } catch (DukeException excp) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                ctx.ui.printError(excp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public static void main(String[] argv) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        new Duke(\"data/tasks.tsv\").run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 46
    }
  },
  {
    "path": "src/main/java/duke/DukeContext.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DukeContext {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public final Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public final Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Create new DukeContext, generating taskList from the provided Ui and Storage objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param _storage Storage object to use in this context."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param _ui Ui object to use in this context."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeFatalException If unable to setup data file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public DukeContext(Storage _storage, Ui _ui) throws DukeFatalException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        storage \u003d _storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ui \u003d _ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeResetException excp) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            String resetStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            ui.printError(excp);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            while (true) { //wait for user to respond"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                resetStr \u003d ui.readLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                if (resetStr.length() \u003e 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    resetStr \u003d resetStr.substring(0, 1); //extract first char"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    if (resetStr.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        storage.writeTaskFile(\"\"); //write empty string to data file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        ui.print(\"Your data has been reset!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    } else if (resetStr.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        ui.closeUi();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                        System.exit(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeFatalException excp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            excp.killProgram(ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ArgCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "// Commands that take only one argument"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public abstract class ArgCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String arg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String emptyArgMsg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        arg \u003d inputStr.strip();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (arg.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(emptyArgMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (arg \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"Command needs to parse argument first!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeFatalException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.closeUi();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 13
    }
  },
  {
    "path": "src/main/java/duke/command/CMD.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "// enum for generating hashmap of strings to commands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Maintains the associations between command keywords and commands (e.g. \"list\" -\u003e ListCommand). For use in parsing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public enum CMD {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    LIST(\"list\") {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    BYE(\"bye\") {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    DONE(\"done\") {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    TODO(\"todo\") {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new NewToDoCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    EVENT(\"event\") {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new NewEventCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    DLINE(\"deadline\") {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new NewDeadlineCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    DEL(\"delete\") {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    FIND(\"find\") {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Command getCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private final String cmdStr;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates the CMD enum instance and associates the specified keyword with it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param _cmdStr The keyword to be associated with the specified task type."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    CMD (final String _cmdStr) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        cmdStr \u003d _cmdStr;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return cmdStr;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates an empty (all parameters null) new Command of the specified type, to be loaded with data using its"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * parse method."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return A new Command of the specified type."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public abstract Command getCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 72
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Highest-level abstract class for Command objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Parses the user\u0027s input and loads the parameters for this Command from it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param inputStr The input provided by the user for this command, without the command keyword and stripped."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If input was in the wrong format, contained invalid values, or was otherwise unable to be"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * parsed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void parse(String inputStr) throws DukeException {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Runs the command using the parameters loaded with Command\u0027s parse method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param ctx The DukeContext object for this command to operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If command fails to execute."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see DukeContext"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public abstract void execute(DukeContext ctx) throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DeleteCommand extends ArgCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String taskStr \u003d ctx.taskList.deleteTask(arg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.print(taskStr);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 14
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DoneCommand extends ArgCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String taskStr \u003d ctx.taskList.markDone(arg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.print(taskStr);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 14
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class FindCommand extends ArgCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me what to look for!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       ctx.ui.print(ctx.taskList.find(arg));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 15
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String listStr \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.print(listStr +  ctx.taskList.listTasks());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 13
    }
  },
  {
    "path": "src/main/java/duke/command/MultiArgCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Abstract class for commands with multiple arguments split by a common delimiter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public abstract class MultiArgCommand extends ArgCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String[] argv;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    int argc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String delim;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String invalidArgMsg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Splits the input string into the argv array based on the common delimiter delim"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If, after being split the number of arguments is less than argc, the required number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        //remove excess whitespace between commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        //primarily to prevent space-delimited commands from throwing errors if there are two spaces"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        argv \u003d arg.split(\"\\\\s*\" + delim + \"\\\\s*\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (argv.length \u003c argc) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(invalidArgMsg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        for (int i \u003d 0; i \u003c argv.length; ++i) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            argv[i] \u003d argv[i].strip();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 32
    }
  },
  {
    "path": "src/main/java/duke/command/NewDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class NewDeadlineCommand extends NewTimedTaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public NewDeadlineCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        delim \u003d \"/by\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        invalidArgMsg \u003d \"Invalid deadline! I need to know the date and time that it is due /by.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the deadline!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           throw new DukeException(\"Task description cannot be empty!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(ctx);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d ctx.taskList.addTask(new DeadlineTask(argv[0], datetime));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.print(addStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 31
    }
  },
  {
    "path": "src/main/java/duke/command/NewEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class NewEventCommand extends NewTimedTaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public NewEventCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        argc \u003d 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        delim \u003d \"/at\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        invalidArgMsg \u003d \"Invalid event! I need to know the date and time that it is /at.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        emptyArgMsg \u003d \"You didn\u0027t tell me anything about the event!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"Task description cannot be empty!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(ctx);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d ctx.taskList.addTask(new EventTask(argv[0], datetime));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.print(addStr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 31
    }
  },
  {
    "path": "src/main/java/duke/command/NewTimedTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.TimedTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Abstract class for Tasks that need to store a LocalDateTime object as part of their description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public abstract class NewTimedTaskCommand extends MultiArgCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    LocalDateTime datetime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Split the input string into the elements of the argv array using MultiArgCommand\u0027s parse, then load the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * with argv[0] as the description and argv[1] as the date and time in the TimedTask data format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If task description is empty, or if date and time are invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see MultiArgCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.parse(inputStr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (argv[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            argv \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"The task description cannot be empty!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            datetime \u003d LocalDateTime.parse(argv[1], TimedTask.getDataFormatter());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DateTimeParseException excp) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"Date and time must be given as e.g. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    + LocalDateTime.now().format(TimedTask.getDataFormatter()) + \".\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 37
    }
  },
  {
    "path": "src/main/java/duke/command/NewToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.DukeContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class NewToDoCommand extends ArgCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public NewToDoCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        emptyArgMsg \u003d \"Task description cannot be empty!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void execute(DukeContext ctx) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super.execute(ctx);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d ctx.taskList.addTask(new ToDoTask(arg));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.storage.writeTaskFile(ctx.taskList.getFileStr());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ctx.ui.print(addStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 19
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   private final HashMap\u003cString, CMD\u003e commandMap \u003d new HashMap\u003cString, CMD\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * Constructs a new Parser, generating a HashMap from CMD enum values to allow fast lookup of command types"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public Parser() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      for (CMD cmd : CMD.values()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         commandMap.put(cmd.toString(), cmd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * Creates a new Command of the type requested by the user, and extracts the necessary data for the command from"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * the arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @param inputStr The input to the command line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @return A new instance of the Command object requested"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @throws DukeException If there is no matching command or the arguments do not meet the command\u0027s requirements."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public Command parse(String inputStr) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      inputStr \u003d inputStr.replace(\"\\t\", \"    \"); //sanitise input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      int firstSpaceIdx \u003d inputStr.indexOf(\" \"); //index of first space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      String cmdStr \u003d (firstSpaceIdx \u003d\u003d -1) ? inputStr : inputStr.substring(0, firstSpaceIdx); //extract command name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      CMD cmd \u003d commandMap.get(cmdStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      if (cmd \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      Command command \u003d cmd.getCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      // TODO: if possible, disambiguate using functions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      // trim command and first space after it from input if needed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      if (command instanceof ArgCommand) { // stripping not required otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         inputStr \u003d inputStr.substring(cmdStr.length()).strip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      command.parse(inputStr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      return command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private final Scanner scanIn;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private final PrintStream stdout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Constructs a new Ui object, with a new Parser, constructs a Scanner for the input stream, and specifies output"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * stream"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @see Parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public Ui(InputStream _stdin, PrintStream _stdout) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        stdout \u003d _stdout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        scanIn \u003d new Scanner(_stdin);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Prints logo and welcome message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String logoSpace \u003d \"                                  \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String titleSpace \u003d \"                                        \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String logo \u003d logoSpace + \" ____        _        \" + System.lineSeparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + logoSpace + \"|  _ \\\\ _   _| | _____ \" + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + logoSpace + \"| | | | | | | |/ / _ \\\\\" + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + logoSpace + \"| |_| | |_| |   \u003c  __/\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + logoSpace + \"|____/ \\\\__,_|_|\\\\_\\\\___|\" + System.lineSeparator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        stdout.println(System.lineSeparator() + titleSpace + \"Hello from\" + System.lineSeparator() + logo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Prints hello message to indicate that setup is completed and Duke can receive user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void printHello() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        print(\"Hello, I\u0027m Duke!\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Gets the next line of input from the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return The next line of input from the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return scanIn.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Sanitises input and use the Parse to extract the requested command, which will be loaded with parameters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * extracted from the user\u0027s arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return The command specified by the user, with arguments parsed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If Parser fails to find a matching command or the arguments do not meet the command\u0027s"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * requirements."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public Command parseCommand() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String inputStr \u003d readLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        inputStr \u003d inputStr.replaceAll(\"\\t\", \"    \"); //sanitise input"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return parser.parse(inputStr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Prints a message, indented and bracketed between two lines. Newlines in the message will have indents added"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * after them."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param msg Message to be printed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void print(String msg) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String line \u003d \"    ________________________________________________________________________________\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String indentline \u003d System.lineSeparator() + \"    \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        stdout.println(line);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        msg \u003d msg.replaceAll(\"(\\\\r\\\\n|\\\\n|\\\\r)\", indentline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        stdout.println(\"    \" + msg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        stdout.println(line + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Closes the scanner and print a goodbye message. Ui should not be used any more after calling this function."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void closeUi() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        scanIn.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    //Leaving this here for future expansion (red text, etc.)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Prints the error message from an exception."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param excp Exception whose message we want to print."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void printError(DukeException excp) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        print(excp.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 98
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Base class for all Duke-specific exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Format a custom message from the process which threw the exception, and create an Exception object with that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param msg String describing the cause of the exception, and what the user can do to fix it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public DukeException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       super(\"Oops! :( \" + msg); //yeah this is pretty useless for now"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFatalException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Exceptions which result from conditions external to Duke rendering it incapable of normal operations (e.g."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * permissions issues, application code corruption, etc.)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DukeFatalException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * Generates a DukeFatalException with the specified message and an additional hint that Duke is being exited from."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @param msg Custom message explaining the problem which makes Duke unusable and suggesting actions to rectify it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public DukeFatalException(String msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       super(msg + \" Exiting Duke now...\"); "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public void killProgram(Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      ui.print(getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      System.exit(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeResetException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Exceptions which the user may reset his data in response to."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DukeResetException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Generates a DukeResetException with a message asking the user if he wants to reset his data. The catch handler"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * should have access to the Ui and Storage objects, ask the user if he wants to reset his data, and reset it if so."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public DukeResetException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       super(msg + \" You can back up the file, and/or reset it!\"  + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "               + \"Do you want to reset your Duke data now,\" + \" to continue using Duke? (y/n)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 16
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class DeadlineTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public DeadlineTask(String _name, LocalDateTime _by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super(_name, _by);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        type \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toString() throws DateTimeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"[\" + type + \"]\" + super.toString() + \" (by: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 17
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class EventTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public EventTask(String _name, LocalDateTime _at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super(_name, _at);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toString() throws DateTimeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"[\" + type + \"]\" + super.toString() + \" (at: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 17
    }
  },
  {
    "path": "src/main/java/duke/task/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.command.CMD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   private final File taskFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   private HashMap\u003cString, TSK\u003e taskMap \u003d new HashMap\u003cString, TSK\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * Constructs a new Storage object, with the task file at the specified path, and create HashMap for quick task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * lookup."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @param filePath Path at which to look for or create the data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @throws DukeFatalException If data file cannot be setup."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public Storage(String filePath) throws DukeFatalException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      taskFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      if (!taskFile.exists()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (!taskFile.createNewFile()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "               throw new IOException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         } catch (IOException excp) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeFatalException(\"Unable to setup data file, try checking your permissions?\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      for (TSK tsk : TSK.values()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         taskMap.put(tsk.toString(), tsk);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * Writes data to the task file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @param taskFileStr String to write to task file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @throws DukeFatalException If unable to write to the task file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public void writeTaskFile(String taskFileStr) throws DukeFatalException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      // TODO: figure out some way of editing that doesn\u0027t involve rewriting everything each time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      // Maybe some kind of diff file?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         FileWriter taskFileWr \u003d new FileWriter(taskFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         taskFileWr.write(taskFileStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         taskFileWr.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      } catch (IOException excp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         throw new DukeFatalException(\"Unable to write data! Some data may have been lost,\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * Parses a task file into an ArrayList of tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @return An ArrayList of the tasks extracted from the task file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @throws DukeResetException If any corruption or improperly formatted entries are encountered."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    * @throws DukeFatalException If file cannot be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   public ArrayList\u003cTask\u003e parseTaskFile() throws DukeResetException, DukeFatalException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      if (taskFile.length() \u003d\u003d 0) { // file is empty"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         return taskArrList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      //message for when data corruption is detected in the file"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      String corrupt \u003d \"Data file has been corrupted!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         Scanner taskScanner \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         while (taskScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            String taskLine \u003d taskScanner.nextLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            String[] taskArr \u003d taskLine.split(\"\\t\"); //extract data fields"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            for (int i \u003d 0; i \u003c taskArr.length; ++i) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aquohn"
        },
        "content": "               taskArr[i] \u003d taskArr[i].strip();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            Task currTask;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            TSK tsk \u003d taskMap.get(taskArr[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (tsk \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aquohn"
        },
        "content": "               throw new DukeResetException(corrupt);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            currTask \u003d tsk.getTask(taskArr);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            //check if task is done"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (taskArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aquohn"
        },
        "content": "               currTask.markDone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } else if (!taskArr[1].equals(\"0\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aquohn"
        },
        "content": "               throw new DukeResetException(corrupt);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskArrList.add(currTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         taskScanner.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      } catch (DukeException | DateTimeParseException | IndexOutOfBoundsException excp) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         throw new DukeResetException(corrupt);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      } catch (FileNotFoundException excp) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aquohn"
        },
        "content": "         throw new DukeFatalException(\"Unable to find data file, try opening Duke again?\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aquohn"
        },
        "content": "      return taskArrList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 112
    }
  },
  {
    "path": "src/main/java/duke/task/TSK.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Maintains the associations between task type characters and tasks (e.g. \"T\" -\u003e ToDoTask). For use in parsing data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * files."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public enum TSK {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    TODO(\"T\") {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       public Task getTask(String[] taskArr) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           return new ToDoTask(taskArr[2]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    EVENT(\"E\") {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Task getTask(String[] taskArr) throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            LocalDateTime datetime \u003d LocalDateTime.parse(taskArr[3], TimedTask.getDataFormatter());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new EventTask(taskArr[2], datetime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    DLINE(\"D\") {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        public Task getTask(String[] taskArr) throws DateTimeParseException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            LocalDateTime datetime \u003d LocalDateTime.parse(taskArr[3], TimedTask.getDataFormatter());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return new DeadlineTask(taskArr[2], datetime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private final String taskChar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates the TSK enum instance and associates the specified character with it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param _taskChar The character to be associated with the specified task type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    TSK (final String _taskChar) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        taskChar \u003d _taskChar;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return taskChar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates and sets up a new task from an array containing the data it is to have. The parameters for the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * constructor are extracted by this method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param taskArr An array containing the data for the task, format specific to each task type."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return A task loaded with the data from taskArr."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public abstract Task getTask(String[] taskArr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 52
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": " * Highest-level abstract class for Task objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    char type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    Task(String _name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        name \u003d _name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    void markDone() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"You already did that task!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            isDone \u003d true; "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void setName(String _name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        name \u003d _name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Formats the data about the task for display to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return Display-formatted task description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"] \" + name; //ternary operator returns tick or X"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Formats the data about the task to write to the data file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return Data-formatted (tab-separated) task description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return type + \"\\t\" + (isDone ? \"1\" : \"0\") + \"\\t\" + name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 55
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeFatalException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeResetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    // TSV files will have one entry per line, tabs disallowed in input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates a new TaskList, loading data from the Storage object provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param storage The Storage object pointing to the TSV file containing the data to load."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeResetException If file is corrupted or the data has been edited to be unreadable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeFatalException If unable to write data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public TaskList(Storage storage) throws DukeResetException, DukeFatalException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        taskArrList \u003d storage.parseTaskFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Creates a new, empty TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        taskArrList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Concatenates the string representation of each task, numbering them from first added to last, and returns this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * list as a String."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return String representation of all tasks, numbered chronologically."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If there are no tasks yet."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String listTasks() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int taskCount \u003d taskArrList.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"You don\u0027t have any tasks yet!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        StringBuilder taskListBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        for (int i \u003d 0; i \u003c taskCount; ++i) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            Task currTask \u003d taskArrList.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskListBuilder.append(System.lineSeparator()).append(i + 1).append(\".\").append(currTask.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return taskListBuilder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Concatenates the data representation of each task, for writing to the data file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return Concatenated data representations of all tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String getFileStr() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        StringBuilder fileStrBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        for (Task task : taskArrList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fileStrBuilder.append(task.toData()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return fileStrBuilder.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Marks a task as in the list as done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param idxStr The argument given by the user to identify the task to be marked done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return A success message with the String representation of the newly completed task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String markDone(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        Task currTask \u003d taskArrList.get(getTaskIdx(idxStr));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        currTask.markDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + \"  \" + currTask.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Adds a new task to the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param newTask The task to be added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return A success message, with the String representation of the newly added task, and a message"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * reporting the number of tasks in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String addTask(Task newTask) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String addStr \u003d \"Got it, I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + \"  \" + newTask.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        taskArrList.add(newTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return addStr + getTaskCountStr();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param idxStr The argument given by the user to identify the task to be deleted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return A success message with the String representation of the newly deleted task, and a message reporting the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * number of tasks in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If idxStr cannot be resolved to a valid task index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String deleteTask(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int idx \u003d getTaskIdx(idxStr);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String delString \u003d \"Noted. I\u0027ve removed this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + \"  \" + taskArrList.get(idx).toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        taskArrList.remove(idx);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return delString + System.lineSeparator() + getTaskCountStr();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Concatenates the descriptions of all tasks whose names contain the searchTerm."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param searchTerm String to search through the tasks for."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return Concatenated descriptions of matching tasks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String find(String searchTerm) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        StringBuilder searchBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        searchBuilder.append(\"Here are the tasks that contain \u0027\").append(searchTerm).append(\"\u0027:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        for (Task task : taskArrList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (task.getName().contains(searchTerm)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                searchBuilder.append(System.lineSeparator()).append(i).append(\".\").append(task.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (i \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return \"Can\u0027t find any matching tasks!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            return searchBuilder.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Parses a String to extract an integer, and checks if this integer is a valid index for the list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @param idxStr A String representing an integer, without leading/trailing spaces"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return An integer that is a valid index for an entry on the list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @throws DukeException If idxStr cannot be parsed, or the integer is not a valid index"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private int getTaskIdx(String idxStr) throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        if (idxStr.matches(\"^\\\\d+$\")) { //if second arg is an integer"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            int idx \u003d Integer.parseInt(idxStr) - 1;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            if (idx \u003c taskArrList.size()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                return idx;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                throw new DukeException(\"I don\u0027t have that entry in the list!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            throw new DukeException(\"You need to tell me what the number of the entry is!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * Reports the number of tasks currently in the list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     * @return A String reporting the current number of tasks."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "aquohn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   private String getTaskCountStr() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        int taskCount \u003d taskArrList.size();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String taskCountStr \u003d taskCount + ((taskCount \u003d\u003d 1) ? \" task\" : \" tasks\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"Now you have \" + taskCountStr + \" in the list.\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 155
    }
  },
  {
    "path": "src/main/java/duke/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private static final DateTimeFormatter PAT_DATETIME_DISPLAY \u003d DateTimeFormatter.ofPattern(\"eee, d MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    TimedTask(String _name, LocalDateTime _time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super(_name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        time \u003d _time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return super.toData() + \"\\t\" + time.format(PAT_DATETIME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    String getTime() throws DateTimeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return time.format(PAT_DATETIME_DISPLAY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void setTime(LocalDateTime _time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        time \u003d _time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public static DateTimeFormatter getDataFormatter() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return PAT_DATETIME;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "// --Commented out by Inspection START (03/09/2019 11:57):"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "//    public static DateTimeFormatter getDisplayFormatter() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "//        return PAT_DATETIME_DISPLAY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "// --Commented out by Inspection STOP (03/09/2019 11:57)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 41
    }
  },
  {
    "path": "src/main/java/duke/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public ToDoTask(String _name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        super(_name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        type \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        return \"[\" + type + \"]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 14
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "aquohn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void taskList_addTasksSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        ToDoTask todo \u003d new ToDoTask(\"JUnit tests\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        LocalDateTime t \u003d LocalDateTime.parse(\"12/09/2019 1400\", TimedTask.getDataFormatter());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        EventTask event \u003d new EventTask(\"tutorial\", t);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        DeadlineTask deadline \u003d new DeadlineTask(\"submission\", t);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            assertTrue(taskList.addTask(todo).contains(\"1 task\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            assertTrue(taskList.addTask(event).contains(\"2 tasks\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            assertTrue(taskList.addTask(deadline).contains(\"3 tasks\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Total number of tasks added is not 3!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][\\u2718] JUnit tests\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][\\u2718] tutorial (at: Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][\\u2718] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"No tasks in the list after adding!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Tasks not listed correctly!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void taskList_deleteTasksSuccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           taskList.deleteTask(\"1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           taskList.deleteTask(\"2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           assertEquals(System.lineSeparator() + \"1.[E][\\u2718] tutorial (at: Thu, 12 Sep 2019 2:00 PM)\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                   taskList.listTasks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       } catch (DukeException excp) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           fail(\"Unable to find added tasks!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "aquohn"
        },
        "content": "           fail(\"Tasks not deleted correctly!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "aquohn"
        },
        "content": "       }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void taskList_deleteTasksFailure() { //also tests for failure of other \"getIdx\" tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskList.deleteTask(\"100\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][\\u2718] JUnit tests\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + System.lineSeparator() + \"2.[E][\\u2718] tutorial (at: Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + System.lineSeparator() + \"3.[D][\\u2718] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Task list empty after invalid deletion!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Task list modified by invalid deletion!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void taskList_findTasksSuccess() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String expectedSearchResult \u003d \"Here are the tasks that contain \u0027u\u0027:\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + System.lineSeparator() + \"1.[E][\\u2718] tutorial (at: Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                + System.lineSeparator() + \"2.[D][\\u2718] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        assertEquals(expectedSearchResult, taskList.find(\"u\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void taskList_findTasksFailure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        String expectedSearchResult \u003d \"Can\u0027t find any matching tasks!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        assertEquals(expectedSearchResult, taskList.find(\"CS2113\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    public void taskList_markDoneSuccess() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskList.markDone(\"1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskList.markDone(\"2\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            taskList.markDone(\"3\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Not able to find tasks to mark as done!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "aquohn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            String expectedTaskListStr \u003d System.lineSeparator() + \"1.[T][\\u2713] JUnit tests\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    + System.lineSeparator() + \"2.[E][\\u2713] tutorial (at: Thu, 12 Sep 2019 2:00 PM)\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "aquohn"
        },
        "content": "                    + System.lineSeparator() + \"3.[D][\\u2713] submission (by: Thu, 12 Sep 2019 2:00 PM)\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            assertEquals(expectedTaskListStr, taskList.listTasks());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (DukeException excp) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Marking tasks as done somehow deleted all tasks in the list!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        } catch (AssertionError excp) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "aquohn"
        },
        "content": "            fail(\"Tasks not correctly marked as done!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "aquohn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "aquohn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 109
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "aquohn"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "aquohn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "aquohn": 2
    }
  }
]
