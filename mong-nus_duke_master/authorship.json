[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Deadline(String inputDescription, LocalDateTime inputBy) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(\u0027D\u0027, inputDescription);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.by \u003d inputBy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return \"[\" + super.getTypeOfTask() + \"][\" + super.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + super.getDescription() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String insertFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (super.getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return super.getTypeOfTask() + \" | 1 | \" + super.getDescription().length() + \" | \" +  super.getDescription() + \" | \" + formatter.format(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return super.getTypeOfTask() + \" | 0 | \" + super.getDescription().length() + \" | \" +  super.getDescription() + \" | \" + formatter.format(by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 30
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String line \u003d \"__________________________________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Task[] lists \u003d new Task[100];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        counter \u003d readFile(lists);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        Scanner reader \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        String inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        while (!inp.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                checkEmpty(inp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                String[] check \u003d inp.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (inp.equals(\"list\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    listAllItems(lists, counter, line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                } else if (check[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    makeDone(lists, counter, check, line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    writeFile(lists, counter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    addTask(lists, counter, check, line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    writeFile(lists, counter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } catch (DukeException errorMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(line);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(errorMessage.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } catch (NumberFormatException errorMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(line);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(\"\\u2369 OOPS!!! only number are accepted after done\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(line);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } catch(ArrayIndexOutOfBoundsException errorMessage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(line);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(\"\\u2369 OOPS!!! Input format Invalid\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(line);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                inp \u003d reader.nextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static void checkEmpty(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new DukeException(\"There is no command given\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static void listAllItems(Task[] listOfTasks, int arrCounter, String lineToPrint) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if(arrCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new DukeException(\"There is currently no task in the list\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int itemNo \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        for (int i \u003d 0; i \u003c arrCounter; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println( itemNo + \". \" + listOfTasks[i].toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            itemNo++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static void makeDone(Task[] listOfTasks, int arrCounter, String[] userInput, String lineToPrint) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int num \u003d Integer.parseInt(userInput[1]) - 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if ((num \u003c 0) || (num \u003e (arrCounter - 1))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new DukeException(\"Digit provided is out of range\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        listOfTasks[num].markAsDone();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + listOfTasks[num].toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static void addTask(Task[] listOfTasks, int arrCounter, String[] userInput, String lineToPrint) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (userInput[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (userInput[1].isBlank()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new DukeException(\"Description cannot be blank or space only\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            listOfTasks[arrCounter] \u003d new ToDo(userInput[1]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + listOfTasks[arrCounter].toString()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    + \"\\nNow you have \" + (arrCounter + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (userInput[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            userInput \u003d userInput[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (userInput[0].isBlank() || userInput[1].isBlank()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new DukeException(\"Description or date cannot be blank or space only\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (userInput[1].equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                LocalDateTime today \u003d LocalDateTime.now().withNano(0).withSecond(0).withHour(23).withMinute(59);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                LocalDateTime tomorrow \u003d today.plusDays(1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                listOfTasks[arrCounter] \u003d new Deadline(userInput[0], tomorrow);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + listOfTasks[arrCounter].toString()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + \"\\nNow you have \" + (arrCounter + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    LocalDateTime dateTime \u003d LocalDateTime.parse(userInput[1], formatter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    listOfTasks[arrCounter] \u003d new Deadline(userInput[0], dateTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + listOfTasks[arrCounter].toString()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            + \"\\nNow you have \" + (arrCounter + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    throw new DukeException(\"Invalid date. Please enter in the format of dd-MM-yyyy HH:mm (24HR) E.g. 21-01-2020 03:25, tomorrow is accepted as well\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else if (userInput[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            userInput \u003d userInput[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (userInput[0].isBlank() || userInput[1].isBlank()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                throw new DukeException(\"Description or date cannot be blank or space only\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            if (userInput[1].equals(\"tomorrow\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                LocalDateTime today \u003d LocalDateTime.now().withNano(0).withSecond(0).withHour(13).withMinute(30);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                LocalDateTime tomorrow \u003d today.plusDays(1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                listOfTasks[arrCounter] \u003d new Event(userInput[0], tomorrow);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + listOfTasks[arrCounter].toString()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        + \"\\nNow you have \" + (arrCounter + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    LocalDateTime dateTime \u003d LocalDateTime.parse(userInput[1], formatter);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    listOfTasks[arrCounter] \u003d new Event(userInput[0], dateTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + listOfTasks[arrCounter].toString()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            + \"\\nNow you have \" + (arrCounter + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    System.out.println(lineToPrint);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    throw new DukeException(\"Invalid date. Please enter in the format of dd-MM-yyyy HH:mm (24HR) E.g. 21-01-2020 03:25, tomorrow is accepted as well\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static int readFile(Task[] listOfTasks) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"Reading Task List ... \\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        File file \u003d new File(\"data\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"Folder does not exist. Creating folder data now.\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            file.mkdir();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        file \u003d new File(\"data\\\\duke.txt\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                String[] data \u003d scanner.nextLine().split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                if (data[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    if (data[0].equals(\"1\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        data \u003d data[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        listOfTasks[count] \u003d new ToDo(data[1]);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        listOfTasks[count].setDone();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        data \u003d data[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        listOfTasks[count] \u003d new ToDo(data[1]);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                } else if (data[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    if (data[0].equals(\"1\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        int lengthOfDescription \u003d Integer.parseInt(data[0]);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        String describe \u003d data[1].substring(0, lengthOfDescription);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            LocalDateTime dateTime \u003d LocalDateTime.parse(data[1].substring(lengthOfDescription+3), formatter);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            listOfTasks[count] \u003d new Deadline(describe, dateTime);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            listOfTasks[count].setDone();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            System.out.println(\"Reading Fail at item No. \" + count + \"\\n\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            return count;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        int lengthOfDescription \u003d Integer.parseInt(data[0]);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        String describe \u003d data[1].substring(0, lengthOfDescription);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            LocalDateTime dateTime \u003d LocalDateTime.parse(data[1].substring(lengthOfDescription+3), formatter);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            listOfTasks[count] \u003d new Deadline(describe, dateTime);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            System.out.println(\"Reading Fail at item No. \" + count + \"\\n\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            return count;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                } else if (data[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    if (data[0].equals(\"1\")) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        int lengthOfDescription \u003d Integer.parseInt(data[0]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        String describe \u003d data[1].substring(0, lengthOfDescription);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            LocalDateTime dateTime \u003d LocalDateTime.parse(data[1].substring(lengthOfDescription+3), formatter);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            listOfTasks[count] \u003d new Event(describe, dateTime);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            listOfTasks[count].setDone();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            System.out.println(\"Reading Fail at item No. \" + count + \"\\n\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            return count;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        data\u003ddata[1].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        int lengthOfDescription \u003d Integer.parseInt(data[0]);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        String describe \u003d data[1].substring(0, lengthOfDescription);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            LocalDateTime dateTime \u003d LocalDateTime.parse(data[1].substring(lengthOfDescription+3), formatter);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            listOfTasks[count] \u003d new Event(describe, dateTime);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            System.out.println(\"Reading Fail at item No. \" + count + \"\\n\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                            return count;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch(FileNotFoundException error) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"There is no file to read. File will be created when there is new records.\\n\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        System.out.println(\"Read from file completed\\n\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public static void writeFile(Task[] listOfTasks, int count) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        File file \u003d new File (\"data\\\\duke.txt\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            PrintWriter output \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                output.println(listOfTasks[i].insertFile());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            output.close();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } catch(IOException error) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            System.out.println(\"There is a output error\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 339,
      "-": 10
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(\"\\u2369 OOPS!!! \" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Event(String inputDescription, LocalDateTime inputAt) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(\u0027E\u0027, inputDescription);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.at \u003d inputAt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return \"[\" + super.getTypeOfTask() + \"][\" + super.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "                + super.getDescription() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String insertFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (super.getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return super.getTypeOfTask() + \" | 1 | \" + super.getDescription().length() + \" | \" +  super.getDescription() + \" | \" + formatter.format(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return super.getTypeOfTask() + \" | 0 | \" + super.getDescription().length() + \" | \" +  super.getDescription() + \" | \" + formatter.format(at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 30
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    protected char typeOfTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public Task(char type, String userDescription) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.typeOfTask \u003d type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.description \u003d userDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return a tick or a cross symbol"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public char getTypeOfTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return typeOfTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public abstract String insertFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 44
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public ToDo(String inputDescription) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        super(\u0027T\u0027, inputDescription);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        return \"[\" + super.getTypeOfTask() + \"][\" + super.getStatusIcon() + \"] \" + super.getDescription();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    public String insertFile() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        if (super.getIsDone() \u003d\u003d true) { //length of description to ensure if regex character is entered, code can still run"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return super.getTypeOfTask() + \" | 1 | \" + super.getDescription().length() + \" | \" + super.getDescription();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "            return super.getTypeOfTask() + \" | 0 | \" + super.getDescription().length() + \" | \" +  super.getDescription();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mong-nus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mong-nus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mong-nus": 23
    }
  }
]
