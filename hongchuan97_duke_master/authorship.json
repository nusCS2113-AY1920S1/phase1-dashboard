[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    systemProperty \u0027file.encoding\u0027, \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 23,
      "Jeffry Lum": 14
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/AllTask/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "package AllTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public Deadline(String description, boolean done ,  String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String saveFormat() {return \"D | \" + super.isDone + \" | \" + super.description + \" | \" + this.by;}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 17
    }
  },
  {
    "path": "src/main/java/AllTask/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "package AllTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public Event(String description , boolean done , String date , String time){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        super(description , done);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date + \" \" + time + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String saveFormat() {return \"E | \" + super.isDone + \" | \" + super.description + \" | \" + this.date + \" | \" + this.time;}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 19
    }
  },
  {
    "path": "src/main/java/AllTask/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "package AllTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     * AllTask.Task constructor"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     * @param done The state of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public Task(String description, boolean done) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public void Done(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 31
    }
  },
  {
    "path": "src/main/java/AllTask/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "package AllTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public ToDos(String description , boolean done){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public String saveFormat() {return \"T | \" + super.isDone + \" | \" + super.description;}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 12
    }
  },
  {
    "path": "src/main/java/Data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "package Data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import AllTask.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import AllTask.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import AllTask.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import AllTask.ToDos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    private static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    private static String filePath \u003d \".\\\\src\\\\main\\\\java\\\\Data\\\\duke.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void loadTask(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            File fw \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            Scanner filereader \u003d new Scanner(fw);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            while (filereader.hasNext()){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                parsefile(filereader.nextLine());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }catch(Exception e){System.out.println(e);}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    private static void parsefile( String line) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        String[] component \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        switch (component[0]){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"T\" :"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                Task todo \u003d new ToDos(component[2] , \"true\".equals(component[1]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                list.add(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"D\" :"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                Task deadline \u003d new Deadline(component[2] , \"true\".equals(component[1]) , component[3]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                list.add(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"E\" :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                Task event \u003d new Event(component[2] , \"true\".equals(component[1]) , component[3] ,component[4]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void saveFile() throws DukeException{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    line \u003d ((Deadline) t).saveFormat();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } else if (t instanceof ToDos) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    line \u003d ((ToDos) t).saveFormat();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    line \u003d ((Event) t).saveFormat();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                fileWriter.write(line + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            throw new DukeException(\"File not found: \" + e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void showList(){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t \" + (i + 1) + \".\" + list.get(i).toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void doneTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            Task buff \u003d list.get(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            buff.Done();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t  \" + buff.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            throw new DukeException(\"\\t \\u2639 OOPS!!! The index you entered is not valid.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void addTask(Task task){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(\"\\t Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(\"\\t \" + task.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(\"\\t Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void delTask(int index) throws DukeException{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            Task buff \u003d list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t  \" + buff.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            list.remove(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            throw new DukeException(\"\\t \\u2639 OOPS!!! The index you entered is not valid.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 104
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import Data.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     * Main class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     * @param args empty for now."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        String lines \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(\"\\t Hello! I\u0027m Duke \\n\\t What can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        System.out.println(lines);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        TaskList.loadTask();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        Scanner Input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        String command \u003d Input.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        while (!\"bye\".equals(command)){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(lines);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            StringTokenizer split \u003d new StringTokenizer(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                parser.commands(split);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            } catch (DukeException err){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                System.out.println(err.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(lines);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            command \u003d Input.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(lines);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            System.out.println(lines);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                TaskList.saveFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            } catch (DukeException e){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 43,
      "-": 10
    }
  },
  {
    "path": "src/main/java/Exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public DukeException( String err){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 7
    }
  },
  {
    "path": "src/main/java/parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import AllTask.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import Data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "public class parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static void commands(StringTokenizer msg) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        switch (msg.nextToken()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                TaskList.showList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    TaskList.doneTask(Integer.parseInt(msg.nextToken()) - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw new DukeException(\"\\t \\u2639 OOPS!!! Please enter the index of which task to be done.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String description \u003d msg.nextToken();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    while (msg.hasMoreTokens()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                        description +\u003d \" \" + msg.nextToken();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    Task toDos \u003d new ToDos(description , false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    TaskList.addTask(toDos);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw new DukeException(\"\\t \\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String holder \u003d msg.nextToken();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String check \u003d msg.nextToken();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    while (!\"/by\".equals(check)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                        holder +\u003d \" \" + check;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                        check \u003d msg.nextToken();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String by \u003d parseDate(msg.nextToken());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    Task deadline \u003d new Deadline(holder, false , by);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    TaskList.addTask(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw new DukeException(\"\\t \\u2639 OOPS!!! Error in deadline input.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String eventholder \u003d msg.nextToken();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String check2 \u003d msg.nextToken();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    while (!\"/at\".equals(check2)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                        eventholder +\u003d \" \" + check2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                        check2 \u003d msg.nextToken();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String date \u003d parseDate(msg.nextToken());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    String time \u003d parsetime(msg.nextToken());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    Task event \u003d new Event(eventholder, false , date, time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    TaskList.addTask(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw new DukeException(\"\\t \\u2639 OOPS!!! Error in event input.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            case \"delete\" :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    TaskList.delTask(Integer.parseInt(msg.nextToken()) - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw new DukeException(\"\\t \\u2639 OOPS!!! Please enter the index of which task to be deleted.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "                throw new DukeException(\"\\t \\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    private static String parsetime(String time) throws DukeException{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            SimpleDateFormat Format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            Date dateForm \u003d Format.parse(time);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            SimpleDateFormat newFormat \u003d new SimpleDateFormat(\"Kaa\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            return newFormat.format(dateForm);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        } catch (ParseException e){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    public static String parseDate(String date) throws DukeException{"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            SimpleDateFormat Format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            Date dateForm \u003d Format.parse(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            SimpleDateFormat newFormat \u003d new SimpleDateFormat(\"MMM dd\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            return newFormat.format(dateForm);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        } catch (ParseException e){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hong Chuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hong Chuan": 111
    }
  }
]
