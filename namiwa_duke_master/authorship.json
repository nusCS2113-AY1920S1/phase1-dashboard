[
  {
    "path": "src/main/java/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String dateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Deadline(String... input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDateAndTime(input[input.length - 1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setDateAndTime(String dateAndTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (dateAndTime.contains(\"/\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            setStringToDate(dateAndTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setStringToDate(String dateAndTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        LocalDate datePart \u003d LocalDate.parse(split[0], DateTimeFormatter.ofPattern(\"d/MM/yyyy\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        LocalTime timePart \u003d LocalTime.parse(split[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dateTime \u003d  LocalDateTime.of(datePart, timePart);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String writingFile() { return \"D\" + \"|\" + super.writingFile() + \"|\" + dateAndTime; }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + dateAndTime + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 36
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void readStoredData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "       if (store.getFileExits()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "           taskList \u003d store.readData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "       }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void helloMsg() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String LINE \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                LINE +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                LINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void tryAgainCommand() { System.out.println(\"Please input the right command!\"); }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void tryAgainCommandEmpty() { System.out.println(\"Adding command cannot be empty!\"); }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void tryAgainNumber() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Please input a number!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void tryAgainIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Please check your index or list size!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void addedTaskMsg() { System.out.println(\"Got it. I\u0027ve added this task:\");}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void currentTaskListSizeMsg() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \"Now you have \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                taskList.size() +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                \" tasks in the list.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void doneTaskMsg() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void lastTaskAddedMessage() { System.out.println(taskList.get(taskList.size() - 1)); }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void checkValidDoneIndex(String input) throws NumberFormatException, IllegalAccessError {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] hold \u003d input.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int test \u003d hold.length;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int index \u003d Integer.parseInt(hold[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (test \u003e 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if(index \u003e taskList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new IllegalAccessError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if(index  \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new IllegalAccessError();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            setDoneTask(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void deleteMsg(int index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(taskList.get(index - 1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        currentTaskListSizeMsg();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setDoneTask(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        taskList.get(index - 1).setTaskDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        doneTaskMsg();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(taskList.get(index - 1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void displayAllTasks() throws IllegalAccessError {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new IllegalAccessError();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(count + \". \" + temp);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String[] testRegex(String inputs) throws DukeEmptyCommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (inputs.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!inputs.contains(\"/by\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new DukeEmptyCommandException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (inputs.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!inputs.contains(\"/at\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new DukeEmptyCommandException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (inputs.equals(\"todo\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new DukeEmptyCommandException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] res \u003d inputs.split(\"/\", 2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (res.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new DukeEmptyCommandException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void parseFind(String input) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Task hold : taskList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (hold.getTask().contains(split[split.length - 1])) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                temp.add(hold);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Task hold : temp) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.out.println(count + \". \" + hold);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void parseTask(String input) throws DukeCommandException, DukeEmptyCommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (input.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] temp \u003d input.split(\"todo \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String [] split \u003d testRegex(temp[temp.length - 1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!temp[0].equals(\"\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new DukeCommandException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            taskList.add(new Todo(split));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] temp \u003d input.split(\"event \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String [] split \u003d testRegex(temp[temp.length - 1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!temp[0].equals(\"\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new DukeCommandException();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d split[split.length - 1].trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d split[split.length - 1].replaceFirst(\"at \", \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            taskList.add(new Events(split));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else if (input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] temp \u003d input.split(\"deadline \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String [] split \u003d testRegex(temp[temp.length - 1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (!temp[0].equals(\"\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                throw new DukeCommandException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d split[split.length - 1].trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            split[split.length - 1] \u003d split[split.length - 1].replaceFirst(\"by \", \"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            taskList.add(new Deadline(split));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new DukeCommandException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        addedTaskMsg();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeData(taskList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        lastTaskAddedMessage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        currentTaskListSizeMsg();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void deleteTask(String input) throws IllegalAccessException, DukeEmptyCommandException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        int res \u003d -1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (split[split.length - 1].equals(\"\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new DukeEmptyCommandException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            res \u003d Integer.parseInt(split[split.length - 1]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            tryAgainNumber();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (res \u003c 1 || res \u003e taskList.size()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            throw new IllegalAccessException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        deleteMsg(res);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void loopMsg() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    displayAllTasks();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (IllegalAccessError e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainIndex();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                parseFind(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    checkValidDoneIndex(input);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainNumber();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (IllegalAccessError e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainIndex();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }  else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                   deleteTask(input);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainIndex();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (DukeEmptyCommandException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainCommandEmpty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    parseTask(input);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (DukeCommandException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainCommand();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                } catch (DukeEmptyCommandException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    tryAgainCommandEmpty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void goodbyeMsg() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        store.writeData(taskList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        closeScan();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void closeScan() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        scan.close();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        duke.readStoredData();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        duke.helloMsg();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        duke.loopMsg();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        duke.goodbyeMsg();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 236,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeCommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class DukeCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 3
    }
  },
  {
    "path": "src/main/java/DukeEmptyCommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class DukeEmptyCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 3
    }
  },
  {
    "path": "src/main/java/Events.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String dateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Events(String... input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        setDateAndTime(input[input.length - 1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setDateAndTime(String dateAndTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        if (dateAndTime.contains(\"/\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            setStringToDate(dateAndTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private void setStringToDate(String dateAndTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String[] split \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        LocalDate datePart \u003d LocalDate.parse(split[0], DateTimeFormatter.ofPattern(\"d/MM/yyyy\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        LocalTime timePart \u003d LocalTime.parse(split[1], DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        dateTime \u003d  LocalDateTime.of(datePart, timePart);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"E\" + \"|\" + super.writingFile() + \"|\" + dateAndTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + dateAndTime + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 39
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private boolean fileExits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Storage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        path \u003d Paths.get(\"DukeData.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        fileExits \u003d Files.isRegularFile(path);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    boolean getFileExits() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return fileExits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void writeData(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        List\u003cString\u003e store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (Task temp : taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            store.add(temp.writingFile());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            Files.write(path, store, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            System.err.format(\"IOException: %s%n\", e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public List\u003cTask\u003e readData() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     List\u003cString\u003e lines \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "namiwa"
        },
        "content": "         lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "namiwa"
        },
        "content": "         e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "namiwa"
        },
        "content": "     }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        for (String line:lines) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            String[] hold \u003d line.split(Pattern.quote(\"|\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            switch (hold[0]) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    Events t_events \u003d new Events(hold[1], hold[3]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        t_events.setTaskDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    list.add(t_events);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    Deadline t_deadline \u003d new Deadline(hold[1], hold[3]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        t_deadline.setTaskDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    list.add(t_deadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    Todo t_todo \u003d new Todo(hold[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    if (hold[2].equals(\"1\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                        t_todo.setTaskDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    list.add(t_todo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "namiwa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "namiwa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 75
    }
  },
  {
    "path": "src/main/java/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    private Boolean done;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    void setTaskDone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return task + \"|\" + (getDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        String completed \u003d (done) ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return completed + task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "namiwa"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "namiwa": 32
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "namiwa"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    Todo(String... input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        super(input[0]);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String writingFile() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"T\" + \"|\" + super.writingFile();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "namiwa"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "namiwa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "namiwa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "namiwa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "namiwa": 16
    }
  }
]
