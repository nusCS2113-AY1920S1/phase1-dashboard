[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * The Duke program implements a CLI application that is"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * an assistant that supports to-do lists, events and deadlines."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Data is saved across sessions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * @author Shaun"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        new UI();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 10,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Exceptions.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class handles the logic of the commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * and decide which function to call"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private TaskList l;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * Parser class has a constructor that takes in"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * a TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param l is the list of task that gets parsed in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public DukeParser(TaskList l) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.l \u003d l;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function takes in a String Command and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * determines what command is given before executing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * the respective functions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param Command is the raw command that is inputted by the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void Logic(String Command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (Command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.equals(\"list\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                l.listTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] data \u003d Command.split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (data.length \u003c 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.markDone(Integer.parseInt(data[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] query \u003d Command.split(\"todo \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (query.length \u003c 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidToDoException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    Task temp \u003d new Todo(query[1], false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.addTask(temp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] parts \u003d Command.substring(8).split(\"/by \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (parts[0].length() \u003c 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else if (parts.length \u003c 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    Task temp \u003d new Deadline(parts[0], parts[1], false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.addTask(temp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.contains(\"event\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] parts \u003d Command.substring(6).split(\"/at \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (parts[0].length() \u003c 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidEventException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else if (parts.length \u003c 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    Task temp \u003d new Event(parts[0], parts[1], false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.addTask(temp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] data \u003d Command.split(\" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (data.length \u003c 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.deleteTask(Integer.parseInt(data[1]) - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else if (Command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] query \u003d Command.split(\"find \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (query.length \u003c 2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    throw new InvalidFindException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.findTask(query[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"    \\u2639 OOPS!! Please input a valid number\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 98
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Is an exception class for invalid commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns an error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"    \\u2639 OOPS!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 16
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is an exception for invalid date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns an error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the message to be printed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"     \\u2639 OOPS!! Please enter a valid date\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 16
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is an exception for Invalid Deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidDeadlineException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns an error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return the error message to be printed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"    \\u2639 OOPS!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 16
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is an exception for an invalid event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidEventException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function prints an error message for this exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the error message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"    \\u2639 OOPS!! The description of a event cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 17
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is an exception for an invalid find command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidFindException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns an error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return returns a string of the error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"    \\u2639 OOPS!! Please specify what you want to find.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 16
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is an excepton for an invalid task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidTaskIndexException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns an error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the error message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"    \\u2639 OOPS!! Please specify what you did.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 16
    }
  },
  {
    "path": "src/main/java/Exceptions/InvalidToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is an exception of an invalid to-do task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class InvalidToDoException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns a string of the error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the error"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"    \\u2639 OOPS!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 16
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This classes handles the logic of storing all the data"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * into a txt file. Data is stored in this format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * {Task Type}~{Status}~{Description}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    List\u003cTask\u003e l;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * Constructor function for this class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param l is the task list that gets parsed in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Storage(List\u003cTask\u003e l) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.l \u003d l;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.loadData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function opens the txt file and unpacks the data from the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * txt file and loads it into the program. If the file does not exist,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * it creates it for the program to store data there."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void loadData() { //if no file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            File file \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                String[] w \u003d line.split(\"~\"); // | counts as well"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                if (w[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    String description \u003d w[2];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    boolean isDone \u003d (w[1].equals(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.add(new Todo(description, isDone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else if (w[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    String[] parts \u003d w[2].split(\"/at \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    boolean isDone \u003d (w[1].equals(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.add(new Event(parts[0], parts[1], isDone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                } else if (w[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    String[] parts \u003d w[2].split(\"/by \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    boolean isDone \u003d (w[1].equals(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                    l.add(new Deadline(parts[0], parts[1], isDone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function updates the txt file data storage with the latest"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * list in the program. It rewrites the text file with the latest"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void updateFile() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            File file \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            for (int i \u003d 0; i \u003c l.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                bw.write(l.get(i).toStore());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 85
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class represents the data structure of the tasks added to duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Uses an ArrayList to store the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    List\u003cTask\u003e l \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    Storage f \u003d new Storage(l);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function adds a task into the ArrayList of tasks, calls the function to update"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * the txt file and prints out the relevant reply."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param t is of task type of the task to add"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        l.add(t);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        f.updateFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"      \" + t.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Now you have \" + l.size() + ((l.size() \u003d\u003d 1) ? \" task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This program takes in an index and marks the corresponding task as done,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * it then updates the file and prints out the relevant reply"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param index is the index of the task that is completed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        l.get(index - 1).markDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        f.updateFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"      \" + l.get(index - 1).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function gets the length of the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return int of the size of the tasklist"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public int getLen() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return l.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function prints out all the tasks in the list. Calls the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * toString() of each task to print out the relevant details"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d l.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"    \" + i + \".\" + l.get(i - 1).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function takes in an index and deletes the respective task from the list,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * updates the storage and prints out the relevant reply."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"      \" + l.get(index).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        l.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Now you have \" + l.size() + ((l.size() \u003d\u003d 1) ? \" task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        f.updateFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function takes in a String query and searches through the tasklist and prints out the matching"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param query"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void findTask(String query) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        boolean haveMatch \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"    Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        for (int i \u003d 0; i \u003c l.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            if (l.get(i).toString().contains(query)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                System.out.println(\"    \" + index + \".\" + l.get(i).toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                haveMatch \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if (!haveMatch) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            System.out.println(\"    Sorry... there are no tasks matching your query\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 95
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Deadline is the subclass of task representing a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * deadline task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * The constructor of deadline, takes in the description and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * time that it is to be done by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param description string of the description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param by          string of the time to be done by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param isDone      boolean of the status of the product"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        storeDate(by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function takes in the string of the date and converts it into"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * a date class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param by the date that the task is done by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void storeDate(String by) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Date convertedDate \u003d new Date();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            date \u003d df.parse(by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        date \u003d convertedDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function converts the Deadline task into the format for storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string in the format to store in the txt file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"D~\" + (super.getIsDone() ? \"1~\" : \"0~\") + super.getDescription() + \"/by \" + by;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function prints out this task to the command line."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @returna a string to be printed out in the command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"[D]\" + super.getStatusIcon() + super.getDescription() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 65
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Event is a subclass of Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * and represents events"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This is the constructor of Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param description a string of the event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param at          a string denoting the time of the event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param isDone      is the boolean determining the status of the event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        storeDate(at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function takes in the date in string format and converts it into"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * a date class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param by is the string that this deadline is done by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void storeDate(String by) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Date convertedDate \u003d new Date();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            date \u003d df.parse(by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        date \u003d convertedDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function converts the Event task into the format for storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string in the format for storage in a txt file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"E~\" + (super.getIsDone() ? \"1~\" : \"0~\") + super.getDescription() + \"/at \" + at;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function prints out this Event task into the command line"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string in the format to be printed out"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"[E]\" + super.getStatusIcon() + super.getDescription() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 65
    }
  },
  {
    "path": "src/main/java/Tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * This class is the superclass for all the different tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This is the constructor for the task class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param description is the description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @param isDone      is the boolean variable that determines the status"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns the icon reflecting the status of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return (\"[\" + (isDone ? \"\\u2713\" : \"\\u2717\") + \"] \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns the description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return the string, description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns the status of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a boolean isDone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function marks the task as done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function returns the state of the task for storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the right format to store"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return isDone ? \"1|\" : \"0|\" + description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 62
    }
  },
  {
    "path": "src/main/java/Tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * To-do class extends task and overrides the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * toString() function to something specific to to-do"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function converts the details of the class to the format to be"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * stored in the txt file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string of the right format to be stored"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toStore() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"T~\" + (super.getIsDone() ? \"1~\" : \"0~\") + super.getDescription();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function prints out the task onto the command line."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * @return a string to be printed out in the console"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        return \"[T]\" + super.getStatusIcon() + super.getDescription();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 32
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * Class that deals with the printing of the welcome message"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": " * and the interaction with the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private DukeParser P;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    private TaskList l;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        DukeWelcome();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Interaction();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function prints out the DUKE welcome message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void DukeWelcome() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * This function handles the interaction with the user and instantiates"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     * the list of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void Interaction() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        DukeParser P \u003d new DukeParser(l);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            String s \u003d in.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            P.Logic(s);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 42
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaun97"
        },
        "content": "class dummyTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void parserTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        DukeParser p \u003d new DukeParser(l);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        p.Logic(\"todo now\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if(l.getLen() \u003e 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            assertEquals(2,2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    public void deleteTaskTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        TaskList l \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        DukeParser p \u003d new DukeParser(l);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        p.Logic(\"todo now\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        l.deleteTask(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        if(l.getLen() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaun97"
        },
        "content": "            assertEquals(2,2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaun97": 33
    }
  }
]
