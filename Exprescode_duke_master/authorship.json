[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    modules\u003d [\u0027javafx.controls\u0027,\u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    //mainClassName \u003d \"seedu.duk.Duke\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "shadowJar{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 33,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    protected Calendar by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Deadline(String desc, Calendar by){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd MMMMM yyyy, hh:mm aaa\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + sdf.format(by.getTime()) + \")\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 16
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private Calendar by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public DeadlineCommand(String desc, Calendar by){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(by.compareTo(Calendar.getInstance()) \u003c 1){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"Date time has already expired.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        Deadline new_deadline \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        tasks.add(new_deadline);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.show(\"Got it. I\u0027ve added this task:\\n  \" + new_deadline.toString() + \"\\nNow you have \" + tasks.len() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 28
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public DeleteCommand(int index){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String task_str \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(task_str.length() \u003c 1){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"Delete argument is not a valid entry from list command.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.show(\"Noted. I\u0027ve removed this task:\\n  \" + task_str + \"\\nNow you have \" + tasks.len() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 21
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public DoneCommand(int index){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String task_str \u003d tasks.tick(index);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(task_str.length() \u003c 1){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"Done argument is not a valid entry from list command.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.show(\"Nice! I\u0027ve marked this task as done:\\n \" + task_str);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 21
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private static final String BAR \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        storage\u003d new Storage(filePath);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        while(!isExit){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            } catch (DukeEmptyException | DukeFormatException | DukeBoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\JH\\\\Documents\\\\GitHub\\\\duke\\\\data\\\\duke.txt\").run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void print_console(String msg) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        System.out.println(BAR + \"\\n     \" + msg.replaceAll(\"\\n\", \"\\n     \") + \"\\n\" + BAR + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void print_init_msg() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        print_console(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void print_exit_msg() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        print_console(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static String format_add_task(String added_task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        return \"Got it. I\u0027ve added this task:\\n  \" + added_task + \"\\nNow you have \" + tasks.len() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static String format_error(String msg) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        return \"☹ OOPS!!! \" + msg;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_list() throws DukeEmptyException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(tasks.len() \u003c 1){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Task list is empty! Cannot list an empty list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        ui.show(\"Here are the tasks in your list:\\n\" + tasks.list());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_done(String option) throws DukeEmptyException,DukeFormatException,DukeBoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        int index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(option.length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Arguemnt cannot be empty!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            index \u003d Integer.parseInt(option);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeFormatException(\"Done argument is not numeric.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String task_str \u003d tasks.tick(--index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(task_str.length() \u003c 1){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeBoundException(\"Option is not within list options.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        ui.show(\"Nice! I\u0027ve marked this task as done:\\n \" + task_str);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        storage.store(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_delete(String option) throws DukeEmptyException,DukeFormatException,DukeBoundException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        int index;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(option.length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Arguemnt cannot be empty!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            index \u003d Integer.parseInt(option);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeFormatException(\"Delete argument is not numeric.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String task_str \u003d tasks.remove(--index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(task_str.length() \u003c 1){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeBoundException(\"Option is not within list options.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        ui.show(\"Noted. I\u0027ve removed this task:\\n  \" + task_str + \"\\nNow you have \" + tasks.len() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        storage.store(tasks);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_find(String search_str) throws DukeEmptyException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(tasks.len() \u003c 1){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Task list is empty! Cannot list an empty list.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String result \u003d tasks.find(search_str);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(result.length() \u003e 0){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            ui.show(\"Here are the matching tasks in your list:\\n\" + result);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            ui.show(\"I\u0027ve search everywhere but there is not matching tasks.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_todo(String desc) throws DukeEmptyException{"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(desc.isEmpty() || desc.isBlank()){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Todo description cannot be empty\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Todo new_todo \u003d new Todo(desc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        tasks.add(new_todo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        ui.show(format_add_task(new_todo.toString()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        storage.store(tasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_deadline(String args) throws DukeEmptyException, DukeFormatException, DukeBoundException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(args.isEmpty() || args.isBlank()){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Deadline description cannot be empty\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String[] args_parts \u003d args.split(\" /by \", 2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(args_parts.length \u003c 2){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Deadline date time cannot be empty.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        sdf.setLenient(false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        try{"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            cal.setTime(sdf.parse(args_parts[1]));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        } catch (ParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeFormatException(\"Wrong date time format.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(cal.compareTo(Calendar.getInstance()) \u003c 1){"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeBoundException(\"Date time has already expired.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Deadline new_deadline \u003d new Deadline(args_parts[0], cal);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        tasks.add(new_deadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        ui.show(format_add_task(new_deadline.toString()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        storage.store(tasks);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    private static void cmd_event(String args) throws DukeEmptyException, DukeFormatException, DukeBoundException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(args.isEmpty() || args.isBlank()){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Event description cannot be empty.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String[] args_parts \u003d args.split(\" /at \", 2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(args_parts.length \u003c 2) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeEmptyException(\"Event data/time cannot be empty.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Matcher end_date_matcher \u003d Pattern.compile(\"^(\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4}) ?(\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4})?$\").matcher(args_parts[1]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(!end_date_matcher.find()){"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeFormatException(\"Wrong date time format.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String start_str \u003d end_date_matcher.group(1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        String end_str \u003d end_date_matcher.group(2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Calendar start_cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        sdf.setLenient(false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        try{"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            start_cal.setTime(sdf.parse(start_str));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        } catch (ParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeFormatException(\"Wrong start date time format.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(start_cal.compareTo(Calendar.getInstance()) \u003c 1){"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            throw new DukeBoundException(\"Start date time expired.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Event new_event;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        if(end_str !\u003d null){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            Calendar end_cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            try{"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//                end_cal.setTime(sdf.parse(end_str));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            } catch (ParseException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//                throw new DukeFormatException(\"Wrong end date time format.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            if(end_cal.compareTo(start_cal) \u003c 1){"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//                throw new DukeBoundException(\"End date time expired.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            new_event \u003d new Event(args_parts[0], start_cal, end_cal);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }else{"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//            new_event \u003d new Event(args_parts[0], start_cal);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        tasks.add(new_event);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        ui.show(format_add_task(new_event.toString()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        storage.store(tasks);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Label helloWorld \u003d new Label(\"Hello World!\"); //Creating a new Label control."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        helloWorld.setFont(new Font(\"Arial\", 50));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Scene scene \u003d new Scene(helloWorld); //Setting the scene to be our label."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        stage.setScene(scene); //Settings the stage to show our screen."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        stage.show(); //Render the stage."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Stage stage2 \u003d new Stage();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        stage2.setScene(scene);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        stage2.show();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 201,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DukeBoundException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public DukeBoundException(String msg){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 5
    }
  },
  {
    "path": "src/main/java/DukeEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DukeEmptyException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public DukeEmptyException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 5
    }
  },
  {
    "path": "src/main/java/DukeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DukeFormatException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public DukeFormatException(String msg){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    protected Calendar start, end;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Event(String desc, Calendar start){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        end \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Event(String desc, Calendar start, Calendar end){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd MMMMM yyyy, hh:mm aaa\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(end !\u003d null){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return \"[E]\" + super.toString() + \" (from: \" + sdf.format(start.getTime()) + \" to: \" + sdf.format(end.getTime()) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + sdf.format(start.getTime()) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 26
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private Calendar start, end;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public EventCommand(String desc, Calendar start) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.end \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public EventCommand(String desc, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if (start.compareTo(Calendar.getInstance()) \u003c 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"Event start date time argument must be earlier than current date time.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if (end.compareTo(start) \u003c 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"Event end date time argument must be earlier than start date time argument.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        Event new_event \u003d new Event(desc, start, end);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        tasks.add(new_event);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.show(\"Got it. I\u0027ve added this task:\\n  \" + new_event.toString() + \"\\nNow you have \" + tasks.len() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 37
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public ExitCommand(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 14
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public FindCommand(String query){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(tasks.len() \u003c 1){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"Find command cannot operate on an empty task list.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String result \u003d tasks.find(query);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(result.length() \u003e 0){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            ui.show(\"Here are the matching tasks in your list:\\n\" + result);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            ui.show(\"I\u0027ve search everywhere but there is not matching tasks.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 24
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public ListCommand(){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(tasks.len() \u003c 1){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            throw new DukeBoundException(\"List command cannot operate on an empty task list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.show(\"Here are the tasks in your list:\\n\" + tasks.list());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 17
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import static java.util.Arrays.copyOf;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public static Command parse(String input) throws DukeFormatException, DukeEmptyException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String[] input_parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(input_parts.length \u003c 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            input_parts \u003d copyOf(input_parts, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            input_parts[1] \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            input_parts[1] \u003d input_parts[1].replaceAll(\"\\\\s+\", \" \").trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String[] args;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyy HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        sdf.setLenient(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        switch(input_parts[0]){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(input_parts[1].length() \u003c 1){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeEmptyException(\"Delete arguemnt cannot be empty!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    return new DeleteCommand(Integer.parseInt(input_parts[1]) - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Delete argument must be numeric.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(input_parts[1].length() \u003c 1){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeEmptyException(\"Done arguemnt cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    return new DoneCommand(Integer.parseInt(input_parts[1]) - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Done argument must be numeric.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                return new FindCommand(input_parts[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(input_parts[1].isEmpty() || input_parts[1].isBlank()){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeEmptyException(\"Todo description cannot be empty\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                return new TodoCommand(input_parts[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                args \u003d input_parts[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(args.length \u003c 2){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Invalid event command!\\nPlease use the following event command format:\\nevent \u003cDescription\u003e /at \u003cDate\u003e \u003cTime\u003e[ \u003cDate\u003e \u003cTime]\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(args[0].isEmpty() || args[0].isBlank()){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeEmptyException(\"Deadline description cannot be empty.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    cal.setTime(sdf.parse(args[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Invalid date/time format!\\nPlease use the following date/time format:\\n\u003cDAY\u003e/\u003cMONTH\u003e/\u003cYEAR\u003e \u003cHOURS\u003e\u003cMINUTES\u003e\\nDD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                return new DeadlineCommand(args[0], cal);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                args \u003d input_parts[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(args.length \u003c 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Invalid event command!\\nPlease use the following event command format:\\nevent \u003cDescription\u003e /at \u003cDate\u003e \u003cTime\u003e[ \u003cDate\u003e \u003cTime]\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(args[0].isEmpty() || args[0].isBlank()){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeEmptyException(\"Event description cannot be empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                Matcher start_end_matcher \u003d Pattern.compile(\"^(\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4}) ?(\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4})?$\").matcher(args[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(!start_end_matcher.find()){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Invalid date/time format!\\nPlease use the following date/time format:\\n\u003cDAY\u003e/\u003cMONTH\u003e/\u003cYEAR\u003e \u003cHOURS\u003e\u003cMINUTES\u003e\\nDD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                String start_str \u003d start_end_matcher.group(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                String end_str \u003d start_end_matcher.group(2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                Calendar start \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    start.setTime(sdf.parse(start_str));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    throw new DukeFormatException(\"Invalid start date/time format!\\nPlease use the following date/time format:\\n\u003cDAY\u003e/\u003cMONTH\u003e/\u003cYEAR\u003e \u003cHOURS\u003e\u003cMINUTES\u003e\\nDD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                if(end_str !\u003d null){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    Calendar end \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    try{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                        end.setTime(sdf.parse(end_str));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                        throw new DukeFormatException(\"Invalid end date/time format!\\nPlease use the following date/time format:\\n\u003cDAY\u003e/\u003cMONTH\u003e/\u003cYEAR\u003e \u003cHOURS\u003e\u003cMINUTES\u003e\\nDD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                    return new EventCommand(args[0], start, end);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                return new EventCommand(args[0], start);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                throw new DukeFormatException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 103
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Storage(String path){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    // FileOutputStream():FileNotFoundException - If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    // ObjectOutputStream():IOException - If an I/O error occurs while writing stream header."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public int store(TaskList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        FileOutputStream fos \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            fos \u003d new FileOutputStream(this.path);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ObjectOutputStream oos \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return -2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            oos.writeObject(data.getSerializable());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return -3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return -4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            fos.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return -5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    // FileInputStream():FileNotFoundException - If the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    // ObjectInputStream():IOException - If an I/O error occurs while reading stream header."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    // ObjectInputStream.readObject():ClassNotFoundException - Class of a serialized object cannot be found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws ClassNotFoundException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(this.path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ArrayList\u003cTask\u003e holder \u003d (ArrayList\u003cTask\u003e) ois.readObject();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ois.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        fis.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return holder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "//\"C:\\\\Users\\\\JH\\\\Documents\\\\GitHub\\\\duke\\\\data\\\\duke.txt\""
      }
    ],
    "authorContributionMap": {
      "Exprescode": 54
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private boolean status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.status \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return this.desc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return (\"[\" + (status ? \"✓\" : \"✗\") + \"] \" + desc);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 27
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void add(Task t){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String remove(int index){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(index \u003c 0 || index \u003e\u003d list.size()){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String task_str \u003d list.get(index).toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return task_str;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String list(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            sb.append((++count) + \".\" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        sb.deleteCharAt(sb.length() - 1); //Remove extra newline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String find(String query){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\".*\" + query.replaceAll(\" \", \".*\") + \".*\", Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            if (pattern.matcher(t.getDesc()).find()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "                sb.append(++count + \".\" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(count !\u003d 0){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            sb.deleteCharAt(sb.length() - 1); //Remove extra newline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public ArrayList getSerializable(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public int len(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String tick(int index){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        if(index \u003c 0 || index \u003e\u003d list.size()){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        Task curr_task \u003d list.get(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        curr_task.setDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return curr_task.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 70
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 10
    }
  },
  {
    "path": "src/main/java/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public TodoCommand(String desc){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeBoundException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        Todo new_todo \u003d new Todo(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        tasks.add(new_todo);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        ui.show(\"Got it. I\u0027ve added this task:\\n  \" + new_todo.toString() + \"\\nNow you have \" + tasks.len() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 20
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private final String BAR \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    private Scanner scan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        this.scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void show(String msg){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        System.out.println(BAR + \"\\n     \" + msg.replaceAll(\"\\n\", \"\\n     \") + \"\\n\" + BAR + \"\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        show(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void showBye(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        show(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void showError(String error){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        show(\"☹ OOPS!!! \" + error);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        showError(\"Data file might be corrupted! Staring Duke with empty list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 35
    }
  },
  {
    "path": "src/main/java/test.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Exprescode"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class test {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        Matcher end_date_matcher \u003d Pattern.compile(\"^(\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4}) ?(\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{4})?$\").matcher(\"12/12/1212 1212\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        boolean found \u003d end_date_matcher.find();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        String grp \u003d end_date_matcher.group(2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        int count \u003d end_date_matcher.groupCount();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "        System.out.print(\"hi\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 12
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Exprescode"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Exprescode": 2
    }
  }
]
