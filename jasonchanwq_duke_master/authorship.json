[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * @author Chan Wei Qiang Jason"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String cinLine;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        while(!isExit){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                cinLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                Command command \u003d parser.parseCommand(cinLine, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                command.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                isExit\u003dcommand.getIsExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                //print error"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 48,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    String commandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public AddCommand(String variable,String commandWord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(variable);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            if (variable.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.empty(\"todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                Task task \u003d new Todo(variable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                tasks.addTask(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.showListSize(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            if (variable.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.empty(\"deadline\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            j \u003d variable.indexOf(\"/by\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String cinDeadline \u003d variable.substring(j + 4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String cinDeadlineLessDate \u003d variable.substring(0, j - 1);//less space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                LocalDateTime date1 \u003d LocalDateTime.parse(cinDeadline, inputFormatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                Task task \u003d new Deadline(cinDeadlineLessDate, date1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                tasks.addTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.showListSize(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.showNoDeadlineDetected();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            if (variable.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.empty(\"event\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            j \u003d variable.indexOf(\"/at\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String cinEvent \u003d variable.substring(j + 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String cinEventLessDate \u003d variable.substring(0, j - 1);//less space"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                LocalDateTime date1 \u003d LocalDateTime.parse(cinEvent, inputFormatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                Task task \u003d new Event(cinEventLessDate, date1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                tasks.addTask(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.showListSize(tasks.getTaskListSize());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                ui.showNoEventDetected();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            ui.showUnknownCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//        ui.showTasks(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 78
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public ByeCommand(String variable) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(variable);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        isExit\u003dtrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        storage.saveTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//        ui.showTasks(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 21
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    String variable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    boolean isExit \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Command(String variable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.variable \u003d variable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public abstract void execute (TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 19
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public DeleteCommand(String variable) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(variable);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (variable is not positive int) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            do something;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.index \u003d Integer.parseInt(variable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.deleteTask(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public DoneCommand(String variable) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(variable);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        if (variable is not positive int) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            do something;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.index \u003d Integer.parseInt(variable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.doneTask(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public FindCommand(String variable) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(variable);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        for (int j \u003d 0; j \u003c tasks.getTaskListSize(); j++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            String find \u003d tasks.getTaskName(j);   //very important"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            int k \u003d find.indexOf(variable);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            if (k !\u003d -1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                System.out.println(\"    \" + (j + 1) + \".\" + tasks.getTask(j));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public ListCommand(String variable) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(variable);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        for (int j \u003d 0; j \u003c tasks.getTaskListSize(); j++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            System.out.println(\"    \" + (j + 1) + \".\" + tasks.getTask(j));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "//        ui.showTasks(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //constructor"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    boolean isExit\u003dfalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Command parseCommand(String cin, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String commandWord \u003d getFirstWord(cin,\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String variable \u003d getCinLessFirstWord(cin,\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new ListCommand(variable);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new ByeCommand(variable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new DoneCommand(variable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new FindCommand(variable);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new DeleteCommand(variable);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return new AddCommand(variable,commandWord);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            ui.showUnknownCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String getFirstWord(String cinLine, String delete){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String str \u003d cinLine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String[] arrOfStr \u003d str.split(delete, 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return arrOfStr[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String getCinLessFirstWord(String cinLine, String delete){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String str \u003d cinLine;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String[] arrOfStr \u003d str.split(delete, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return arrOfStr.length \u003e 1 ? arrOfStr[1] : \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 47
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    // constructor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void saveTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        try(FileWriter fileWriter \u003d new FileWriter(filePath)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            for(int j\u003d0;j\u003ctasks.size();j++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                fileWriter.write(tasks.get(j).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                fileWriter.write(System.lineSeparator()); //new line"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTaskList() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        ArrayList\u003cTask\u003e previousList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            Scanner scanner \u003d new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String cinLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String[] arrOfStr \u003d cinLine.split(\"]\", 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String taskType \u003d arrOfStr[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String taskDone \u003d arrOfStr[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                String taskName \u003d arrOfStr[2];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                if (taskType.equals(\"[T\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    Task task \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    if (taskDone.equals(\"[✓\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        task.setDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    previousList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                else if (taskType.equals(\"[D\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String[] arrOfStr2 \u003d taskName.split(\" \\\\(by: \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String cinDeadline \u003d arrOfStr2[1].substring(0,arrOfStr2[1].length()-1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String cinDeadlineLessDate \u003d arrOfStr2[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        LocalDateTime date1 \u003d LocalDateTime.parse(cinDeadline, inputFormatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        Task task \u003d new Deadline(cinDeadlineLessDate, date1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        if (taskDone.equals(\"[✓\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                            task.setDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        previousList.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        System.out.println(\"error\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                else if (taskType.equals(\"[E\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String[] arrOfStr2 \u003d taskName.split(\" \\\\(at: \", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String cinEvent \u003d arrOfStr2[1].substring(0,arrOfStr2[1].length()-1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        String cinEventLessDate \u003d arrOfStr2[0];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        LocalDateTime date1 \u003d LocalDateTime.parse(cinEvent, inputFormatter);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        Task task \u003d new Event(cinEventLessDate, date1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        if (taskDone.equals(\"[✓\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                            task.setDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        previousList.add(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    }catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                        System.out.println(\"error\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            throw new DukeException(\"File not found\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "            return previousList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 95
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * duke.task.Deadline represents a deadline-type duke.task.Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * duke.task.Deadline is a child of duke.task.Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected LocalDateTime dateBy;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Deadline(String name, LocalDateTime deadline){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.dateBy \u003ddeadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns the date of the deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return The dateBy of the dateline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public LocalDateTime getDateBy() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return dateBy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Sets the date of the deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param dateBy This is the dateBy in d/MM/yyyy HHmm"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void setDateBy(LocalDateTime dateBy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.dateBy \u003d dateBy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns the date of the deadline in d/MM/yyyy HHmm format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return The date of the deadline in d/MM/yyyy HHmm format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String showDateBy() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return getDateBy().format(outputFormatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns a string that represents the object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return This returns the task type, showDoneStatus and the name of object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return \"[D][\"+showDoneStatus()+\"]\"+ getName() + \" (by: \"+ dateBy.format(outputFormatter)+\")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * duke.task.Event represents a event-type duke.task.Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * duke.task.Event is a child of duke.task.Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Event(String name, LocalDateTime time){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(name);//super calls the parent class constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.at\u003dtime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns a string that represents the event timing when called"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return This returns the event timing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public LocalDateTime getEventAt(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String showEventAt() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return getEventAt().format(outputFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns a string that represents the object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return This returns the task type, showDoneStatus and the name of object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return \"[E][\"+showDoneStatus()+\"]\"+ getName() + \" (at: \"+showEventAt()+\")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    //constructor method"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    Task(String name){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Return the name of the task when called."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return The name of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Used to set the name of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @param name The name of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Used to set the isDone to true."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void setDone(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns the status of the task, ✓ if the task is done, ✗ if the task is not done"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return The showDoneStatus of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String showDoneStatus(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return isDone?\"✓\":\"✗\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 49
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class TaskList{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) { this.tasks \u003d tasks; }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String getTaskName(int j){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return tasks.get(j).getName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String getTask(int j){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return tasks.get(j).toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void doneTask(int index){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        int number \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.get(index-1).setDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void deleteTask(int index){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        int number \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.remove(index-1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void addTask(Task t){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * duke.task.Todo represents a todo-type duke.task.Task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " * duke.task.Todo is a child of duke.task.Task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Todo(String name){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        super(name);//super calls the parent class constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Returns a string that represents the object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * @return This returns the task type, showDoneStatus and the name of object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        return \"[T][\"+showDoneStatus()+\"]\"+ getName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 22
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Prints the welcome message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"    What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"No previous list detected!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showListSize(int size){ System.out.println(\"Now you have \" + size + \" task(s) in the list\");}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Prints error message for unknown duke.command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showUnknownCommand(){ System.out.println( \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"); }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Prints error message for when deadline not detected."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showNoDeadlineDetected(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"Sorry no /by detected for deadline!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     * Prints error message for when event not detected"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showNoEventDetected(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        System.out.println(\"Sorry no /at detected for event!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void empty(String message){System.out.println(\"☹ OOPS!!! The description of a \"+message+\" cannot be empty.\");}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    public void showBye(){ System.out.println(\"Thank you for using duke!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 53
    }
  },
  {
    "path": "src/test/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    String sDate1\u003d \"2/12/2019 1800\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    LocalDateTime date1 \u003d LocalDateTime.parse(sDate1, inputFormatter);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private Deadline deadline \u003d new Deadline(\"first deadline\",date1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    void testGetName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"first deadline\", deadline.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"[D][✗]first deadline (by: 2/12/2019 1800)\",\"[D][\"+ deadline.showDoneStatus()+\"]\"+ deadline.getName()+\" (by: \"+ deadline.showDateBy()+\")\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 24
    }
  },
  {
    "path": "src/test/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    String sDate1\u003d\"2/12/2019 1800\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    LocalDateTime date1 \u003d LocalDateTime.parse(sDate1, inputFormatter);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private Event event \u003d new Event(\"first event\", date1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    void testGetName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"first event\", event.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"[E][✗]first event (at: 2/12/2019 1800)\", \"[E][\"+ event.showDoneStatus()+\"]\"+ event.getName()+\" (at: \"+event.showEventAt()+\")\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 23
    }
  },
  {
    "path": "src/test/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    private Todo todo \u003d new Todo(\"first todo\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    void testGetName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"first todo\", todo.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "        assertEquals(\"[T][✗]first todo\", \"[T][\"+ todo.showDoneStatus()+\"]\"+ todo.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jasonchanwq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jasonchanwq": 17
    }
  }
]
