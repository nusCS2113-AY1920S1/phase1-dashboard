[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "run {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Samuel787": 29,
      "-": 14
    }
  },
  {
    "path": "src/main/java/Duke/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public AddCommand(TaskList taskList, Storage storage, Ui ui, Task task){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(taskList, storage, ui);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute() throws DukeException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.dukeAddTask(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return ui.addedMessage(task, taskList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 17
    }
  },
  {
    "path": "src/main/java/Duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Command(TaskList taskList, Storage storage, Ui ui){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    abstract public String execute() throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 19
    }
  },
  {
    "path": "src/main/java/Duke/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static String parseDeadlineInfo(String by) throws DukeException{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //expected input format: dd/mm/year time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String[] data \u003d by.split(\" \", 2); //split by whitespace"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(data.length !\u003d 2){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Wrong input format for creating new Duke.Deadline. Follow this eg: deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //trim the data"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        data[0] \u003d data[0].trim();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        data[1] \u003d data[1].trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String[] dates \u003d data[0].split(\"/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(dates.length !\u003d 3) throw new DukeException(\"     ☹ OOPS!!! Wrong input format for date when creating new Duke.Deadline. Follow this eg: /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int day, month, year, time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            day \u003d Integer.parseInt(dates[0]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            month \u003d Integer.parseInt(dates[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            year \u003d Integer.parseInt(dates[2]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            time \u003d Integer.parseInt(data[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Wrong input format for date or time when creating new Duke.Deadline. Follow this eg: /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //work with the data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(time \u003c 0 || time \u003e 2400){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Duke.Deadline time is not a valid input. Follow this eg: /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(isDateVaid(day, month, year)){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseDate(day, month, year) + \", \" + parseTime(time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! You have entered an invalid date\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static String parseEventInfo(String at) throws DukeException{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //expected input format dd/mm/year time-time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String[] data \u003d at.split(\" \", 2); //split by whitespace"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(data.length !\u003d 2){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Wrong input format for creating new Duke.Event. Follow this eg: event team meeting /at 2/12/2019 1600-2000\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //trim the data"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        data[0] \u003d data[0].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        data[1] \u003d data[1].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //extract out the dates"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String[] dates \u003d data[0].split(\"/\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(dates.length !\u003d 3) throw new DukeException(\"     ☹ OOPS!!! Wrong input format for date when creating new Duke.Event. Follow this eg: /at 2/12/2019 1600-2000\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int day, month, year, time1, time2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            day \u003d Integer.parseInt(dates[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            month \u003d Integer.parseInt(dates[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            year \u003d Integer.parseInt(dates[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String[] times \u003d data[1].split(\"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            time1 \u003d Integer.parseInt(times[0]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            time2 \u003d Integer.parseInt(times[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Wrong input format for date or time when creating new Duke.Event. Follow this eg: /at 2/12/2019 1600-2000\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Wrong input format for date or time when creating new Duke.Event. Follow this eg: /at 2/12/2019 1600-2000\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //work with the data"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(time1 \u003c 0 || time1 \u003e 2400 || time2 \u003c 0 || time2 \u003e 2400){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Duke.Event timing is not a valid input. Follow this eg: /at 2/12/2019 1600-2000\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(time1 \u003e time2){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! The event\u0027s start time cannot be after the event\u0027s end time!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(isDateVaid(day, month, year)){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseDate(day, month, year) + \", \" + parseTime(time1)+\"-\"+parseTime(time2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! You have entered an invalid date\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  checking if the user input date is a valid one"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static boolean isDateVaid(int d, int m, int y){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(d \u003c 1 || d \u003e 31 || m \u003c 1 || m \u003e 12 || y \u003c 0){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(m \u003d\u003d 2){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(isLeapYear(y)){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if(d \u003e 29){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if(d \u003e 28){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(m\u003d\u003d4 || m\u003d\u003d6 || m\u003d\u003d9 || m\u003d\u003d11){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(d \u003e 30){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static boolean isLeapYear(int y){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if((y%4 \u003d\u003d 0 \u0026\u0026 y%100 !\u003d 0) || y %400\u003d\u003d0){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static String parseDate(int day, int month, int year){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //appending day"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d day +\"st of \";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(day \u003d\u003d 2 || day \u003d\u003d 22){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d day + \"nd of \";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(day \u003d\u003d 3 || day \u003d\u003d 23){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d day + \"rd of \";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d day + \"th of \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //appending month and year"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(month \u003d\u003d 1){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"January \";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 2){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"February \";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 3){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"March \";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 4){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"April \";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 5){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"May \";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 6){"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"June \";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 7){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"July \";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 8){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"August \";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 9){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"September \";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 10){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"October \";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 11){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"November \";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(month \u003d\u003d 12){"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            date +\u003d \"December\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        date +\u003d year;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private static String parseTime(int time) throws DukeException{"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String t;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int hr, mins;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(time \u003d\u003d 2400) time \u003d 0000;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        hr \u003d time/100;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        mins \u003d time %100;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(hr \u003e\u003d 12){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            hr -\u003d 12;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            t \u003d \"pm\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            t \u003d \"am\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(hr \u003d\u003d 0){"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            hr \u003d 12;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(mins \u003d\u003d 0){"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return hr+\"\"+t;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(mins \u003c10){"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return hr+\":0\"+mins+t;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(mins \u003c 60){"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return hr+\":\"+mins+t;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Invalid time entered!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 196
    }
  },
  {
    "path": "src/main/java/Duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Deadline(String description, String by){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String getBy(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return \"[D]\" + super.toString() +\" (by: \" +by+\")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 22
    }
  },
  {
    "path": "src/main/java/Duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public DeleteCommand(TaskList taskList, Storage storage, Ui ui, int taskNum){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(taskList, storage, ui);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute() throws DukeException{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.dukeDeleteTask(taskNum);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d ui.deletedMessage(taskList.get(taskNum), taskList.size()-1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        taskList.delete(taskNum);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 18
    }
  },
  {
    "path": "src/main/java/Duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private int task_num;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public DoneCommand(TaskList taskList, Storage storage, Ui ui, int task_num){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(taskList, storage, ui);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.task_num \u003d task_num;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute() throws DukeException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage.dukeDoneTask(task_num);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        taskList.setDone(task_num);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return ui.markDoneMessage(taskList.get(task_num));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 17
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Duke(String file_path){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage \u003d new Storage(file_path);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showError(d);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Parser parser \u003d new Parser(taskList, storage, ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        while(!isExit){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                c.execute();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } catch (DukeException d){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                ui.showError(d);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } finally{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 44,
      "-": 1
    }
  },
  {
    "path": "src/main/java/Duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 7
    }
  },
  {
    "path": "src/main/java/Duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Event(String description, String at){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String getAt(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \"+this.at+\")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 20
    }
  },
  {
    "path": "src/main/java/Duke/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class ExitCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public ExitCommand(Ui ui){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(null, null, ui);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return ui.goodByeMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 18
    }
  },
  {
    "path": "src/main/java/Duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public FindCommand(TaskList taskList, Ui ui, String keyword){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(taskList, null, ui);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for(int i \u003d 0; i \u003c taskList.size(); i++){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(taskList.get(i).getDescription().contains(keyword)){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                searchResults.add(taskList.get(i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return ui.foundTask(searchResults);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 24
    }
  },
  {
    "path": "src/main/java/Duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public ListCommand(TaskList taskList, Ui ui){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(taskList, null, ui);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return ui.listTasks(taskList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 14
    }
  },
  {
    "path": "src/main/java/Duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  this parser will receive the user input and validates it before"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  expressing it as a command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Parser(TaskList taskList, Storage storage, Ui ui){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Command parse(String user_input) throws DukeException{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        user_input \u003d user_input.trim(); //remove white spaces on both sides on input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(user_input.equals(\"bye\")){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return new ExitCommand(this.ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.equals(\"list\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return new ListCommand(taskList, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.length() \u003e\u003d 4 \u0026\u0026 user_input.substring(0, 4).equals(\"done\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseDone(user_input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.length() \u003e\u003d 4 \u0026\u0026 user_input.substring(0,4).equals(\"todo\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseTodo(user_input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.length() \u003e\u003d 5 \u0026\u0026 user_input.substring(0,5).equals(\"event\")){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseEvent(user_input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.length() \u003e\u003d 9 \u0026\u0026 user_input.substring(0,9).equals(\"deadline \")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseDeadline(user_input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.length() \u003e\u003d 7 \u0026\u0026 user_input.substring(0,6).equals(\"delete\")){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseDelete(user_input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(user_input.length() \u003e\u003d 5 \u0026\u0026 user_input.substring(0,4).equals(\"find\")){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return parseFind(user_input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  Generally"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  0. Parse the data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  1. validate the data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *      1.1 if data is invalid, throw duke exception"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *      1.2 if data is valid, generate the command and return it"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private AddCommand parseTodo(String todo_input) throws DukeException{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        todo_input \u003d todo_input.substring(4).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(todo_input.equals(\"\")){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //user did not add any task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //INPUT VALIDATED"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return new AddCommand(taskList, storage, ui, new ToDo(todo_input));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private AddCommand parseEvent(String event_input) throws DukeException{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        event_input \u003d event_input.substring(5).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String[] data \u003d event_input.split(\"/at\", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(data.length \u003d\u003d 2){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            data[0] \u003d data[0].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            data[1] \u003d data[1].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(data[0].equals(\"\")){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DukeException(\"     ☹ OOPS!!! You need to have some event description!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(data[1].equals(\"\")){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DukeException(\"     ☹ OOPS!!! You need to include some timing for the event!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //INPUT IS VALIDATED"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return new AddCommand(taskList, storage, ui, new Event(data[0], DateTimeParser.parseEventInfo(data[1])));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //user input format wrong"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! You must separate the event description and timing with /at \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private AddCommand parseDeadline(String deadline_input) throws DukeException{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        deadline_input \u003d deadline_input.substring(9);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String[] data \u003d deadline_input.split(\"/by\", 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(data.length \u003d\u003d 2){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            data[0] \u003d data[0].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            data[1] \u003d data[1].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(data[0].equals(\"\")){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DukeException(\"     ☹ OOPS!!! You need to have some task description!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(data[1].equals(\"\")){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                throw new DukeException(\"     ☹ OOPS!!! You need to include some task deadline after /by\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //INPUT VALIDATED"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return new AddCommand(taskList, storage, ui, new Deadline(data[0], DateTimeParser.parseDeadlineInfo(data[1])));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //user input format wrong"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! You must separate the task and deadline with /by \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private DeleteCommand parseDelete(String delete_input) throws DukeException{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        delete_input \u003d delete_input.substring(6).trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int taskNum;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskNum \u003d Integer.parseInt(delete_input);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Please only enter the task number of the task that you want to delete\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if (taskNum \u003c 1 || taskNum \u003e taskList.size()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Duke.Task \" + taskNum + \" does not exist\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //INPUT VALIDATED"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return new DeleteCommand(taskList, storage, ui, taskNum);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private DoneCommand parseDone(String done_input) throws DukeException{"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int task_num;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            task_num \u003d Integer.parseInt(done_input.substring(5)) - 1; //task_num rebased to 0 index"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Invalid done command entered. \"+done_input.substring(5)+\" is not an integer. Follow this format:done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(task_num \u003c 0){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            task_num++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Invalid done command entered. \"+ task_num + \" is less than 1.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else if(task_num \u003e\u003d taskList.size()){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            task_num++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Invalid done command entered. \"+ task_num + \" exceeds the number of tasks in the list.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //INPUT VALIDATED"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return new DoneCommand(taskList, storage, ui, task_num);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private FindCommand parseFind(String find_input) throws DukeException{"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        find_input \u003d find_input.substring(4).trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //INPUT VALIDATED"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return new FindCommand(taskList, ui,find_input);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 151
    }
  },
  {
    "path": "src/main/java/Duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String file_path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private int numTasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Storage(String file_path){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.file_path \u003d file_path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        numTasks \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  This method is invoked upon starting up Duke.Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  It reads all the data from the data file and puts it into an ArrayList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  and returns this ArrayList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            FileReader fr \u003d new FileReader(file_path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String str;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            while((str \u003d br.readLine()) !\u003d null){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                String[] data \u003d str.split(\"\\\\|\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if(data[0].equals(\"T\")){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    ToDo toDo \u003d new ToDo(data[2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if(data[1].equals(\"1\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        toDo.setDone(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    tasks.add(toDo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    this.numTasks++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } else if(data[0].equals(\"D\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    Deadline deadline \u003d new Deadline(data[2], data[3]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if(data[1].equals(\"1\")){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        deadline.setDone(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    this.numTasks++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                } else if(data[0].equals(\"E\")){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    Event event \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    if(data[1].equals(\"1\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        event.setDone(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    this.numTasks++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * This method adds the task to the file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void dukeAddTask(Task task) throws DukeException{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //write task to the file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file_path, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(fw);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            if(task instanceof ToDo){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                ToDo toDo \u003d (ToDo)task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int isDone \u003d (toDo.getIsDone()) ? 1 : 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                pw.println(\"T|\" + isDone + \"|\"+ toDo.getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                this.numTasks++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if(task instanceof Event){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Event event \u003d (Event)task;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int isDone \u003d (event.getIsDone()) ? 1 : 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                pw.println(\"E|\" + isDone + \"|\"+event.getDescription()+\"|\"+event.getAt());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                this.numTasks++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            } else if(task instanceof Deadline){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                Deadline deadline \u003d (Deadline)task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                int isDone \u003d (deadline.getIsDone()) ? 1 : 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                pw.println(\"D|\"+isDone+\"|\"+deadline.getDescription()+\"|\"+deadline.getBy());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                this.numTasks++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch(IOException e){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            //error handling here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Due to some file writing error, this task isn\u0027t added :-(\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  This method executes a valid delete command on the data"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void dukeDeleteTask(int taskNum)throws DukeException{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            BufferedReader file \u003d new BufferedReader(new FileReader(file_path));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            StringBuffer inputBuffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            int line_counter \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            while ((line \u003d file.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if (line_counter \u003d\u003d taskNum) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    line_counter++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    continue; //skip appending this line"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                inputBuffer.append(line);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                inputBuffer.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                line_counter++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(file_path);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fileOut.write(inputBuffer.toString().getBytes());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Could not update task in hard disk right now :-(\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  This command executes a valid done command on the data"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void dukeDoneTask(int taskNum) throws DukeException{"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        //update hard disk"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            BufferedReader file \u003d new BufferedReader(new FileReader(file_path));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            StringBuffer inputBuffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            int x \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            while((line \u003d file.readLine()) !\u003d null){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                if(x \u003d\u003d taskNum){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    String[] contents \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    contents[1] \u003d \"1\"; //mark as done;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    line \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    for(int i\u003d0; i\u003ccontents.length; i++){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        line +\u003d contents[i];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        if(i !\u003d contents.length-1){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                            line +\u003d\"|\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                inputBuffer.append(line);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                inputBuffer.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                x++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(file_path);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fileOut.write(inputBuffer.toString().getBytes());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! Could not update task in hard disk right now :-(\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 164
    }
  },
  {
    "path": "src/main/java/Duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public abstract class Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void setDone(boolean x){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.isDone \u003d x;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public boolean getIsDone(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return \"[\"+getStatusIcon()+\"] \"+this.description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 33
    }
  },
  {
    "path": "src/main/java/Duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void add(Task t){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void delete(int n){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        tasks.remove(n);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void setDone(int n){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        tasks.get(n).setDone(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Task get(int n){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return tasks.get(n);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 36
    }
  },
  {
    "path": "src/main/java/Duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "enum TaskType{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    todo, event, deadline, obsolete"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 5
    }
  },
  {
    "path": "src/main/java/Duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public ToDo(String description){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return \"[T]\"+super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 12
    }
  },
  {
    "path": "src/main/java/Duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    final String duke_line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    final String duke_indent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    final String logo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_indent \u003d \"     \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.logo \u003d duke_indent + \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + duke_indent +\"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + duke_indent + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + duke_indent + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "                + duke_indent + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        if(scanner.hasNextLine()){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return scanner.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            return \"\"; //simulate enter being pressed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_line);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"Hello! I\u0027m Duke.Duke\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void showError(DukeException d){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String goodByeMessage(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String markDoneMessage(Task task){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent+\"Nice! I\u0027ve marked this task as done:\" + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent+\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent+task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String addedMessage(Task task, int numTasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Got it. I\u0027ve added this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"  \" +task + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"Now you have \"+numTasks+\" tasks in the list.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"  \" +task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"Now you have \"+numTasks+\" tasks in the list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String deletedMessage(Task task, int totalTasks){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Noted. I\u0027ve removed this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + task + \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"Now you have \" + totalTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent + \"Now you have \" + totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String foundTask(ArrayList\u003cTask\u003e searchResults){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent+\"Here are the matching tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        System.out.println(duke_indent+\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for(Task task : searchResults){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            System.out.println(duke_indent+counter+\".\"+task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            msg +\u003d duke_indent+counter+\".\"+task+\"\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  Lists out all the tasks"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public String listTasks(TaskList taskList){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        for(int i\u003d1; i \u003c\u003d taskList.size(); i++){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            msg +\u003d duke_indent + i +\". \" +taskList.get(i-1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            System.out.println(duke_indent + i +\". \" +taskList.get(i-1).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 117
    }
  },
  {
    "path": "src/main/java/Test/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  All commands are executed with"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  valid command paramaters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  This is strongly enforced with exception catching in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  the Parser class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  The Parser class serves to be a filter that filters out"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  all invalid user requests before initializing them into"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  Hence, the purpose of this CommandTest class is merely"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *  to ensure that correct commands are generated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //basic necessities"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String file_path \u003d \"dukeTest.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Parser parserTest;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String duke_indent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public AddCommandTest(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_indent \u003d \"     \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage \u003d new Storage(file_path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }catch(DukeException d){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showError(d);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        parserTest \u003d new Parser(taskList, storage, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void addCommand_todoTasks_success(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new ToDo(\"eat\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(correctAddMessage(task, taskList), new AddCommand(taskList, storage, ui, task).execute());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //test should not fail"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void addCommand_eventTasks_success(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new Event(\"Study CS2113t\", \"13/09/2019 1600-1800\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(correctAddMessage(task, taskList), new AddCommand(taskList, storage, ui, task).execute());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //test should not fail"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void addCommand_deadlineTasks_success(){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new Deadline(\"Finish Duke\", \"12/09/2019 2359\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(correctAddMessage(task, taskList), new AddCommand(taskList, storage, ui, task).execute());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private String correctAddMessage(Task task, TaskList taskList){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int numTasks \u003d taskList.size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Got it. I\u0027ve added this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"  \" +task + \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"Now you have \"+numTasks+\" tasks in the list.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void addCommand_wrongDataFile_dukeException(){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new ToDo(\"Wrong Data File\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"\", new AddCommand(taskList, new Storage(\"src/duke/dataTest.txt\"), ui, task).execute());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //should not reach this line"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"     ☹ OOPS!!! Due to some file writing error, this task isn\u0027t added :-(\", d.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 98
    }
  },
  {
    "path": "src/main/java/Test/DateTimeParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DateTimeParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void dateValidity_validDate_success(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(true, DateTimeParser.isDateVaid(29, 2, 2020));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void dateValidity_invalidDate_fail(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(false, DateTimeParser.isDateVaid(29, 2, 2019));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 18
    }
  },
  {
    "path": "src/main/java/Test/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void checkDone_deadlineDone_taskIsDone(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new Deadline(\"Meow!\", \"1200\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[D][✓] Meow! (by: 1200)\", task.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 15
    }
  },
  {
    "path": "src/main/java/Test/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //basic necessities"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String file_path \u003d \"dukeTest.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Parser parserTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String duke_indent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public DeleteCommandTest(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_indent \u003d \"     \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage \u003d new Storage(file_path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }catch(DukeException d){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showError(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        parserTest \u003d new Parser(taskList, storage, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void deleteCommand_deleteExistingTask_success(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new ToDo(\"Task to be deleted\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Noted. I\u0027ve removed this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + task + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            new AddCommand(taskList, storage, ui, task).execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            String k \u003d  new DeleteCommand(taskList, storage, ui, taskList.size()-1).execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(msg,k);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch(DukeException d){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void deleteCommand_wrongFilePath_dukeException(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new ToDo(\"Task to be deleted\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Noted. I\u0027ve removed this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + task + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            new AddCommand(taskList, storage, ui, task).execute();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"\",new DeleteCommand(taskList,new Storage(\"jk/duke.txt\"), ui, taskList.size()-1).execute());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //should not reach this line"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch(DukeException d){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"     ☹ OOPS!!! Could not update task in hard disk right now :-(\", d.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 64
    }
  },
  {
    "path": "src/main/java/Test/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //basic necessities"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String file_path \u003d \"dukeTest.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Parser parserTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String duke_indent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public DoneCommandTest(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_indent \u003d \"     \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage \u003d new Storage(file_path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }catch(DukeException d){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showError(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        parserTest \u003d new Parser(taskList, storage, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void successfulDone_doneLastEvent_success(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new Deadline(\"Task to be marked done\", \"10/12/2019\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent+\"Nice! I\u0027ve marked this task as done:\" + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"[D][✓] Task to be marked done (by: 10/12/2019)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            new AddCommand(taskList, storage, ui, task).execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(msg ,new DoneCommand(taskList,storage, ui, taskList.size()-1).execute());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void doneCommand_wrongFilePath_dukeException(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new Deadline(\"Task to be marked done\", \"10/12/2019\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent+\"Nice! I\u0027ve marked this task as done:\" + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        msg +\u003d duke_indent + \"[D][✓] Task to be marked done (by: 10/12/2019)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            new AddCommand(taskList, storage, ui, task).execute();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"\",new DoneCommand(taskList,new Storage(\"jk/duke.txt\"), ui, taskList.size()-1).execute());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //should not reach this line"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"     ☹ OOPS!!! Could not update task in hard disk right now :-(\", d.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 66
    }
  },
  {
    "path": "src/main/java/Test/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 11
    }
  },
  {
    "path": "src/main/java/Test/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void checkDone_eventDone_eventIsDone(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new Event(\"Meow!\", \"1200-1400\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[E][✓] Meow! (at: 1200-1400)\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 14
    }
  },
  {
    "path": "src/main/java/Test/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //basic necessities"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String file_path \u003d \"dukeTest.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String duke_indent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public ExitCommandTest(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_indent \u003d \"     \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage \u003d new Storage(file_path);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }catch(DukeException d){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showError(d);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void exitCommand_default_successfulExitMessage(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        String msg \u003d duke_indent + \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(msg, new ExitCommand(ui).execute());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 36
    }
  },
  {
    "path": "src/main/java/Test/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    //basic necessities"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String file_path \u003d \"dukeTest.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private Parser parserTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    private final String duke_indent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public ParserTest(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        this.duke_indent \u003d \"     \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        storage \u003d new Storage(file_path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }catch(DukeException d){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showError(d);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        parserTest \u003d new Parser(taskList, storage, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void wrongUserInput_randomCommand_DukeException(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            parserTest.parse(\"ilovecs2113t\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //should not reach this line"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", d.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void wrongDoneUserInput_numExceedsTasks_DukeException(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        int k \u003d taskList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        k++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            parserTest.parse(\"done \"+k);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            fail(); //should not reach this line"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        } catch (DukeException d){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "            assertEquals(\"     ☹ OOPS!!! Invalid done command entered. \"+ k + \" exceeds the number of tasks in the list.\", d.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 56
    }
  },
  {
    "path": "src/main/java/Test/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import Duke.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samuel787"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    public void checkDone_todoDone_taskIsDone(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        Task task \u003d new ToDo(\"Meow!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "        assertEquals(\"[T][\\u2713] Meow!\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samuel787"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samuel787": 14
    }
  }
]
