[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "test {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * This class deals with all commands that are adding event/deadline/todo into the taskslist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type the type of the command(deadline/todo/event)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param content the name and time of the newly added (deadline/todo/event)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public AddCommand(String Type, String content){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(Type,content);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This addDeadline function deals with deadline command and add a new deadline int to the tasklist as well as the storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void addDeadline(Tasklist tasks, Storage storage){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitcontent \u003d content.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (splitcontent.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String description \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String time \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int i \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (i \u003c splitcontent.length \u0026\u0026 splitcontent[i].charAt(0) !\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    description \u003d description + \" \" + splitcontent[i];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                i \u003d i + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int count \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int j \u003d 0; j \u003c splitcontent[i].length(); j++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (splitcontent[i].charAt(j) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (count \u003d\u003d 2) flag \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (i \u003c splitcontent.length) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    time \u003d time + \" \" + splitcontent[i];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(flag){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String[] temptime \u003d time.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String[] tempdate \u003d temptime[1].split(\"/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Date x \u003d new Date(tempdate[0],tempdate[1],tempdate[2],temptime[2]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    time \u003d x.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                Task t \u003d new Deadline(description, time, \"D\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasks.datalist.add(t);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String outputline \u003d \"D/\"+\"notdone/\"+ description + \"/\"+time;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(t.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Now you have \" + tasks.datalist.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException ex){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String temp \u003d \"☹ \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(temp + ex.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This addEvent function deals with Event command and add a new event to the taskslist as well as the storage"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void addEvent(Tasklist tasks, Storage storage){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitcontent \u003d content.split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (splitcontent.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String description \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String time \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int i \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (i \u003c splitcontent.length \u0026\u0026 splitcontent[i].charAt(0) !\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    description \u003d description + \" \" + splitcontent[i];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                i \u003d i + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int count \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int j \u003d 0; j \u003c splitcontent[i].length(); j++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (splitcontent[i].charAt(j) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (count \u003d\u003d 2) flag \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (i \u003c splitcontent.length) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    time \u003d time + \" \" + splitcontent[i];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(flag){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String[] temptime \u003d time.split(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String[] tempdate \u003d temptime[1].split(\"/\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Date x \u003d new Date(tempdate[0],tempdate[1],tempdate[2],temptime[2]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    time \u003d x.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                Task t \u003d new Event(description, time, \"E\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasks.datalist.add(t);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String outputline \u003d \"E/\"+\"notdone/\"+ description + \"/\"+time;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.add(outputline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(t.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Now you have \" + tasks.datalist.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException ex){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String temp \u003d \"☹ \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(temp + ex.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This addTodo function deals with todo command and add a new todo into the taskslist as well as the storage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void addTodo(Tasklist tasks, Storage storage){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitcontent \u003d content.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (splitcontent.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String description \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String time \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (i \u003c splitcontent.length) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    description \u003d description + \" \" + splitcontent[i];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                Task t \u003d new Todo(description, time, \"T\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasks.datalist.add(t);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String outputline \u003d \"T/\"+\"notdone/\"+ description + \"/\"+time;;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(t.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.add(outputline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Now you have \" + tasks.datalist.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException ex){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String temp \u003d \"☹ \";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(temp + ex.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 151
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * The command class provide basic features of commands, storing them by type and content."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It contains override constructor function to create a Command type in different ways."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It contain execute function to deal with all commands that is key in as user-input, giving exception if operation goes wrong."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This constructor method create a Command class, store them by their type (string) and content (string_."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Command(String Type, String content){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Type \u003d Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This override constructor receives String of whole user-input and parser it to get type(string) and content(string)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param userinput"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Command(String userinput){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String Type\u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitstring \u003d userinput.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Type \u003d splitstring[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while(i \u003c  splitstring.length){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            content +\u003d \" \"+splitstring[i];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Type \u003d Type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This execute function takes in class Ui,class type Tasklist and class type Storage to update changes to the tasklist as well as the output file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Gives Exception when the command type is wrong or required content is missed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(Tasklist tasks,Ui ui,Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (Type.equals(\"list\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ListCommand listcommand \u003d new ListCommand(Type, content);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            listcommand.executecomment(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"bye\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ui.sayGoodbye();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"find\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            FindCommand findcommand \u003d new FindCommand(Type, content);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            findcommand.execute(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"done\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DoneCommand donecommand \u003d new DoneCommand(Type, content);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            donecommand.execute(tasks, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DeleteCommand deletecommand \u003d new DeleteCommand(Type, content);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deletecommand.execute(tasks, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            AddCommand add \u003d new AddCommand(Type, content);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            add.addDeadline(tasks, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"event\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            AddCommand add \u003d new AddCommand(Type, content);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            add.addEvent(tasks, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            AddCommand add \u003d new AddCommand(Type, content);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            add.addTodo(tasks, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String temp \u003d \"☹ \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(temp + ex.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * isExit function checks if the user has typed in \"bye\" command, is so, exit the programme."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return boolean value of true or false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return Type.equals(\"bye\") ? true : false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 88
    }
  },
  {
    "path": "src/main/java/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Date class takes in String inout of \"xx/xx/xxxx,xxxx\" type, and print our in written form."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected int Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected int Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected String Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected int Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Constructor function Date takes in four Strings from user-input, store them."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Day"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Month"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Year"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Date(String Day,String Month,String Year,String Time){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Day \u003d Integer.parseInt(Day);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Month  \u003d Integer.parseInt(Month);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Year \u003d Year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Time \u003d Integer.parseInt(Time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * toString function base on the four strings of date and time, convert into verbal from and displays."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String of the written form output that is ready to be printed out."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String day \u003d Integer.toString(Day);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(Day % 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            day \u003d day + \"st \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(Day % 10 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            day \u003d day + \"nd \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(Day % 10 \u003d\u003d 3) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            day \u003d day + \"rd \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            day \u003d day + \"th \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String month \u003d (Month \u003d\u003d 1) ? \"January\" :(Month \u003d\u003d 2) ? \"February\" :(Month \u003d\u003d 3) ? \"March\" :(Month \u003d\u003d 4) ? \"April\" :(Month \u003d\u003d 5) ? \"May\" :(Month \u003d\u003d 6) ? \"June\" :(Month \u003d\u003d 7) ? \"July\" :(Month \u003d\u003d 8) ? \"August\" :(Month \u003d\u003d 9) ? \"September\" :(Month \u003d\u003d 10) ? \"October\" :(Month \u003d\u003d 11) ? \"November\" :\"December\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int time1 \u003d (Time / 100) % 12;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int time2 \u003d Time % 100;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String part2 \u003d (time2 \u003d\u003d 0)?\"\":Integer.toString(time2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String part1 \u003d (Time / 100 \u003d\u003d 12)? Integer.toString(12):Integer.toString(time1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String temp \u003d (time2 \u003d\u003d 0)?\"\":\":\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if((Time /100 )\u003c 12 ||(Time/100) \u003d\u003d 24){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            time \u003d part1+temp+part2 +\"am\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            time \u003d part1+temp+part2 + \"pm\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return \" \"+day + \"of \"+month+\" \"+Year+\", \"+time+\",\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 54
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Deadline class inherit from Task class, has boolean value isDone to track the completeness of the task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It also enables convert to string format the are ready to be printed out"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    protected String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    protected String Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Deadline constructor function takes three strings(content,time,and type) from the user-input,store them in the class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Deadline(String description,String time,String Type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(description,time,Type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * toString function convert the deadline class into string that can be printed out."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String format of deadline task that are ready to be printed out."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return \"  [D]\" + \"[\"+super.getStatusIcon()+\"]\"+super.toString()+ \" (by:\" + time + \")\" ;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 29
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * DeleteCommand class inherit from command class, store the delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It accomplishes actual deleting on the tasklist as well as inside the output file."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * DeleteCommand constructor function takes in two strings from the user-input, store information of type and content in the command class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public DeleteCommand(String Type,String content){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(Type,content);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * execute function removes a task in the tasklist as well as in the output file in storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * displays the deleted message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(Tasklist tasks,Storage storage){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int removeindex\u003d0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitcontent \u003d content.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i \u003d0 ;i\u003ctasks.datalist.size();i++){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(i + 1\u003d\u003d Integer.parseInt(splitcontent[1])){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                removeindex \u003d i;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(tasks.datalist.get(i).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        boolean loopflag \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i \u003d0 ;i\u003ctasks.datalist.size() \u0026\u0026 loopflag;i++){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(removeindex \u003d\u003d i){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                loopflag \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasks.datalist.remove(removeindex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Now you have \"+tasks.datalist.size()+\" tasks in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 42
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * DoneCommand class inherit from Command class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It deals with markdone command, mark the task of corresponding index in the tasklist as completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * DoneCommand constructor function takes two string of the user-input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Store two types of information(type and content)in the DeleteCommand class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public DoneCommand(String Type,String content){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(Type,content);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * The execute function go through the tasklist, find the task that is done and mark it as accomplished."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Reflect the changes in the output file. Print our mark-done message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(Tasklist tasks,Storage storage){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitcontent \u003d content.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.out.println(splitcontent[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i \u003d0 ;i\u003ctasks.datalist.size();i++){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(i + 1\u003d\u003d Integer.parseInt(splitcontent[1])){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasks.datalist.get(i).markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(tasks.datalist.get(i).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 34
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Duke is a interactive tool developed for users to record down calenders and tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It also enables users to manage tasks improving their working.studying efficiency."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private Tasklist tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Duke constructor method takes in the path of the txt file that will be used to store tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            tasks \u003d new Tasklist(storage.load());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (Exception e) {   //这里用的还是Exception 不是DukeException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            tasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This run function contains the flow of executing Duke programme."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * When this function is called, Duke starts/initialized and it ends when users types \"bye\" in the console."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                parser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                Command c \u003d new Command(parser.parseType(fullCommand),parser.parseContent(fullCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (Exception e) {   //这里用的还是Exception 不是DukeException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This is the main function that runs the programme."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String currentpath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(currentpath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        new Duke(currentpath + \"/docs/tasklist.txt\").run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 54,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * DukeException class is a custom Exception class that inherit from the java Exception class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It shows custom warnings when custom exceptions happen."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public DukeException(){}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * DukeException constructor method takes in the message that wants to display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 15
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Event class inherit from Task class. Stores necessary information of event task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    protected String time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    protected String Type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Event constructor method takes in three types of string form user-input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Store information of event task\u0027s type, content, time of ends, whether is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Event(String description,String time,String Type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(description,time,Type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Type \u003d Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * toSting function convert event class into verbal string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String of event information that can be printed out."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return \"  [E]\" + \"[\"+super.getStatusIcon()+\"]\"+super.toString()+ \" (at:\" + time + \")\" ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 30
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * FindCommand  inherit from Command class, store information of find user-command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * It accomplishes finding the exact tasks according the keyword user typed in."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * FindCommand constructor method takes in two string from user-input, stores type of the command and also the keyword of searching."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public FindCommand(String Type,String content){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(Type,content);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * execute method search in the tasklist and find all tasks that correspond to the keyword."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * All results will be printed out in the console."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(Tasklist tasks){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitcontent \u003d content.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String keyword \u003d splitcontent[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cTask\u003e searchlist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i\u003d0;i\u003ctasks.datalist.size();i++){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String tempdescription[] \u003d tasks.datalist.get(i).description.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            boolean tempflag \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for(int j\u003d0;j\u003ctempdescription.length \u0026\u0026 tempflag;j++){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(tempdescription[j].equals(keyword)){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    searchlist.add(tasks.datalist.get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tempflag \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i\u003d0;i\u003csearchlist.size();i++){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String time \u003d searchlist.get(i).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println((i+1)+\".\" + time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        searchlist.clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 44
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * ListCommand inherit from the Command class, stores type of the command and displays the whole current tasklist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * in the console."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * ListCommand constructor method takes in type and the content(usually empty)of the command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ListCommand(String Type,String content){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(Type,content);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Type \u003d Type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * executecomment method displays/prints out the current tasklist in the console."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void executecomment(Tasklist tasks){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i\u003d0;i\u003ctasks.datalist.size();i++){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String time \u003d tasks.datalist.get(i).toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println((i+1)+\".\" + time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 29
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Parser class deals with user-input, split and recognize type of user-input,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * makes user-input readable and useful."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Command command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected String Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected String content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * parseType method takes in the whole string of user-input, split it by blank\" \","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * And then store the first element of string list as type of the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param userinput"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String parseType(String userinput){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitstring \u003d userinput.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Type \u003d splitstring[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * parseContent method takes in the whole string of user-input, split it by blank\" \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * And then store the rest elements except the first element of string list as content of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param userinput"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String parseContent(String userinput){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String Type\u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String[] splitstring \u003d userinput.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Type \u003d splitstring[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while(i \u003c  splitstring.length){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            content +\u003d \" \"+splitstring[i];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 40
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Storage class deals with the output txt file, open,update,save the file."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    String filepath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Storage constructor method takes in the path of the txtfile, providing directory for following methods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param filepath"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Storage(String filepath){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * load function open the txt file when the programme is initialized."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Read and track if there is tasks in the txt file, if has, read it and store in an arraylist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return arraylist that contains all tasks that are already existed in the txt file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cTask\u003e load(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        File checkfile \u003d new File(filepath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(checkfile.exists()){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try (Scanner s \u003d new Scanner(new FileReader(filepath))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String content \u003d s.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String[] tempsplit \u003d content.split(\"/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String description \u003d tempsplit[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String time \u003d tempsplit[0].equals(\"T\") ? \"\" : tempsplit[3];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String Type \u003d tempsplit[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if(Type.equals(\"T\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Task t \u003d new Todo(description, time, Type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        if (tempsplit[1].equals(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            t.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.add(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else if(Type.equals(\"D\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Task t \u003d new Deadline(description, time, Type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        if (tempsplit[1].equals(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            t.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.add(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Task t \u003d new Event(description, time, Type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        if (tempsplit[1].equals(\"done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            t.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.add(t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }catch(Exception e){System.out.println(e);}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (file.createNewFile()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"File is created!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * save method saves updates of the tasklist after markdone and deleting certain tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * It uses current tasklist to overwrite existing tasklist in the txt file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void save(Tasklist tasks){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(filepath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.datalist.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String tempdone \u003d tasks.datalist.get(i).isDone ? \"done\" : \"notdone\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String outputline \u003d tasks.datalist.get(i).Type + \"/\" + tempdone + \"/\" + tasks.datalist.get(i).description + \"/\" + tasks.datalist.get(i).time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                byte[] strToBytes \u003d outputline.getBytes();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                outputStream.write(strToBytes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                outputStream.write(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * add method updates the tasks in the txt file after add command is executed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * It shoes exception if updating failed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param outputline"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void add(String outputline){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(filepath, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            byte[] strToBytes \u003d outputline.getBytes();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            outputStream.write(strToBytes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            outputStream.write(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch(Exception e){System.out.println(e);}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 107
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Task class stores information of task user wants to add, prints out its completeness in icon form"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * provides method of converting task information to string to print in console."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected String Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Task constructor method takes in three types of string(type of the task,content of task and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * ending time of the task from user-input, stores its completeness."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Task(String description,String time,String Type) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Type \u003d Type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * getStatusIcon prints out the status of completeness in icon form."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return icon of tick or cross."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * toString prints out the content of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return the content information of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * markAsDone changes the status of completeness into completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 49
    }
  },
  {
    "path": "src/main/java/Tasklist.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Tasklist class contains a arraylist that will be used to store tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Tasklist {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected ArrayList\u003cTask\u003e datalist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Tasklist(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.datalist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Tasklist constructor method takes in arraylist read from the txt file, stores it in the class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param datalist"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Tasklist(ArrayList\u003cTask\u003e datalist){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.datalist \u003d datalist;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 20
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Todo class inherit from the Task class, store and print out todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    protected String time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    protected String Type;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *Todo constructor method takes in three types of string(type of the task,content of task and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * ending time of the task from user-input, stores its completeness."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Todo(String description,String time,String Type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(description,time,Type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.Type \u003d Type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * toString convert the information fo todo task into written form."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String of todo task that can be printed our in console."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return \"  [T]\" + \"[\"+super.getStatusIcon()+\"]\"+super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 29
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " * Ui class deals with interactions between Duke and Users, displays messages in the console."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Displays loading error message if loading of txt file fails."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"There is no existing list\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Displays welcome message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String optionline \u003d \"---------------------------------------\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String welcome  \u003d optionline+ \"Hello! I\u0027m Duke\\n\"+ \"What can I do for you?\\n\"+optionline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(welcome);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Takes in user-input, stores in the String format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String of the whole user-input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Scanner input  \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String userinput\u003dinput.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return userinput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Displays optional line in the console."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"---------------------------------------\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showError(String error){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Displays goodbye message in the console when existing the programme."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void sayGoodbye(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 51
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void TestDeadline(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Deadline temp \u003d new Deadline(\"return book\",\"Sunday\",\"D\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(temp.toString(),\"  [D]\" + \"[\"+temp.getStatusIcon()+\"]\"+\"return book\"+ \" (by:\" + \"Sunday\" + \")\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 11
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 10
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void TestEvent(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Event temp \u003d new Event(\"return book\",\"Sunday\",\"E\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(temp.toString(),\"  [E]\" + \"[\"+temp.getStatusIcon()+\"]\"+\"return book\"+ \" (at:\" + \"Sunday\" + \")\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 11
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void TestStorage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String currentpath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage(currentpath+\"/docs/tasklist.txt\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Tasklist temp \u003d new Tasklist();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        temp.datalist \u003d storage.load();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertTrue(!temp.datalist.isEmpty());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 15
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void TestTodo(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Todo temp \u003d new Todo(\"return book\",\"\",\"T\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(temp.toString(),\"  [T]\" + \"[\"+temp.getStatusIcon()+\"]\"+\"return book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 11
    }
  }
]
