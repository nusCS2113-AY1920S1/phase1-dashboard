[
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "test {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiawei"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiawei"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 19,
      "jiawei": 28
    }
  },
  {
    "path": "settings.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // \u0027By\u0027 field is specific to Deadline class and is not in the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String byWhen;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // Constructors are not members, so they are not inherited by subclasses,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // but the constructor of the superclass can be invoked from the subclass."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super(description); // invocation of super class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.byWhen \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // @override annotation is a good practice. if there are mistakes like wrong method name,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // it will be detected and there would be compile time error. it also improves readability."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String getTaskLabel() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \" [D]\" + super.getTaskLabel() + \" (by: \" + byWhen + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 18
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // final keyword for constants. constants to be in capital letters."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // static keyword for class-level attributes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static final String LINE \u003d \"   ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // reading in input from user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // Obj is the type of object to be stored in List. (type-safe list)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // List\u003cObj\u003e list \u003d new ArrayList\u003cObj\u003e ();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // a list of Tasks objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static void PrintGreeting() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"   Hello! I\u0027m Duke\\n\" + \"   What can I do for you?\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static void PrintBye() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"    Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static void PrintList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        // use for loop because we want to print the number. if not can use enhanced for loop or iterator."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            System.out.println(\"    \" + (i + 1) + \".\" + taskList.get(i).getTaskLabel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static void PrintAcknowledgeDone(int taskNumber) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"    Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"   \" + taskList.get(taskNumber - 1).getStatusIcon() + \" \" + taskList.get(taskNumber - 1).getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private static void PrintTaskAdded() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"    Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"    \" + taskList.get(taskList.size() - 1).getTaskLabel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(\"    Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // this line means this is the entry point to the program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        PrintGreeting();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        // keep reading input till there is \"bye\"."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            // store input into variable called command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                PrintList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            // to end Duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            else if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                PrintBye();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                break; // to get out of the while(true) loop."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            // marking a task as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            else if (command.startsWith(\"done\") || command.startsWith(\"Done\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    // 1. user could input number that is out of bounds of the list array"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    // 2. or user did not input any number at all."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    // 3. or user input something else rather than a number."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    // Integer.valueOf() or Integer.parseInt() converts string to integer."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    String[] temp \u003d command.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        throw new DukeNoInfoException(); // user input: done \u0027blank\u0027."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        int taskNumber \u003d Integer.parseInt(temp[1]); // user input: done \u0027string\u0027."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        taskList.get(taskNumber - 1).setAsDone(); // -1 to get the index of the task in myList. user input: done \u0027number not in list\u0027."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        PrintAcknowledgeDone(taskNumber);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(\"    You can only mark a task in the list as done. Please input another index within the list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(\"    The item you wanted to mark as done is not provided as its index. Please input the index of the task.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                } catch (DukeNoInfoException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(e.Feedback());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                // if want to catch 2 exceptions that are can be handled the same way, use (exception1 | exception2)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            else { // there is a new task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    String[] temp \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    String firstWord \u003d temp[0]; // to extract the first word."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    switch (firstWord) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        case \"todo\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                throw new DukeNoInfoException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                Todo newToDo \u003d new Todo(temp[1]); // temp[1] is the remaining words after extracting first word."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                taskList.add(newToDo);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                PrintTaskAdded();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        case \"event\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                throw new DukeNoInfoException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                // PatternSyntaxException on splitting with regex \"/\" if no \"/\" is provided."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                String[] tempEvent \u003d temp[1].split(\"/\", 2); // to get the description and the by/at when."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                if (tempEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    throw new DukeNoFullInfoException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    // input: event xxxx /at cccc"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    // temp: event | xxxx /at cccc"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    // tempEvent: xxxx | at cccc"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    // tempEventWhen: at | cccc"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    String[] tempEventWhen \u003d tempEvent[1].split(\" \", 2); // to get the when without the at/by word."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    String eventDescription \u003d tempEvent[0];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    if (tempEventWhen.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                        throw new DukeNoFullInfoException(tempEventWhen[0]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                        String eventAt \u003d tempEventWhen[1];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                        Event newEvent \u003d new Event(eventDescription, eventAt);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                        taskList.add(newEvent);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                        PrintTaskAdded();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                        break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        case \"deadline\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                throw new DukeNoInfoException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                String[] tempDeadline \u003d temp[1].split(\"/\", 2); // to get the description and the by/at when."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                if (tempDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    throw new DukeNoFullInfoException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                String[] tempDeadlineWhen \u003d tempDeadline[1].split(\" \", 2); // to get the when without the at/by word."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                String deadlineDescription \u003d tempDeadline[0];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                if (tempDeadlineWhen.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    throw new DukeNoFullInfoException(tempDeadlineWhen[0]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    String deadlineWhen \u003d tempDeadlineWhen[1];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    Deadline newDeadline \u003d new Deadline(deadlineDescription, deadlineWhen);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    taskList.add(newDeadline);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    PrintTaskAdded();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                    break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                        default: // none of the 3 specified type of tasks."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            throw new DukeException(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                catch (PatternSyntaxException e) { // no /by or /at provided for events/deadlines."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(\"    Please provide the full information.\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            + \"    1. For events, please include /at _____.\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                            + \"    2. For deadlines, please include /by _____.\\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                catch (DukeNoInfoException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(e.Feedback());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                catch (DukeNoFullInfoException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(e.Feedback());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    System.out.println(LINE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                catch (DukeException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                   System.out.println(LINE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                   System.out.println(e.Feedback());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                   System.out.println(LINE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 2,
      "-": 4,
      "jiawei": 218
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // default constructor."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    DukeException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // overloaded constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public DukeException(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String Feedback() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \"    Sorry, \" + \"\u0027\" + userInput + \"\u0027\" + \" is an invalid command. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                + \"    Duke only accept these few commands:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                + \"    1. todo _____.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                + \"    2. event _____ /at _____.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                + \"    3. deadline _____ /by _____.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 23
    }
  },
  {
    "path": "src/main/java/DukeNoFullInfoException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class DukeNoFullInfoException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    private String byOrAt \u003d \"\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    DukeNoFullInfoException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    DukeNoFullInfoException(String byOrAt) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.byOrAt \u003d byOrAt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String Feedback() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        if (byOrAt.equals(\"by\") || byOrAt.equals(\"By\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"    Please provide the full information.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    + \"    For deadlines, please include /by _____.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "         else if (byOrAt.equals(\"at\") || byOrAt.equals(\"At\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"    Please provide the full information.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    + \"    For events, please include /at _____.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiawei"
        },
        "content": "            return \"    Please provide the full information.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    + \"    1. For events, please include /at _____.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiawei"
        },
        "content": "                    + \"    2. For deadlines, please include /by _____.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 29
    }
  },
  {
    "path": "src/main/java/DukeNoInfoException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class DukeNoInfoException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public DukeNoInfoException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String Feedback() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \"    No information provided. Please input your task information.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // \u0027By\u0027 field is specific to Deadline class and is not in the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String atWhere;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // Constructors are not members, so they are not inherited by subclasses,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // but the constructor of the superclass can be invoked from the subclass."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super(description); // invocation of super class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.atWhere \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // @override annotation is a good practice. if there are mistakes like wrong method name,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // it will be detected and there would be compile time error. it also improves readability."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String getTaskLabel() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \" [E]\" + super.getTaskLabel() + \" (at: \" + atWhere + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 18
    }
  },
  {
    "path": "src/main/java/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // attributes of the tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // constructor Task()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // getter method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        // if task is done, tick. if task is NOT done, cross."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // setter method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public void setAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String getTaskLabel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \" [\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 31
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiawei"
        },
        "content": "public class Todo extends Task { // Todo class is a subclass. Task class is the superclass."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiawei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // @override annotation is a good practice. if there are mistakes like wrong method name,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    // it will be detected and there would be compile time error. it also improves readability."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    public String getTaskLabel() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiawei"
        },
        "content": "        return \" [D]\" + super.getTaskLabel();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiawei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiawei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiawei": 14
    }
  }
]
