[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Start Duke by passing in a specific file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * path where the task data is stored"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of the main Duke class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize the ui, storage and taskList objects"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath The relative local path where task data is being stored"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Run the program with ui in recursive loop"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * In each loop, ask the user to input command and execute it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the command \"bye\" is entered by user, exit the program"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                //If exitCommand is being execute, while loop will be terminate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "HUANGXUANKUN": 56
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to add a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructer of command.AddCommand class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param task Specifies the task to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui       The Duke UI system interacting with user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage  The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                       command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showTaskAdded(task, taskList.getSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 50
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command from user. Abstract class to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * implemented by various command classes such as command.ExitCommand, command.AddCommand..."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True to exit Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList Storage of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to delete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /** The index of the task to be deleted, as specified by this command. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a DeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param Id Specifies the index of the task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DeleteCommand(int Id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.Id \u003d Id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList container for tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Task t \u003d taskList.getTask(Id - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.removeTask(Id - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showRemovedTask(t, taskList.getSize());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to mark the task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /** The index of the task to be marked as done, as specifed by this command. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of DoneCommand class. Use to mark the task with specific"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * id in the list to done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param Id Specifies the index of the task to be marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DoneCommand(int Id) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.Id \u003d Id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList Container for tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Task t \u003d taskList.getTask(Id - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.markedAsDone(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 53
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to exit Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value true."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList containing tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacts with user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showByeMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 37
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to find if any task with specific"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * keyword exists in the taskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /** A string representation of the keyword for searching. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of a FindCommand class. Take in a keyword to find"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * if the task exists in the taskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param keyword Specifies the keyword for searching."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList The tasklist containing tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showFoundResult(taskList, keyword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 50
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to list all task stored in taskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a command.ListCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList The Tasklist containing tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showTaskList(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 40
    }
  },
  {
    "path": "src/main/java/duke/core/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Try to convert the input string from dd/MM/yyyy HHmm to English representation."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * For example 15/12/2019 can be converted to (15th of December 1200 , 1AM)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the input string is not in dd/MM/yyyy, return input string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param formatInput represents a string input which might in the format of dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A string that either in converted date and time format or same as the input string(Formatting fails)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static String convertToDateAndTime(String formatInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter stFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter ndFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter rdFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter thFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            LocalDateTime formatted \u003d LocalDateTime.parse(formatInput, formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if ((formatted.getDayOfMonth()%10) \u003d\u003d 1){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return formatted.format(stFormatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }else if ((formatted.getDayOfMonth()%10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return formatted.format(ndFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }else if ((formatted.getDayOfMonth()%10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return formatted.format(rdFormatter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return formatted.format(thFormatter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return formatInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 39
    }
  },
  {
    "path": "src/main/java/duke/core/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Exception that is related to Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a exception that is specific to duke with a error log"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param errorMessage A string that describes the specific duke error begins with \"OOPS!!!\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(\"OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 15
    }
  },
  {
    "path": "src/main/java/duke/core/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It parses user command into a Duke\u0027s understandable commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Check if the keyword appears in the given string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param stringArr The string array to be inspected."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param keyword The string to be searched."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value indicates if the keyword is found in the string array."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static boolean findKeyword(String[] stringArr, String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (Arrays.asList(stringArr).contains(keyword)){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Parses a Task from a command string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param s The string array to be parsed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return The task that is parsed from the string array."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static Task parseTask(String s) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] textArr \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (s.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String[] contentArr \u003d textArr[1].split(\" /by \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String description \u003d contentArr[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String by \u003d contentArr[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new Deadline(description, by);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if (s.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String[] contentArr \u003d textArr[1].split(\" /at \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String description \u003d contentArr[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String at \u003d contentArr[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new Event(description, at);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new Todo(textArr[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Checks for illegal user input and throws exceptions accordingly."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param words The string array to be checked."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException Duke specificed Exception describing the error"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static void checkValidity(String[] words) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!(firstWord.equals(\"done\") || firstWord.equals(\"todo\") || firstWord.equals(\"deadline\") || firstWord.equals(\"event\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                || firstWord.equals(\"delete\") || firstWord.equals(\"list\") || firstWord.equals(\"bye\") || firstWord.equals(\"find\"))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Check if task description is empty"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if ((firstWord.equals(\"todo\") || firstWord.equals(\"done\") || firstWord.equals(\"delete\") || firstWord.equals(\"find\")) \u0026\u0026 words.length \u003c 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"wordlength \u003d \" + words.length);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"The description of the command \" + firstWord + \" is empty.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Check if tasks Deadline or Event contains keyword of date and time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if ((firstWord.equals(\"deadline\") \u0026\u0026 !findKeyword(words, \"/by\"))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                || (firstWord.equals(\"event\") \u0026\u0026 !findKeyword(words, \"/at\"))) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"The date/time of a \" + firstWord + \" is not provided.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Parses a user command into a Duke\u0027s understandable command type"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param s The string represents user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A command.Command that represents the type of command to be executed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException Duke-specified Exception describing the error"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static Command parse(String s) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        s \u003d s.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] words \u003d s.split(\" \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        checkValidity(words);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new DoneCommand(Integer.parseInt(words[1]));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(words[1]));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new FindCommand(words[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Task t \u003d parseTask(s);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new AddCommand(t);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 108
    }
  },
  {
    "path": "src/main/java/duke/core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a Storage that perform reading and writing of data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * from hard disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a Storage object with a file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param path A string that represents the path of the file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                where data is being stored and read from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Read the tasks from the file to a ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return taskList A ArrayList of tasks as recorded in the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throw DukeException A Exception when file is not found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File file \u003d new File(this.path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String[] data \u003d scanner.nextLine().split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (data[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Todo todo \u003d new Todo(data[2]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (data[1].equals(\"1\")) todo.markAsDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    taskList.add(todo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (data[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Deadline deadline \u003d new Deadline(data[2], data[3]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (data[1].equals(\"1\")) deadline.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (data[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Event event \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (data[1].equals(\"1\")) event.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Loading of task list is completed\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (FileNotFoundException error) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"There is a loading error\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Saves tasks from a \u003ccode\u003eTaskList\u003c/code\u003e to the local file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList The \u003ccode\u003eTaskList\u003c/code\u003e storing tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If writing to the local file failed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveTasks(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File file \u003d new File(this.path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            PrintWriter writeIn \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                writeIn.println(task.getFormat());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            writeIn.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Fail to save tasks to hard disk\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 86
    }
  },
  {
    "path": "src/main/java/duke/core/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It serves as a container of tasks.Can perform various operating"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * such as getter, adding, removing etc to the taskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a new tTaskList with a default empty list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor that takes in a ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList An existing ArrayList of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the ArrayList of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return TheArrayList of tasks stored"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A getter. To return task from taskList with given index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param i is an integer representing the index of the task ."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return The Task in the list with this specific index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Task getTask(int i) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if ((i) \u003e\u003d taskList.size()){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"Task number \" + (i+1) + \" does not exist\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * An Adder. To add the argument Task to the taskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t The Task to be added to the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A remover. Delete the task with the given index from the taskList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param i integer representing the index of the task to be removed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void removeTask(int i) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.remove(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the size of taskList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return An integer representing the size of the taskList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 79
    }
  },
  {
    "path": "src/main/java/duke/core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * The UI system that provides conversation with user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor to initialize object UI and allow user to type command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows Greeting message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String greeting \u003d \"Hello from I\u0027m Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display an loading error log when loading of data fails"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"There is a loading error\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Reads one line of user instruction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a string of user command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display a long dash line to divide the prompt message"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"_____________________________________________________\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows that a Task is added to the task list, and then displays"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * that task and the number of tasks in task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t  The task that is added to the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param size The number of tasks stored in the taskList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showTaskAdded(Task t, int taskListSize) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Now you have \" + taskListSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows an error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param str A string representing the description of the error."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showError(String str) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show the message of a Task that has been marked as \u0027done\u0027."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t A Task that has its status marked as \u0027done\u0027."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void markedAsDone(Task t) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n  \" + t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows the removed task and the current number of tasks in the task list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t            The Task that is removed from the task list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskListSize the size of the task list which the Task t is being"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                     removed from."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showRemovedTask(Task t, int taskListSize) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Now you have \" + taskListSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Displays all tasks in the taskList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList The taskList that contains all the tasks"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showTaskList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println((i + 1) + \". \" + taskList.getTask(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows search results for finding a keyword in the task list. Displays"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * all tasks that contain the keyword."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList  The TaskList where keyword is searched."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param keyword A string representation of the keyword."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showFoundResult(TaskList taskList, String keyword) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int i \u003d 0, j \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Task t \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            boolean isFound \u003d Arrays.asList(t.getDescription().toLowerCase().split(\" \")).contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (isFound) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(j + \". \" + t);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows exit message to user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showByeMessage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 134
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DateFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Extends from Task, represents a Deadline task which required description and Date/Time info"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String formatted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of Deadline task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description represents the info/title of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param by represents a string with date\u0026time information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.date \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.formatted \u003d DateFormatter.convertToDateAndTime(by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the String containing info of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"[D][Y] Homework (by: 15th of December 1200 , 1AM)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formatted + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the info of the task to be written in local txt file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"D | 0 | Homework | 02/12/1996 1235\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return \"D | 1 | \"  +  super.getDescription() + \" | \" + date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return \"D | 0 | \"  +  super.getDescription() + \" | \" + date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DateFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Extends from Task, represents a Event task which required description and Date/Time info"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String formatted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of Event task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description represents the info/title of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param at represents a string with date\u0026time information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.date \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.formatted \u003d DateFormatter.convertToDateAndTime(at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the String containing info of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"[E][Y] event ABC (by: 15th of December 1200 , 1AM)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formatted + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the info of the task to be written in local txt file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"E | 1 | event ABC | 02/12/1996 1235\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return \"E | 1 | \" + super.getDescription() + \" | \" + date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return \"E | 0 | \" + super.getDescription() + \" | \" + date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 46
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * An abstract class to be extended into Deadline, Todo and Event classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Task(String description){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * To check if the task is done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return boolean value of the isDone status"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isDone(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * To change the status of the task from isDone \u003d false to isDone \u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the task is already done, throw an DukeException with log to inform the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException with log \"This task is already done\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (this.isDone){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"This task is already done\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Get the icon representing the isDone status of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the task is done, icon \u003d \"Y\", \"N\" otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String representing the isDone status icon"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return (isDone ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the String containing info of the task with isDone status icon"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"[Y] Homework\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the description info of the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String of task info"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Turn the info of the task in proper format to be written in local"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Implemented differently in sub-class Deadline, Todo and Event"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A string that contains info of a task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract String getFormat();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Extends from Task, represents a Todo task which required only the description info"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of Todo task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description represents the info/title of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the String containing info of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"[T][Y] Homework)\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Output the info of the task to be written in local txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a String in format of \"T | 0 | Homework\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getFormat(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return \"T | 1 | \"  +  super.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return \"T | 0 | \"  +  super.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 40
    }
  },
  {
    "path": "src/test/java/duke/core/DateFormatterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DateFormatterTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the DateFormatter.convertToDateAndTime with valid input Date\u0026Time format, verify if the outputs are expected"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void validFormattingTest(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"1st of January 1996, 10AM\", DateFormatter.convertToDateAndTime(\"01/01/1996 1035\"), \"The date\u0026time is not converted into proper format\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"22nd of February 1996, 12AM\", DateFormatter.convertToDateAndTime(\"22/02/1996 0000\"), \"The date\u0026time is not converted into proper format\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"3rd of June 1996, 5PM\", DateFormatter.convertToDateAndTime(\"03/06/1996 1735\"),\"The date\u0026time is not converted into proper format\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"14th of December 1996, 11PM\", DateFormatter.convertToDateAndTime(\"14/12/1996 2359\"),\"The date\u0026time is not converted into proper format\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the DateFormatter.convertToDateAndTime with invalid input Date\u0026Time format, verify if the outputs are equal to inputs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void invalidFormattingTest(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"1/01/2000 1035\", DateFormatter.convertToDateAndTime(\"1/01/2000 1035\"), \"Invalid date format is given, input String should be returned\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"1/01/2000 1035\", DateFormatter.convertToDateAndTime(\"1/01/2000 1035\"), \"Invalid date format is given, input String should be returned\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"01/01/2000 2500\", DateFormatter.convertToDateAndTime(\"01/01/2000 2500\"), \"Invalid time is given, input String should be returned\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 28
    }
  },
  {
    "path": "src/test/java/duke/core/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the return command type for Parser.parse(userInput)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void commandTypeTest() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c1 \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c2 \u003d Parser.parse(\"done 1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c3 \u003d Parser.parse(\"delete 2\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c4 \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c5 \u003d Parser.parse(\"find MEETING\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c6 \u003d Parser.parse(\"todo abc\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c7 \u003d Parser.parse(\"event Meeting /at 2PM\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Command c8 \u003d Parser.parse(\"deadline event Homework ABC /by 1PM\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c1 instanceof ExitCommand, \"The command type should be \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c2 instanceof DoneCommand, \"The command type should be \u0027DoneCommand\u0027\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c3 instanceof DeleteCommand, \"The command type should be \u0027DeleteCommand\u0027\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c4 instanceof ListCommand, \"The command type should be \u0027ListCommand\u0027\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c5 instanceof FindCommand, \"The command type should be \u0027FindCommand\u0027\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c6 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c7 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c8 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 33
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the Deadline.toString()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void deadlineStringTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"[D][N] abc (by: 2nd of December 1996, 12PM)\", new Deadline(\"abc\", \"02/12/1996 1235\").toString(),\"Deadline toString() is not expected\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the Deadline.getFormat()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void writeFormatTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"D | 0 | deadlineTest | 02/12/1996 1235\",new Deadline(\"deadlineTest\", \"02/12/1996 1235\").getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the Deadline.isDone() after a new Deadline object is being initialized"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void doneStatusTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertFalse(new Deadline(\"abc\", \"02/12/1996 1235\").isDone(), \"The newly created Deadline should not be done\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A general test case to test Deadline class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test steps:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 1. Create a Deadline object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 2. Verify Deadline.isdone(), Deadline.toString(), Deadline.getFormat()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 3. Mark the Deadline object to isDone status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 4. Repeat step 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if markAsDone is applied to a done task, throw exception with log"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void deadlineTestCase() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Create a new deadline and check its toString() and getFormat()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadlineTest\", \"02/12/1996 1235\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertFalse(deadline.isDone(), \"The newly created deadline should not be done\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"[D][N] deadlineTest (by: 2nd of December 1996, 12PM)\",deadline.toString(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"D | 0 | deadlineTest | 02/12/1996 1235\",deadline.getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Mark the deadline as done and check its toString() and getFormat()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(deadline.isDone(), \"The deadline should be marked as done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"[D][Y] deadlineTest (by: 2nd of December 1996, 12PM)\", deadline.toString(), \"The deadline.toString() is not expected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"D | 1 | deadlineTest | 02/12/1996 1235\",deadline.getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 59
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the Event.toString()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void EventStringTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"[E][N] eventTest (at: 2nd of December 1996, 12PM)\", new Event(\"eventTest\", \"02/12/1996 1235\").toString(), \"toString result is not expected\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the Event.getFormat()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void writeFormatTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"E | 0 | test | 02/12/1996 1235\",new Event(\"test\", \"02/12/1996 1235\").getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the Event.isDone() after a new Event object is being initialized"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void doneStatusTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertFalse(new Event(\"test\", \"02/12/1996 1235\").isDone(), \"The newly created Deadline should not be done\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A general test case to test Event class"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test steps:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 1. Create a Event object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 2. Verify Event.isdone(), Event.toString(), Event.getFormat()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 3. Mark the Event object to isDone status."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 4. Repeat step 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if markAsDone is applied to a done task, throw exception with log"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void eventTestCase() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Creata a new event and check its toString() and getFormat()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Event event \u003d new Event(\"eventTest\", \"02/12/1996 1235\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertFalse(event.isDone(), \"The newly created event should not be done\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"[E][N] eventTest (at: 2nd of December 1996, 12PM)\",event.toString(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"E | 0 | eventTest | 02/12/1996 1235\",event.getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Mark the event as done and check its toString() and getFormat()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(event.isDone(), \"The event should be marked as done\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"[E][Y] eventTest (at: 2nd of December 1996, 12PM)\", event.toString(), \"The event.toString() is not expected\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"E | 1 | eventTest | 02/12/1996 1235\",event.getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 58
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the todo.toString()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void todoStringTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(new Todo(\"todoTest\").toString(), \"[T][N] todoTest\", \"todo string test fails\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the todo.getFormat()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void writeFormatTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"T | 0 | todoTest\",new Todo(\"todoTest\").getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the todo.isDone() after a new Todo object is being initialized"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void doneStatusTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertFalse(new Todo(\"abc\").isDone(), \"The newly created Deadline should not be done\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A general test case to test Todo class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test steps:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 1. Create a Todo object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 2. Verify todo.isdone(), todo.toString(), todo.getFormat()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 3. Mark the todo object to isDone status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * 4. Repeat step 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if markAsDone is applied to a done task, throw exception with log"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void todoTestCase() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Creata a new task and check its toString() and getFormat()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Todo todo \u003d new Todo(\"todoTest\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertFalse(todo.isDone(), \"The newly created todo should not be done\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"[T][N] todoTest\",todo.toString(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"T | 0 | todoTest\",todo.getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Mark the task as done and check its toString() and getFormat()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(todo.isDone(), \"The todo should be marked as done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals(\"[T][Y] todoTest\", todo.toString(), \"The todo.toString() is not expected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"T | 1 | todoTest\",todo.getFormat(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 59
    }
  }
]
