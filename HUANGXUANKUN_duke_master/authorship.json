[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "HUANGXUANKUN": 21
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to add a task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructer of AddCommand class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param task Specifies the task to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui       The Duke UI system interacting with user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage  The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                       command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showTaskAdded(task, taskList.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 42
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command from user. Abstract class to be"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * implemented by various command classes such as ExitCommand, AddCommand..."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True to exit Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 23
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.by \u003d convertToDateAndTime(by);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public char type(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \u0027D\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String convertToDateAndTime(String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(at, formatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return formatter.format(dateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return at;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return type() + \" | 1 | \"  +  super.getDescription() + \" | \" + by;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return type() + \" | 0 | \"  +  super.getDescription() + \" | \" + by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 44
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to delete a task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /** The index of the task to be deleted, as specifed by this command. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a \u003ccode\u003eDeleteCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskId Specifies the index of the task to be deleted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DeleteCommand(int Id) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.Id \u003d Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Task t \u003d taskList.getTask(Id - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.removeTask(Id - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showRemovedTask(t, taskList.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 44
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to mark the task as done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /** The index of the task to be marked as done, as specifed by this command. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructer of DoneCommand class. Use to mark the task with specific"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * id in the list to done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskId Specifies the index of the task to be marked as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DoneCommand(int Id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.Id \u003d Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Task t \u003d taskList.getTask(Id - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.markedAsDone(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 45
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Start Duke by passing in a specific file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * path where the task data is stored"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                //If exitCommand is being execute, while loop will be terminate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "HUANGXUANKUN": 44
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Exception that is related to Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a exception that is specific to duke with a error log string"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param errorMessage A string that describes the specific duke error"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 13
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.at \u003d convertToDateAndTime(at);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String convertToDateAndTime(String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(at, formatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return formatter.format(dateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public char type() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \u0027E\u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return type() + \" | 1 | \" + super.getDescription() + \" | \" + at;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return type() + \" | 0 | \" + super.getDescription() + \" | \" + at;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 42
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to exit Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value true."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showByeMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 32
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to find if any task with specific"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * keyword exists in the taskList."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /** A string representation of the keyword for searching. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor of a FindCommand class. Take in a keyword to find"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * if the task exists in the taskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param keyword Specifies the keyword for searching."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Executes the command with respect to tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showFoundResult(taskList, keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to list all task stored in taskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a \u003ccode\u003eListCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Indicates whether this command tells Duke to exit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value false."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasklist The Tasklist containing tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui The Duke UI system interacting with user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storage The Storage handles read/write of data from hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If an exception occurs during execution of the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *      command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.showTaskList(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 33
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It parses user command into a Duke\u0027s understandable commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Check if the keyword appears in the given string"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param stringArr The string array to be inspected."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param s The string to be searched."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean value indicates if the keyword is found in the string array."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static boolean findKeyword(String[] stringArr, String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (Arrays.asList(stringArr).contains(keyword)){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Parses a Task from a command string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param words The string array to be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return The Task that is parsed from the string array."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static Task parseTask(String s) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] textArr \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (s.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String[] contentArr \u003d textArr[1].split(\" /by \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String description \u003d contentArr[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String by \u003d contentArr[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new Deadline(description, by);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if (s.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String[] contentArr \u003d textArr[1].split(\" /at \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String description \u003d contentArr[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String at \u003d contentArr[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new Event(description, at);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new Todo(textArr[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Checks for illegal user input and throws exceptions accordingly."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param words The string array to be checked."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws A Duke specificed Exception describing the error"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static void checkValidity(String[] words) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!(firstWord.equals(\"done\") || firstWord.equals(\"todo\") || firstWord.equals(\"deadline\") || firstWord.equals(\"event\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                || firstWord.equals(\"delete\") || firstWord.equals(\"list\") || firstWord.equals(\"bye\") || firstWord.equals(\"find\"))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Check if task description is empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if ((firstWord.equals(\"todo\") || firstWord.equals(\"done\") || firstWord.equals(\"delete\") || firstWord.equals(\"find\")) \u0026\u0026 words.length \u003c 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"wordlength \u003d \" + words.length);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of the command \" + firstWord + \" is empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Check if tasks Deadline or Event contains date and time"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if ((firstWord.equals(\"deadline\") \u0026\u0026 !findKeyword(words, \"/by\"))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                || (firstWord.equals(\"event\") \u0026\u0026 !findKeyword(words, \"/at\"))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"OOPS!!! The date/time of a \" + firstWord + \" cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Parses a user command into a Duke\u0027s understandable command type"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param s The string represents user command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A Command that represents the type of command to be executed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws A Duke specificed Exception describing the error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static Command parse(String s) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] words \u003d s.split(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        checkValidity(words);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new DoneCommand(Integer.parseInt(words[1]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(words[1]));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new FindCommand(words[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Task t \u003d parseTask(s);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return new AddCommand(t);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 101
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a Storage that perform reading and writing of data"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * from hard disk."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a Storage object with a file path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath A string that represents the path of the file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                where data is being stored and read from"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Read the tasks from the file to a ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A ArrayList of tasks as recorded in the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws A DukeException when file is not found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File file \u003d new File(this.path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String[] data \u003d scanner.nextLine().split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (data[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Todo todo \u003d new Todo(data[2]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (data[1].equals(\"1\")) todo.markAsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    taskList.add(todo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (data[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Deadline deadline \u003d new Deadline(data[2], data[3]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (data[1].equals(\"1\")) deadline.markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (data[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Event event \u003d new Event(data[2], data[3]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (data[1].equals(\"1\")) event.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Loading of task list is completed\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (FileNotFoundException error) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"There is a loading error\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Saves tasks from a \u003ccode\u003eTaskList\u003c/code\u003e to the local file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e storing tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If writing to the local file failed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveTasks(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File file \u003d new File(this.path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            PrintWriter writeIn \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Task task \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                writeIn.println(task.writeToFile());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            writeIn.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Fail to save tasks to hard disk\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 80
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Task(String description){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isDone(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract char type();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract String writeToFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 34
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It serves as a container of tasks.Can perform various operating"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * such as getter, adding, removing etc to the taskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a new TaskList with a default empty list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructor that takes in a ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList An existing ArrayList of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the ArrayList of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return TheArrayList of tasks stored"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A getter. To return task from taskList with given index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param An integer representing the index of the Task ."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return The Task in the list with this specific index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * An Adder. To add the argument Task to the taskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t The Task to be added to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A remover. Delete the task with the given index from the taskList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param An integer representing the index of the task to be removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void removeTask(int i) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskList.remove(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the size of taskList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return An integer representing the size of the taskList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 72
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public char type(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return \u0027T\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String writeToFile(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (super.isDone()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return type() + \" | 1 | \"  +  super.getDescription();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return type() + \" | 0 | \"  +  super.getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 24
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * The UI system that provides conversation with user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructer to initialize object UI and allow user to type command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows Greating message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String greeting \u003d \"Hello from I\u0027m Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display an loading error log when loading of data fails"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"There is a loading error\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Reads one line of user instruction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a string of user command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display a long dash line to divide the prompt message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"_____________________________________________________\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows that a Task is added to the task list, and then displays"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * that task and the number of tasks in task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t  The \u003ccode\u003eTask\u003c/code\u003e that is added to the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param size The number of tasks stored in the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showTaskAdded(Task t, int taskListSize) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Now you have \" + taskListSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows an error."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param str A string representing the description of the error."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showError(String str) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show the message of a Task that has been marked as \u0027done\u0027."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t A Task that has its status marked as \u0027done\u0027."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void markedAsDone(Task t) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n  \" + t);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows the removed task and the current number of tasks in the task list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t            The Task that is removed from the task list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskListSize the size of the task list which the Task t is being"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                     removed from."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showRemovedTask(Task t, int taskListSize) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(t);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Now you have \" + taskListSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Displays all tasks in the taskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList The TaskList that contains all the tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println((i + 1) + \". \" + taskList.getTask(i));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows search results for finding a keyword in the task list. Displays"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * all tasks that contain the keyword."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList  The TaskList where keyword is searched."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param keyword A string representation of the keyword."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showFoundResult(TaskList taskList, String keyword) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int i \u003d 0, j \u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Task t \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            boolean isFound \u003d Arrays.asList(t.description.toLowerCase().split(\" \")).contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (isFound) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(j + \". \" + t);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Shows exit message to user"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showByeMessage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 129
    }
  }
]
