[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.program.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Print intro text"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        printIntro();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // New file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String path \u003d new File(\"data/duke.txt\").getAbsolutePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Scanner read_line \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            // Read file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            ArrayList\u003cTask\u003e task_list \u003d FileLogic.read_file(file, path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            // main logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            input_parser(task_list, file, read_line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (ClassNotFoundException | IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            TaskLogic.printError(\"Error occurred in reading file.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        exitDuke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void input_parser(ArrayList\u003cTask\u003e task_list, File file, Scanner read_line) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // INPUT LOOP"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                // read input \u0026 tokenize"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                input \u003d read_line.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                String[] tokenized_input \u003d input.strip().split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    // List everything"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    TaskLogic.list(task_list);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                } else if (tokenized_input[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    // Marks task as Done"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    if (tokenized_input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.printError(\"The index of \u003cdone\u003e cannot be empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else if (!TaskLogic.IntValidator(tokenized_input[1])) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.printError(\"The index of \u003cdone\u003e is not a valid integer.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    TaskLogic.done(task_list, Integer.parseInt(tokenized_input[1]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    FileLogic.update_file(file, task_list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                } else if (tokenized_input[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    if (tokenized_input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.printError(\"The index of \u003cdelete\u003e cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else if (!TaskLogic.IntValidator(tokenized_input[1])) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.printError(\"The index of \u003cdelete\u003e is not a valid integer.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    TaskLogic.delete(task_list, Integer.parseInt(tokenized_input[1]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    FileLogic.update_file(file, task_list);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                } else if (tokenized_input[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    // Search task based on keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    if (tokenized_input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.printError(\"The value of \u003cfind\u003e cannot be empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    TaskLogic.find_task(task_list, tokenized_input[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    // Adds new Tasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    String desc;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    if (tokenized_input[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        if (input.strip().length() \u003c 5) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"The description of a \u003ctodo\u003e cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.add_task(task_list, TaskLogic.make_task(\"todo\", input.substring(5), \"\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        FileLogic.update_file(file, task_list);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else if (tokenized_input[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        if (tokenized_input.length \u003c 3) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"The description of a \u003cdeadline\u003e cannot be empty.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"Format: deadline \u003cdescription\u003e /by DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        tokenized_input \u003d input.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        if (tokenized_input.length \u003c 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"Incorrect format. Format should be: deadline \u003cdescription\u003e /by DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        } else if (!TaskLogic.DateValidator(tokenized_input[1])) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"Date format must be DD/MM/YYYY HHMM, E.g. 02/12/2019 1800\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.add_task(task_list, TaskLogic.make_task(\"deadline\", tokenized_input[0], tokenized_input[1]));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        FileLogic.update_file(file, task_list);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else if (tokenized_input[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        if (tokenized_input.length \u003c 3) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"The description of a \u003cevent\u003e cannot be empty.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"Format: event \u003cdescription\u003e /at DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        tokenized_input \u003d input.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        if (tokenized_input.length \u003c 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"Incorrect format. Format should be: event \u003cdescription\u003e /at DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        } else if (!TaskLogic.DateValidator(tokenized_input[1])) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            TaskLogic.printError(\"Date format must be DD/MM/YYYY HHMM, E.g. 02/12/2019 1800\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        TaskLogic.add_task(task_list, TaskLogic.make_task(\"event\", tokenized_input[0], tokenized_input[1]));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        FileLogic.update_file(file, task_list);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else if (input.equals(\"reset\")) { // Reset the list \u0026 delete file - for debug use"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        task_list \u003d TaskLogic.reset(task_list);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        FileLogic.reset_file(file);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        // Close scanner and exit programs"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        read_line.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                        throw new DukeException(\"\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"The system currently only supports the following formats:\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  todo \u003cdescription\u003e\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  deadline \u003cdescription\u003e /by \u003cdate\u003e\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  event \u003cdescription\u003e /at \u003cdate\u003e\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  list\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  done \u003cindex\u003e\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  delete \u003cindex\u003e\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  find \u003ckeyword\u003e\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                                + \"  reset\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            } catch (DukeException | IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                System.err.println(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void printIntro() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void exitDuke() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 173,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/program/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public DukeException(String err) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 7
    }
  },
  {
    "path": "src/main/java/duke/program/FileLogic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class FileLogic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "   public static ArrayList\u003cTask\u003e read_file(File file, String path) throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       ArrayList\u003cTask\u003e task_list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       if (file.exists()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           System.out.println(\"Loading file from : \" + path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           Scanner read_file \u003d new Scanner(file);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "               FileInputStream file_input \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "               ObjectInputStream object_input \u003d new ObjectInputStream(file_input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "               task_list \u003d (ArrayList\u003cTask\u003e) object_input.readObject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "               file_input.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "               object_input.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           } catch (IOException | ClassNotFoundException | NoClassDefFoundError e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "               TaskLogic.printError(\"File is empty/corrupted, starting from fresh...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           // Make directory \u0026 file if not exist"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           FileWriter write_file \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           write_file.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "           System.out.println(\"File not found. Making new file at : \" + path);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       return task_list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "   }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "   public static void update_file(File file, ArrayList\u003cTask\u003e task_list) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       FileOutputStream file_output \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "       ObjectOutputStream object_output \u003d new ObjectOutputStream(file_output);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        object_output.writeObject(task_list);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        file_output.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        object_output.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "   }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "   public static void reset_file(File file) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            FileWriter write_file \u003d new FileWriter(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            TaskLogic.printError(\"Error in resetting the file.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "   }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 65
    }
  },
  {
    "path": "src/main/java/duke/program/TaskLogic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.program;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class TaskLogic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void list(ArrayList\u003cTask\u003e task_list) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (task_list.size() !\u003d 0) { // Set task list boundary"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            for (int i \u003d 0; i \u003c task_list.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                Task t \u003d task_list.get(i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                System.out.println(\" \" + (i + 1) + \".\" + t.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(\"There is nothing in the list!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void done(ArrayList\u003cTask\u003e task_list, int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (task_list.size() \u003d\u003d 0 || index \u003c 1 || index \u003e task_list.size()) { // Set task list boundary"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            printError(\"Value is out of bounds.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            task_list.get(index - 1).setDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(\"  \" + task_list.get(index - 1).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void delete(ArrayList\u003cTask\u003e task_list, int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (task_list.size() \u003d\u003d 0 || index \u003c 1 || index \u003e task_list.size()) { // Set task list boundary"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            printError(\"Value is out of bounds.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(task_list.get(index - 1).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            task_list.remove(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void add_task(ArrayList\u003cTask\u003e task_list, Task t)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        task_list.add(t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Now you have \" + task_list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static Task make_task(String type, String desc, String date)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            t \u003d new Event(desc, DateMaker(date));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            t \u003d new Deadline(desc, DateMaker(date));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            t \u003d new Todo(desc);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"   \" + t.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void find_task(ArrayList\u003cTask\u003e task_list, String query) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        int search_hits \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        for (Task t : task_list) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            if (t.getDescription().contains(query)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                System.out.println(i + \".\" + t.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                search_hits +\u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        if (search_hits \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            printError(\"There is no tasks containing the keyword : \" + query);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static ArrayList\u003cTask\u003e reset(ArrayList\u003cTask\u003e task_list) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(\"Everything has been cleared!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static boolean IntValidator(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static boolean DateValidator(String date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            DateTimeFormatter date_format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            LocalDateTime.parse(date, date_format);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static LocalDateTime DateMaker (String date) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        DateTimeFormatter date_format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return LocalDateTime.parse(date, date_format);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static void printError(String err) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Able to change output type conveniently here"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        //System.out.println((char)27 + \"[31m\" + err);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(err);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 136
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public Deadline(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.toLocalDate().toString() + \" \" + date.toLocalTime().toString() + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 18
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public Event(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.toLocalDate().toString() + \" \" + date.toLocalTime().toString() + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 18
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 12
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.program.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    // Carriage Return Line Feed - edit this if test fails"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public static final String CRLF \u003d \"\\r\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testEmpty() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String input \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"reset\" + CRLF +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"list\" + CRLF +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"bye\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String output \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"____________________________________________________________\" + CRLF +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"____________________________________________________________\" + CRLF +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"Everything has been cleared!\" + CRLF +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"____________________________________________________________\" + CRLF +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"____________________________________________________________\" + CRLF +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"There is nothing in the list!\" + CRLF +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kuromono"
        },
        "content": "                \"____________________________________________________________\" + CRLF;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(output, initDuke(input));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        //System.out.println(initDuke(input));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public String initDuke(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // New file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        String path \u003d new File(\"data/duke.txt\").getAbsolutePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.out.println(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        // Input/Output Redirector"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Scanner read_line \u003d new Scanner(in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        PrintStream ps \u003d new PrintStream(out);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        PrintStream sysout \u003d System.out;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            // Read file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            ArrayList\u003cTask\u003e task_list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            // main logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kuromono"
        },
        "content": "            Duke.input_parser(task_list, file, read_line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        System.setOut(sysout);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 65
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.program.TaskLogic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Deadline_Test\", TaskLogic.DateMaker(\"21/10/1995 1844\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(deadline.toString(), \"[D][\\u2718] Deadline_Test (by: 1995-10-21 18:44)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(\"Deadline_Test\", deadline.getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Deadline_Test\", TaskLogic.DateMaker(\"21/10/1995 1844\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        deadline.setDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(\"[\\u2713]\", deadline.getStatusIcon()); // Tick"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 21
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import duke.program.TaskLogic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Event event \u003d new Event(\"Event_Test\", TaskLogic.DateMaker(\"21/10/1995 1844\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(event.toString(), \"[E][\\u2718] Event_Test (at: 1995-10-21 18:44)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(\"Event_Test\", event.getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Event event \u003d new Event(\"Event_Test\", TaskLogic.DateMaker(\"21/10/1995 1844\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        event.setDone();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(\"[\\u2713]\", event.getStatusIcon()); // Tick"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 21
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kuromono"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kuromono"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kuromono"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Todo todo \u003d new Todo(\"Todo_Test\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(todo.toString(), \"[T][\\u2718] Todo_Test\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(\"Todo_Test\", todo.getDescription());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kuromono"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        Todo todo \u003d new Todo(\"Todo_Test\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kuromono"
        },
        "content": "        assertEquals(\"[\\u2713]\", todo.getStatusIcon()); // Tick"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kuromono"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kuromono"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kuromono": 20
    }
  }
]
