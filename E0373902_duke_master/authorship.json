[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    public static void main(String[] args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        File file \u003d new File(\"C:\\\\Users\\\\0108s\\\\OneDrive\\\\Documents\\\\duke\\\\Level 7 help.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        String fileName \u003d \"C:\\\\Users\\\\0108s\\\\OneDrive\\\\Documents\\\\duke\\\\Level 7 help.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e(); //ArrayList of type Task called tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003cString\u003e(); //List of type string to store the tasks read from txt file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        String work;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        //read tasks from txt file and add to the List called list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            //FileReader fr \u003d new FileReader(\"C:\\\\Users\\\\0108s\\\\OneDrive\\\\Documents\\\\duke\\\\Level 7 help.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                while ((work \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    list.add(work);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            } catch (IOException e1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                e1.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        } catch (FileNotFoundException e1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        //add the tasks from list to the tasks arraylist i.e. adding tasks from the txt file to arraylist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String[] add_tasks \u003d list.get(i).split(\" \");//splits each line in the txt file by space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String u \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String ut \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            u \u003d add_tasks[2]; //T or D or E"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            ut \u003d add_tasks[5]; //X or tick"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String connector \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            for (int k \u003d 7; k \u003c add_tasks.length; k \u003d k + 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                connector \u003d connector + add_tasks[k] + \" \";/*to store the part of the string after deadline/todo/event"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                                             in a string called connector"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                                           */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String st \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String sr \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            if (connector.contains(\"(\")) { /*this if condition is to further split connector if it contains brackets(which means that it is a deadline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                             or event) to separate the description and the date/timing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                String[] arr \u003d connector.split(\":\");//split by \":\" as the date and timing comes after the \":\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                String p \u003d arr[0];//consists of the description + \"(by\" or \"(at\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                String[] arr1 \u003d p.split(\" \");//split by space to get the description only and not \"(by\" or \"(at\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                String q \u003d arr[1];//consists of the date and time + \")\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                String[] arr2 \u003d q.split(\" \");//split by space to get the description only and not \"(by\" or \"(at\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                for (int f \u003d 0; f \u003c arr1.length - 1; f \u003d f + 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    st \u003d st + arr1[f] + \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    /*join from 0th element to 2nd last element as we don\u0027t want the last element i.e."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    \"(by\" or \"(at\". This way just the description is stored in one string called st"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                for (int z \u003d 0; z \u003c arr2.length - 1; z \u003d z + 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    sr \u003d sr + arr2[z] + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    /*join from 0th element to 2nd last element as we don\u0027t want the last element i.e."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    \")\". This way just the date and time is stored in one string called sr"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                if (u.equals(\"D\")) { //this means that the Task is a deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    Task d \u003d new Deadline(st, sr);//initialize a new Deadline object with the strings st(description) and sr(date\u0026time)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    tasks.add(d); //add the Deadline object to the arraylist of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    if (ut.equals(\"\\u2713\")) { //if ut is a tick, it means the task is done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        d.markAsDone();//call the method markAsDone in the Task class in order to set the boolean value of isDone to true and return a tick in the getStatusIcon method"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                } else if (u.equals(\"E\")) { //this means that the Task is an event"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    Task ev \u003d new Event(st, sr);//initialize a new Event object with the strings st(description) and sr(date\u0026time)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    tasks.add(ev);//add the Event object to the arraylist of tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    if (ut.equals(\"\\u2713\")) { //if ut is a tick, it means the task is done."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        ev.markAsDone();//call the method markAsDone in the Task class in order to set the boolean value of isDone to true and return a tick in the getStatusIcon method"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            } else { //if connector doesn\u0027t contain a bracket"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                if (u.equals(\"T\")) { //this means the task is a todo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    Task t \u003d new ToDo(connector); //initialize a new todo object with the string connector as a todo only consists of description"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    tasks.add(t);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    if (ut.equals(\"\\u2713\")) { //if ut is a tick, it means the task is done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        t.markAsDone();//call the method markAsDone in the Task class in order to set the boolean value of isDone to true and return a tick in the getStatusIcon method"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);//takes input"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        while (true) {//while true means while there is an input or the input is not blank or null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String s \u003d input.nextLine();//new line of input"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String st \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String sr \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            String e \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            if (s.equals(\"bye\")) { //if the input equals to bye exit the program after printing out the following line"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                if (s.equals(\"list\")) { //if the input equals to list print the ArrayList tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    for (int i \u003d 0; i \u003c tasks.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        System.out.println((i + 1) + \".\" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    if (s.contains(\"/\")) {/*this if condition is to split the string s(which is the input) if it contains a \"/\"(which means that it is a deadline"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                             or event) to separate the description and the date/timing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String[] arr \u003d s.split(\"/\");//split by \"/\" as the date and timing comes after \"/by\" or \"/at\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String p \u003d arr[0];//consists of the type of task and the description"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String[] arr1 \u003d p.split(\" \");//split by space to separate the type of task and description"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String first \u003d arr1[0];//the type of task(ex: deadline) assigned to String first"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String q \u003d arr[1];// \"by\" + date and time"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String[] arr2 \u003d q.split(\" \");//split by space to get date\u0026time"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        sr \u003d arr2[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        for (int i \u003d 1; i \u003c arr1.length; i \u003d i + 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            st \u003d st + arr1[i] + \" \";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        for (int i \u003d 2; i \u003c arr.length; i \u003d i + 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            sr \u003d sr + \"/\" + arr[i]; //store date and time in the format 2/12/2019 1800"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String[] Date \u003d sr.split(\" \"); //separate date and time"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String sDate1 \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String time \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String time2 \u003d \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String diff \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String date_time \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        sDate1 \u003d Date[0];//date"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        time \u003d Date[1];//time"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        //convert date and time in the format 2nd of December 2019 6:00pm"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        Date date1 \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(sDate1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        cal.setTime(date1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        diff \u003d getFormattedDate(cal.getTime());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0373902"
        },
        "content": "//Date/time pattern of input date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        DateFormat df \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0373902"
        },
        "content": "//Date/time pattern of desired output date"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        DateFormat outputformat \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        Date date \u003d null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String output \u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            //Conversion of input String to date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            date \u003d df.parse(time);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            //old date format to new date format"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            output \u003d outputformat.format(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            pe.printStackTrace();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        date_time \u003d diff + \" \" + output;//join the changed format of date and the changed format of time and store it one string"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        if (first.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            Task w \u003d new Deadline(st, date_time);//initialize a new Deadline object with the strings st(description) and date_time(date\u0026time in a different format from the one in the input)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            tasks.add(w);//add the Deadline object to the arraylist of tasks"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            //overwrite txt file"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                BufferedWriter out \u003d new BufferedWriter("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        new FileWriter(fileName, false));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                for (int v \u003d 0; v \u003c tasks.size(); v \u003d v + 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    out.write((v + 1) + \". \" + tasks.get(v).toString() + \"\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                out.close();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } catch (IOException e1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                e1.printStackTrace();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(w.toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            time2 \u003d Date[3]; /*if the task is an event there will be 2 times starting and ending. time2 is the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            ending time while time is the starting time*/"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            DateFormat df1 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0373902"
        },
        "content": "//Date                      /time pattern of desired output date"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            DateFormat outputformat1 \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            Date date2 \u003d null;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            String output1 \u003d null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                //Conversion of input String to date"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                date2 \u003d df.parse(time2);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                //old date format to new date format"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                output1 \u003d outputformat.format(date2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                pe.printStackTrace();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            date_time \u003d date_time + \" - \" + output1;//join the date and starting time and ending time with a dash in between"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            Task ev \u003d new Event(st, date_time);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            tasks.add(ev);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            //overwrite txt file"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                BufferedWriter out \u003d new BufferedWriter("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        new FileWriter(fileName, true));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                for (int t \u003d 0; t \u003c\u003d tasks.size(); t \u003d t + 1) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    out.write((t + 1) + \". \" + tasks.get(t).toString() + \"\\n\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                out.close();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } catch (IOException e1) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                e1.printStackTrace();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(ev.toString());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String[] arr \u003d s.split(\" \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        String fir \u003d arr[0];"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        for (int i \u003d 1; i \u003c arr.length; i \u003d i + 1) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            e \u003d e + arr[i] + \" \";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        if (fir.equals(\"todo\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            if (e.equals(\"\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(t.cannotBeEmpty());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                Task todo \u003d new ToDo(e);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                tasks.add(todo);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                //overwrite txt file"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    BufferedWriter out \u003d new BufferedWriter("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            new FileWriter(fileName, true));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    for (int jk \u003d 0; jk \u003c tasks.size(); jk \u003d jk + 1) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        out.write((jk + 1) + \". \" + tasks.get(jk).toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    out.close();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                } catch (IOException e1) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    e1.printStackTrace();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(todo.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } else if (fir.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            if (e.equals(\"\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(t.cannotBeEmpty());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } else if (fir.equals(\"event\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            if (e.equals(\"\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(t.cannotBeEmpty());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } else if (fir.equals(\"Done\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            if (e.equals(\"\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(t.cannotBeEmpty());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                for (int i \u003d 0; i \u003c tasks.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    if (s.equals(\"Done \" + (i + 1))) { //means the (i+1)th index of arraylist tasks has to be marked as done"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        tasks.get(i).markAsDone(); //marks the (i + 1)th index of arraylist tasks is marked as done"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        //overwrite txt file so that there are no repetitions"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            BufferedWriter out \u003d new BufferedWriter("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                                    new FileWriter(fileName, false));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            for (int k \u003d 0; k \u003c tasks.size(); k \u003d k + 1) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                                out.write((k + 1) + \". \" + tasks.get(k).toString() + \"\\n\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            out.close();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        } catch (IOException e1) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            e1.printStackTrace();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        System.out.println(tasks.get(i).toString());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } else if (fir.equals(\"delete\")) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            if (e.equals(\"\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(t.cannotBeEmpty());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                for (int i \u003d 0; i \u003c tasks.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    if (s.equals(\"delete \" + (i + 1))) { //means the (i+1)th index of arraylist tasks has to be deleted"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        System.out.println(tasks.get(i).toString());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        tasks.remove(i);//removes the (i + 1)th index of arraylist tasks"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        //overwrite txt file"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            BufferedWriter out \u003d new BufferedWriter("
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                                    new FileWriter(fileName, false));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            for (int k \u003d 0; k \u003c tasks.size(); k \u003d k + 1) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                                out.write((k + 1) + \". \" + tasks.get(k).toString() + \"\\n\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            out.close();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        } catch (IOException e1) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                            e1.printStackTrace();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        } else if (fir.equals(\"find\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            if (e.equals(\"\")) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(t.cannotBeEmpty());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                String[] str \u003d s.split(\" \");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                String g \u003d str[1];"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                List\u003cString\u003e list1 \u003d new ArrayList\u003cString\u003e();//a List called list1 to store the strings that contain the word that comes after find/contain String g"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                for (int i \u003d 0; i \u003c tasks.size(); i \u003d i + 1) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    if (tasks.get(i).toString().contains(g)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                        list1.add(tasks.get(i).toString());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                for (int k \u003d 0; k \u003c list1.size(); k \u003d k + 1) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                    System.out.println((k + 1) + \". \" + list1.get(k));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                        }else { //if the string typed doesn\u0027t match with any of the commands above i.e. it is not a Duke command"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            DukeException t \u003d new DukeException(fir);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                            System.out.println(t.NotACommand());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    //to get the required format for the date"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    private static String getFormattedDate(Date date) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        Calendar cal\u003dCalendar.getInstance();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        cal.setTime(date);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        //2nd of march 2015"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        int day\u003dcal.get(Calendar.DATE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        if(!((day\u003e10) \u0026\u0026 (day\u003c19)))"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            switch (day % 10) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    return new SimpleDateFormat(\"d\u0027st\u0027 \u0027of\u0027 MMMM yyyy\").format(date);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    return new SimpleDateFormat(\"d\u0027nd\u0027 \u0027of\u0027 MMMM yyyy\").format(date);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    return new SimpleDateFormat(\"d\u0027rd\u0027 \u0027of\u0027 MMMM yyyy\").format(date);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0373902"
        },
        "content": "                    return new SimpleDateFormat(\"d\u0027th\u0027 \u0027of\u0027 MMMM yyyy\").format(date);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0373902"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        return new SimpleDateFormat(\"d\u0027th\u0027 \u0027of\u0027 MMMM yyyy\").format(date);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "E0373902": 339
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0373902"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0373902"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0373902"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0373902"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0373902"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0373902"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0373902": 11
    }
  }
]
