[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 26,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import IOUtils.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import command.TaskCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import command.UICommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static String savePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Storage storage \u003d new Storage(savePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UICommand.greet();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        TaskCommand taskCommand \u003d new TaskCommand(storage.readSavedTasks());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Scanner stdin \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (String text \u003d stdin.nextLine().trim(); !text.equals(\"bye\"); text \u003d stdin.nextLine().trim()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                taskCommand.execute(text);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                UICommand.talk(\"☹ OOPS!!! \" + ex.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        storage.writeTasks(taskCommand.getTaskHistory());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UICommand.goodbye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 28,
      "-": 4
    }
  },
  {
    "path": "src/main/java/IOUtils/DataReader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "// Slight modifications from GeeksforGeeks"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "// Use for fast data reading"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package IOUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.DataInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DataReader {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    final private int BUFFER_SIZE \u003d 1 \u003c\u003c 16;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private DataInputStream din;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private byte[] buffer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int bufferPointer, bytesRead;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DataReader() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        din \u003d new DataInputStream(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        buffer \u003d new byte[BUFFER_SIZE];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        bufferPointer \u003d bytesRead \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DataReader(String file_name) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        din \u003d new DataInputStream(new FileInputStream(file_name));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        buffer \u003d new byte[BUFFER_SIZE];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        bufferPointer \u003d bytesRead \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readLine() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.readLine(64);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String readLine(int length) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] buf \u003d new byte[length]; // line length"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int cnt \u003d 0, c;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while ((c \u003d read()) !\u003d -1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (c \u003d\u003d \u0027\\n\u0027)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            buf[cnt++] \u003d (byte) c;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return new String(buf, 0, cnt);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public int nextInt() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int ret \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte c \u003d read();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (c \u003c\u003d \u0027 \u0027)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            c \u003d read();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean neg \u003d (c \u003d\u003d \u0027-\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (neg)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            c \u003d read();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret \u003d ret * 10 + c - \u00270\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } while ((c \u003d read()) \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (neg)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return -ret;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public long nextLong() throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        long ret \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte c \u003d read();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (c \u003c\u003d \u0027 \u0027)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            c \u003d read();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean neg \u003d (c \u003d\u003d \u0027-\u0027);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (neg)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            c \u003d read();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret \u003d ret * 10 + c - \u00270\u0027;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while ((c \u003d read()) \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (neg)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return -ret;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public double nextDouble() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        double ret \u003d 0, div \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte c \u003d read();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while (c \u003c\u003d \u0027 \u0027)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            c \u003d read();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean neg \u003d (c \u003d\u003d \u0027-\u0027);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (neg)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            c \u003d read();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret \u003d ret * 10 + c - \u00270\u0027;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        while ((c \u003d read()) \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (c \u003d\u003d \u0027.\u0027) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            while ((c \u003d read()) \u003e\u003d \u00270\u0027 \u0026\u0026 c \u003c\u003d \u00279\u0027) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ret +\u003d (c - \u00270\u0027) / (div *\u003d 10);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (neg)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return -ret;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void fillBuffer() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        bytesRead \u003d din.read(buffer, bufferPointer \u003d 0, BUFFER_SIZE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (bytesRead \u003d\u003d -1)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            buffer[0] \u003d -1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private byte read() throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (bufferPointer \u003d\u003d bytesRead)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            fillBuffer();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return buffer[bufferPointer++];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void close() throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (din \u003d\u003d null)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        din.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 119
    }
  },
  {
    "path": "src/main/java/IOUtils/DataWriter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package IOUtils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.RandomAccessFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.ByteBuffer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.channels.FileChannel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.nio.channels.OverlappingFileLockException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DataWriter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private RandomAccessFile stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private FileChannel channel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private boolean lockingFile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DataWriter() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DataWriter(String fileName) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ArrayList\u003cObject\u003e ret \u003d DataWriter.createStreamChannelAuto(fileName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.stream \u003d (RandomAccessFile) ret.get(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.channel \u003d (FileChannel) ret.get(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.lockingFile \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static ArrayList\u003cObject\u003e createStreamChannelAuto(String fileName) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return DataWriter.createStreamChannel(fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (IOException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (!new File(fileName).createNewFile()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw new IOException(\"Could not create file \" + fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return DataWriter.createStreamChannel(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static ArrayList\u003cObject\u003e createStreamChannel(String fileName) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        RandomAccessFile stream \u003d new RandomAccessFile(fileName, \"rw\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        FileChannel channel \u003d stream.getChannel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ArrayList\u003cObject\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ret.add(stream);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ret.add(channel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void write(String value) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.stream \u003d\u003d null || this.channel \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new IOException(\"Uninitialized Writer\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.lockingFile) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            DataWriter.lockFile(this.stream, this.channel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.lockingFile \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] strBytes \u003d value.getBytes();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ByteBuffer buffer \u003d ByteBuffer.allocate(strBytes.length);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        buffer.put(strBytes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        buffer.flip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.channel.write(buffer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void write(String value, String fileName) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ArrayList\u003cObject\u003e ret \u003d DataWriter.createStreamChannelAuto(fileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        RandomAccessFile stream \u003d (RandomAccessFile) ret.get(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        FileChannel channel \u003d (FileChannel) ret.get(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DataWriter.lockFile(stream, channel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        byte[] strBytes \u003d value.getBytes();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ByteBuffer buffer \u003d ByteBuffer.allocate(strBytes.length);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        buffer.put(strBytes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        buffer.flip();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        channel.write(buffer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        stream.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        channel.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static void lockFile(RandomAccessFile stream, FileChannel channel) throws IOException{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            channel.tryLock();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (final OverlappingFileLockException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            stream.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            channel.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new IOException(\"Could not lock file\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void close() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.stream !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.stream.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.channel !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.channel.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.lockingFile \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 95
    }
  },
  {
    "path": "src/main/java/IOUtils/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package IOUtils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import command.TaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import command.UICommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void writeTasks(TaskList taskHistory) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        writeTasks(this.path, taskHistory);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList readSavedTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return readSavedTasks(this.path, new TaskList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList readSavedTasks(TaskList taskHistory) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return readSavedTasks(this.path, taskHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void writeTasks(String path, TaskList taskHistory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory \u003d\u003d null || taskHistory.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        DataWriter writer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer \u003d new DataWriter(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (IOException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (Task task: taskHistory) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                writer.write(task.getSaveForm() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (IOException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static TaskList readSavedTasks(String path, TaskList taskHistory) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            DataReader reader \u003d new DataReader(path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            TaskCommand taskCommand \u003d new TaskCommand(taskHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.toggleTalk(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (String line \u003d reader.readLine(); !line.isEmpty(); line \u003d reader.readLine()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                taskCommand.execute(line.substring(1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (line.charAt(0) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    TaskCommand.done(taskHistory, taskHistory.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.toggleTalk(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return taskHistory;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (IOException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (Throwable ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 75
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 2
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    Map\u003cString, String\u003e args;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Command(String command) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.fullCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.fullCommand \u003d command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.fullCommand.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new EmptyCommandException(\"I can\u0027t help you with an empty command...\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.command \u003d Parser.parseCommand(this.fullCommand).get(\"command\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.args \u003d Parser.parseArgs(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Object execute() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.execute(this.command, this.args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Object execute(String command) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.setCommand(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.execute(this.command, this.args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Object execute(String command, Map\u003cString, String\u003e arguments) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return this.getClass().getDeclaredMethod(command).invoke(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                catch (Throwable ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    return this.getClass().getDeclaredMethod(command, Map.class).invoke(this, arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                return this.getClass().getDeclaredMethod(command, Map.class).invoke(this, arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (NoSuchMethodException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new UnknownCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (InvocationTargetException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw (DukeException) ex.getCause();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            catch (Throwable ex0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw new UnknownException(ex.getCause(), false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (Throwable ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new UnknownException(ex, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 71
    }
  },
  {
    "path": "src/main/java/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Parser(String delimeter) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Map\u003cString, String\u003e parse(String command, boolean includeCommand, boolean includeArgs) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String commandClean \u003d command.strip();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int endCommandIndex \u003d commandClean.indexOf(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (endCommandIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            endCommandIndex \u003d commandClean.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (includeCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ret.put(\"command\", commandClean.substring(0, endCommandIndex));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        String[] commandComponents \u003d command.split(\" +\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (includeCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret.put(\"command\", commandClean.substring(0, endCommandIndex++));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (includeArgs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            commandClean \u003d commandClean.substring(endCommandIndex).strip();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String regex \u003d \" ?/[a-zA-Z]+ ?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(commandClean);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            int currIndex \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            String currArgument \u003d \"description\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            while (matcher.find()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (ret.containsKey(currArgument)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw DukeException.getFormattedException(MultipleValuesForSameArgumentException.class, DukeException.generateFormatMap(currArgument));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                ret.put(currArgument, commandClean.substring(currIndex, matcher.start()).strip());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                currArgument \u003d matcher.group().strip();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                currIndex \u003d matcher.end();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ret.put(currArgument, commandClean.substring(currIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Map\u003cString, String\u003e parseAll(String command) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return Parser.parse(command, true, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Map\u003cString, String\u003e parseArgs(String command) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return Parser.parse(command, false, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Map\u003cString, String\u003e parseCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return Parser.parse(command, true, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 62
    }
  },
  {
    "path": "src/main/java/command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import exception.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private TaskList taskHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static String horizontalLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(new TaskList());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskCommand(TaskList taskHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory !\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.taskHistory \u003d taskHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.taskHistory \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(command, new TaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskCommand(String command, TaskList taskHistory) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.taskHistory \u003d taskHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskList getTaskHistory() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.taskHistory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void setTaskHistory(TaskList taskHistory) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            this.taskHistory \u003d taskHistory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void list(TaskList taskHistory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talk(\"You currently have no tasks on your task list\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(TaskCommand.horizontalLine);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talkNoLine(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            for (int i \u003d 0; i \u003c taskHistory.size(); ++i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                UICommand.talkNoLine(i + 1 + \".\" + taskHistory.get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(TaskCommand.horizontalLine);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        list(this.taskHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void done(TaskList taskHistory, int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(InvalidCommandArgumentException.class, \"index\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new TaskListEmptyException(\"You currently have no tasks on your task list! Nothing to do\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Task finishedTask \u003d taskHistory.get(taskIndex - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            finishedTask.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talk(\"Nice! I\u0027ve marked this task as done:\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n       \" + finishedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(TaskIndexOutOfBoundException.class, String.valueOf(taskHistory.size()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void done(Map\u003cString, String\u003e args) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String taskIndex \u003d args.get(\"description\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskIndex \u003d\u003d null || taskIndex.isBlank()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(EmptyIndexException.class, \"done [taskIndex]\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            done(this.taskHistory, Integer.parseUnsignedInt(taskIndex));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(InvalidCommandArgumentException.class, \"index\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void todo(TaskList taskHistory, String description) throws EmptyTaskException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (description \u003d\u003d null || description.isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(EmptyTaskException.class, \"todo\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        ToDos task \u003d new ToDos(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        taskHistory.add(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int nofTasks \u003d taskHistory.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UICommand.talk(\"Got it. I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n       \" + task +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n     Now you have \" + nofTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void todo(Map\u003cString, String\u003e args) throws EmptyTaskException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        todo(this.taskHistory, args.get(\"description\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void deadline(TaskList taskHistory, String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (description \u003d\u003d null || description.isBlank()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(EmptyTaskException.class, \"deadline\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (by \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Map\u003cString, String\u003e format \u003d DukeException.generateFormatMap(\"deadline [task] /by [time]\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            format.put(\"argument\", \"/by\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(MissingArgumentException.class, format);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int nofTasks;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Deadlines task \u003d new Deadlines(description, new DateTime(by).getTimeString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            taskHistory.add(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            nofTasks \u003d taskHistory.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talk(\"Got it. I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n       \" + task +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n     Now you have \" + nofTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NotADateException ex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Deadlines task \u003d new Deadlines(description.trim(), by);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            taskHistory.add(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            nofTasks \u003d taskHistory.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Map\u003cString, String\u003e format \u003d DukeException.generateFormatMap(\"deadline\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            format.put(\"task\", task.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            format.put(\"nofTasks\", String.valueOf(nofTasks));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (by.isBlank()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw DukeException.getFormattedException(EmptyTimeException.class, format);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(NotADateException.class, format);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void deadline(Map\u003cString, String\u003e args) throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        deadline(this.taskHistory, args.get(\"description\"), args.get(\"/by\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void event(TaskList taskHistory, String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (description \u003d\u003d null || description.isBlank()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(EmptyTaskException.class, \"event\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (at \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Map\u003cString, String\u003e format \u003d DukeException.generateFormatMap(\"event [task] /at [time]\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            format.put(\"argument\", \"/at\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(MissingArgumentException.class, format);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int nofTasks;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Events task \u003d new Events(description, new DateTime(at).getTimeString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            taskHistory.add(task);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            nofTasks \u003d taskHistory.size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talk(\"Got it. I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n       \" + task +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n     Now you have \" + nofTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        } catch (NotADateException ex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Events task \u003d new Events(description.trim(), at);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            taskHistory.add(task);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            nofTasks \u003d taskHistory.size();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Map\u003cString, String\u003e format \u003d DukeException.generateFormatMap(\"event\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            format.put(\"task\", task.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            format.put(\"nofTasks\", String.valueOf(nofTasks));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (at.isBlank()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw DukeException.getFormattedException(EmptyTimeException.class, format);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(NotADateException.class, format);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void event(Map\u003cString, String\u003e args) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        event(this.taskHistory, args.get(\"description\"), args.get(\"/at\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static Task delete(TaskList taskHistory, int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(InvalidCommandArgumentException.class, \"index\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory.isEmpty()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new TaskListEmptyException(\"You currently have no tasks on your task list! Nothing to do\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            Task removedTask \u003d taskHistory.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talk(\"Noted. I\u0027ve removed this task:\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n       \" + removedTask +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    \"\\n     Now you have \" + taskHistory.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return removedTask;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(TaskIndexOutOfBoundException.class, String.valueOf(taskHistory.size()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Task delete(Map\u003cString, String\u003e args) throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String taskIndex \u003d args.get(\"description\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskIndex \u003d\u003d null || taskIndex.isBlank()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(EmptyIndexException.class, \"delete [taskIndex]\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return delete(this.taskHistory, Integer.parseUnsignedInt(taskIndex));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(InvalidCommandArgumentException.class, \"index\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void find(Map\u003cString, String\u003e args) throws DukeException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        find(this.taskHistory, args.get(\"description\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void find(TaskList taskHistory, String keyword) throws DukeException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (keyword \u003d\u003d null || keyword.isBlank()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw DukeException.getFormattedException(EmptyKeywordException.class, \"find [keyword]\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (taskHistory.isEmpty()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new TaskListEmptyException(\"You currently have no tasks on your task list\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        boolean foundOne \u003d false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        for (Task task: taskHistory) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (!foundOne) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    UICommand.talkLine();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    UICommand.talkNoLine(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    foundOne \u003d true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                UICommand.talkNoLine(i++ + \".\" + task);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!foundOne) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new TaskNotFound(\"There are no matching tasks for that keyword! Try something else?\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UICommand.talkLine();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 242
    }
  },
  {
    "path": "src/main/java/command/UICommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UICommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static String horizontalLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static boolean talkStatus \u003d true;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void toggleTalk(boolean status) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        UICommand.talkStatus \u003d status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        talk(\"Hello! I\u0027m Duke\\n     What can I do for you?\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void goodbye() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        talk(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void talk(String text) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        talkOptional(text, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void talkNoLine(String text) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        talkOptional(text, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void talkOptional(String text, boolean line) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!UICommand.talkStatus) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talkLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(\"     \" + text);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (line) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            UICommand.talkLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void talkNormal(Object message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static void talkLine() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!UICommand.talkStatus) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        System.out.println(horizontalLine);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 50
    }
  },
  {
    "path": "src/main/java/datetime/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import exception.NotADateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String format \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int year \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String month \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int day \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String weekday \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int hour \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int minute \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private int second \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String ampm \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DateTime(String dateTime) throws NotADateException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (dateTime.contains(\"am\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (dateTime.contains(\"pm\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw new NotADateException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ampm \u003d \"am\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        else if (dateTime.contains(\"pm\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            ampm \u003d \"pm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String[] dateInfos \u003d dateTime.replace(\"am\", \"\").replace(\"pm\", \"\").trim().split(\" */ *| *- *\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (dateInfos.length \u003e 4) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            throw new NotADateException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (dateInfos.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                int tmp \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (tmp \u003e 12) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        throw new NotADateException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    String currHour \u003d DateTime.getTimeAMPM(this.time.getHour(), 0, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int currHourValue \u003d Integer.parseInt(currHour.substring(0, currHour.length() - 2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (currHourValue \u003e\u003d tmp \u0026\u0026 !(currHour.substring(currHour.length() - 2).equals(\"am\") \u0026\u0026 this.ampm.equals(\"pm\"))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.time \u003d this.time.plusDays(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.updateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.minute \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.second \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (this.ampm.equals(\"am\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.hour \u003d tmp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    else if (this.hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.hour \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.hour \u003d tmp + 12;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                else if (0 \u003c tmp \u0026\u0026 tmp \u003c 32) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (this.time.getDayOfMonth() \u003e tmp) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.time \u003d this.time.plusMonths(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.updateTime();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.day \u003d tmp;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.year \u003d tmp;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                dateInfos \u003d dateTime.replace(\"am\", \"\").replace(\"pm\", \"\").trim().split(\" *: *\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (dateInfos.length \u003c 2 || dateInfos.length \u003e 3) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new NotADateException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (dateInfos.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int first \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int second \u003d Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int lim \u003d 13;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int limMin \u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        if (this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            lim \u003d 24;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            limMin \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        if (60 \u003e second \u0026\u0026 second \u003e lim - 1 \u0026\u0026 limMin \u003c\u003d first \u0026\u0026 first \u003c lim) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.format \u003d \"H\".repeat(firstLength) + \":\" + \"m\".repeat(secondLength);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        } else if (60 \u003e first \u0026\u0026 first \u003e lim - 1 \u0026\u0026 limMin \u003c\u003d second \u0026\u0026 second \u003c lim) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.format \u003d \"m\".repeat(firstLength) + \":\" + \"H\".repeat(secondLength);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        } else if (60 \u003e second \u0026\u0026 second \u003e\u003d 0 \u0026\u0026 limMin \u003c\u003d first \u0026\u0026 first \u003c lim) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.format \u003d \"H\".repeat(firstLength) + \":\" + \"m\".repeat(secondLength);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            throw new NotADateException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        Integer.parseInt(dateInfos[2]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int thirdLength \u003d dateInfos[2].length();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.format \u003d \"H\".repeat(firstLength) + \":\" + \"m\".repeat(secondLength) + \":\" + \"s\".repeat(thirdLength);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    String timeTmp \u003d String.join(\":\", dateInfos);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.time \u003d LocalDateTime.of(LocalDate.now(), LocalTime.parse(timeTmp, timeFormat));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.hour \u003d this.time.getHour();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (this.ampm.equals(\"pm\") \u0026\u0026 this.hour \u003c 12) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.hour \u003d this.time.getHour() + 12;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int currHour \u003d LocalDateTime.now().getHour();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (currHour \u003e this.hour || currHour \u003d\u003d this.hour \u0026\u0026 LocalDateTime.now().getMinute() \u003e this.time.getMinute()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            || LocalDateTime.now().getMinute() \u003d\u003d this.time.getMinute() \u0026\u0026 LocalDateTime.now().getSecond() \u003e\u003d this.time.getSecond()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.time \u003d this.time.plusDays(1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.updateTime();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (this.ampm.equals(\"pm\") \u0026\u0026 this.hour \u003c 12) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.hour \u003d this.time.getHour() + 12;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                catch (NumberFormatException ex0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new NotADateException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (dateInfos.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        throw new NotADateException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int first \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int second \u003d Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    String currYear \u003d String.valueOf(LocalDate.now().getYear());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    int currYearFormat \u003d currYear.length();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.format \u003d \"y\".repeat(currYearFormat) + \"/\" + DateTime.dateMonthFormat(first, second, firstLength, secondLength);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.time \u003d LocalDateTime.of(LocalDate.parse(currYear + \"/\" + first + \"/\" + second, timeFormat), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (this.time.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.time \u003d this.time.plusYears(1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.updateTime();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                else if (dateInfos.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    String[] begin \u003d dateInfos[0].replaceAll(\" *:\", \":\").replaceAll(\": *\", \":\").split(\" +\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    String[] end \u003d dateInfos[dateInfos.length - 1].replaceAll(\" *:\", \":\").replaceAll(\": *\", \":\").split(\" +\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    if (begin.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        DateTime timeHour \u003d new DateTime(begin[0] + this.ampm);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        List\u003cString\u003e dayInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        dayInfo.add(begin[1]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        dayInfo.addAll(Arrays.asList(dateInfos).subList(1, dateInfos.length));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        DateTime timeDay \u003d new DateTime(String.join(\"/\", dayInfo));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.updateHourDay(timeHour, timeDay);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    } else if (end.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        DateTime timeHour \u003d new DateTime(end[1] + this.ampm);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        List\u003cString\u003e dayInfo \u003d new ArrayList\u003c\u003e(Arrays.asList(dateInfos).subList(0, dateInfos.length - 1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        dayInfo.add(end[0]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        DateTime timeDay \u003d new DateTime(String.join(\"/\", dayInfo));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.updateHourDay(timeHour, timeDay);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            throw new NotADateException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int first \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int second \u003d Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int third \u003d Integer.parseInt(dateInfos[2]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        int thirdLength \u003d dateInfos[2].length();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        if (first \u003e third) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.format \u003d \"y\".repeat(firstLength) + \"/\" + DateTime.dateMonthFormat(second, third, secondLength, thirdLength);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.time \u003d LocalDateTime.of(LocalDate.parse(first + \"/\" + second + \"/\" + third, timeFormat), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.format \u003d \"y\".repeat(thirdLength) + \"/\" + DateTime.dateMonthFormat(first, second, firstLength, secondLength);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                            this.time \u003d LocalDateTime.of(LocalDate.parse(third + \"/\" + first + \"/\" + second, timeFormat), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                        this.updateTime();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new NotADateException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw new NotADateException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private static String dateMonthFormat(int first, int second, int firstLength, int secondLength) throws NotADateException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (32 \u003e first \u0026\u0026 first \u003e 12 \u0026\u0026 0 \u003c second \u0026\u0026 second \u003c 13) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"d\".repeat(firstLength) + \"/\" + \"M\".repeat(secondLength);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (32 \u003e second \u0026\u0026 second \u003e 12 \u0026\u0026 0 \u003c first \u0026\u0026 first \u003c 13) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"M\".repeat(firstLength) + \"/\" + \"d\".repeat(secondLength);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (first \u003e 31 \u0026\u0026 0 \u003c second \u0026\u0026 second \u003c 13) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"y\".repeat(firstLength) + \"/\" + \"M\".repeat(secondLength);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (second \u003e 31 \u0026\u0026 0 \u003c first \u0026\u0026 first \u003c 13) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"M\".repeat(firstLength) + \"/\" + \"y\".repeat(secondLength);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (0 \u003c first \u0026\u0026 first \u003c 32 \u0026\u0026 0 \u003c second \u0026\u0026 second \u003c 13) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"d\".repeat(firstLength) + \"/\" + \"M\".repeat(secondLength);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        throw new NotADateException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void updateHourDay(DateTime timeHour, DateTime timeDay) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.hour \u003d timeHour.hour;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.minute \u003d timeHour.minute;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.second \u003d timeHour.second;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.year \u003d timeDay.year;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.month \u003d timeDay.month;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.day \u003d timeDay.day;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.weekday \u003d timeDay.weekday;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private void updateTime() throws NotADateException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.hour \u003d this.time.getHour();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.ampm.equals(\"am\") \u0026\u0026 (this.hour \u003e 12 || this.hour \u003c 1)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                throw new NotADateException();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            if (this.ampm.equals(\"pm\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (this.hour \u003e 12 || this.hour \u003c 1) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    throw new NotADateException();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                if (this.hour \u003c 12) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    this.hour +\u003d 12;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.year \u003d this.time.getYear();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.month \u003d this.time.getMonth().toString();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.month \u003d this.month.charAt(0) + this.month.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.day \u003d this.time.getDayOfMonth();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.weekday \u003d this.time.getDayOfWeek().name();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.weekday \u003d this.weekday.charAt(0) + this.weekday.substring(1, 3).toLowerCase();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.minute \u003d this.time.getMinute();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.second \u003d this.time.getSecond();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getDaySuffix(int x) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (x % 100 \u003d\u003d 11 || x % 100 \u003d\u003d 12 || x % 100 \u003d\u003d 13) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (x % 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (x % 10 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (x % 10 \u003d\u003d 3) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"th\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getTimeAMPM(int hour, int minute, int second) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String afterHour \u003d \"\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (second !\u003d 0) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            afterHour \u003d minute + \":\" + second;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        else if (minute !\u003d 0) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            afterHour \u003d String.valueOf(minute);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (afterHour.equals(\"\") \u0026\u0026 hour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (!afterHour.isEmpty()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            afterHour \u003d \":\" + afterHour;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (hour \u003c 12) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return hour + afterHour + \"am\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        else if (hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return hour + afterHour + \"pm\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return hour - 12 + afterHour + \"pm\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.month.equals(\"\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return String.valueOf(this.year);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        String timeHour \u003d getTimeAMPM(this.hour, this.minute, this.second);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (timeHour.equals(\"\")) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return this.weekday + \", \" + this.day + DateTime.getDaySuffix(this.day) + \" of \" + this.month + \" \" + this.year;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.weekday + \", \" + this.day + DateTime.getDaySuffix(this.day) + \" of \" + this.month + \" \" + this.year + \", \" + timeHour;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 305
    }
  },
  {
    "path": "src/main/java/datetime/DateTimeImproved.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import exception.NotADateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//public class DateTimeImproved {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private LocalDateTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private String format \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private int year \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private String month \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private int day \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private String weekday \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private int hour \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private int minute \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private int second \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private String ampm \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    public DateTimeImproved(String dateTime) throws NotADateException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (dateTime.contains(\"am\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            if (dateTime.contains(\"pm\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                throw new NotADateException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            ampm \u003d \"am\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        else if (dateTime.contains(\"pm\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            ampm \u003d \"pm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        String[] dateInfos \u003d dateTime.replace(\" *am *\", \"\").replace(\" *pm *\", \"\").replaceAll(\" */ *\", \"/\").replaceAll(\" *- *\", \"-\").replaceAll(\" *: *\", \":\").trim().replaceAll(\"[ ]{2,}\", \" \").split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (dateInfos.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            //date only or hour only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (dateInfos.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            //date and hour"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            throw new NotADateException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (dateInfos.length \u003e 4) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            throw new NotADateException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (dateInfos.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                int tmp \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (tmp \u003e 12) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        throw new NotADateException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    String currHour \u003d DateTimeImproved.getTimeAMPM(this.time.getHour(), 0, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int currHourValue \u003d Integer.parseInt(currHour.substring(0, currHour.length() - 2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (currHourValue \u003e\u003d tmp \u0026\u0026 !(currHour.substring(currHour.length() - 2).equals(\"am\") \u0026\u0026 this.ampm.equals(\"pm\"))) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.time \u003d this.time.plusDays(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.updateTime();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.minute \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.second \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (this.ampm.equals(\"am\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.hour \u003d tmp;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    else if (this.hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.hour \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.hour \u003d tmp + 12;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                else if (0 \u003c tmp \u0026\u0026 tmp \u003c 32) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (this.time.getDayOfMonth() \u003e tmp) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.time \u003d this.time.plusMonths(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.updateTime();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.day \u003d tmp;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.year \u003d tmp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                dateInfos \u003d dateTime.replace(\"am\", \"\").replace(\"pm\", \"\").trim().split(\" *: *\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                if (dateInfos.length \u003c 2 || dateInfos.length \u003e 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    throw new NotADateException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (dateInfos.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int first \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int second \u003d Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int lim \u003d 13;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int limMin \u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        if (this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            lim \u003d 24;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            limMin \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        if (60 \u003e second \u0026\u0026 second \u003e lim - 1 \u0026\u0026 limMin \u003c\u003d first \u0026\u0026 first \u003c lim) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.format \u003d \"H\".repeat(firstLength) + \":\" + \"m\".repeat(secondLength);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        } else if (60 \u003e first \u0026\u0026 first \u003e lim - 1 \u0026\u0026 limMin \u003c\u003d second \u0026\u0026 second \u003c lim) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.format \u003d \"m\".repeat(firstLength) + \":\" + \"H\".repeat(secondLength);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        } else if (60 \u003e second \u0026\u0026 second \u003e\u003d 0 \u0026\u0026 limMin \u003c\u003d first \u0026\u0026 first \u003c lim) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.format \u003d \"H\".repeat(firstLength) + \":\" + \"m\".repeat(secondLength);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            throw new NotADateException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        Integer.parseInt(dateInfos[2]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int thirdLength \u003d dateInfos[2].length();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.format \u003d \"H\".repeat(firstLength) + \":\" + \"m\".repeat(secondLength) + \":\" + \"s\".repeat(thirdLength);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    String timeTmp \u003d String.join(\":\", dateInfos);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.time \u003d LocalDateTime.of(LocalDate.now(), LocalTime.parse(timeTmp, timeFormat));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.hour \u003d this.time.getHour();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (this.ampm.equals(\"pm\") \u0026\u0026 this.hour \u003c 12) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.hour \u003d this.time.getHour() + 12;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int currHour \u003d LocalDateTime.now().getHour();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (currHour \u003e this.hour || currHour \u003d\u003d this.hour \u0026\u0026 LocalDateTime.now().getMinute() \u003e this.time.getMinute()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            || LocalDateTime.now().getMinute() \u003d\u003d this.time.getMinute() \u0026\u0026 LocalDateTime.now().getSecond() \u003e\u003d this.time.getSecond()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.time \u003d this.time.plusDays(1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.updateTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (this.ampm.equals(\"pm\") \u0026\u0026 this.hour \u003c 12) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.hour \u003d this.time.getHour() + 12;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                catch (NumberFormatException ex0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    throw new NotADateException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                if (dateInfos.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        throw new NotADateException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int first \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int second \u003d Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    String currYear \u003d String.valueOf(LocalDate.now().getYear());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    int currYearFormat \u003d currYear.length();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.format \u003d \"y\".repeat(currYearFormat) + DateTimeImproved.dateMonthFormat(first, second, firstLength, secondLength);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.time \u003d LocalDateTime.of(LocalDate.parse(currYear + \"/\" + first + \"/\" + second, timeFormat), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (this.time.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.time \u003d this.time.plusYears(1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.updateTime();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                else if (dateInfos.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    String[] begin \u003d dateInfos[0].replaceAll(\" *:\", \":\").replaceAll(\": *\", \":\").split(\" +\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    String[] end \u003d dateInfos[dateInfos.length - 1].replaceAll(\" *:\", \":\").replaceAll(\": *\", \":\").split(\" +\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    if (begin.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        DateTimeImproved timeHour \u003d new DateTimeImproved(begin[0] + this.ampm);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        List\u003cString\u003e dayInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        dayInfo.add(begin[1]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        dayInfo.addAll(Arrays.asList(dateInfos).subList(1, dateInfos.length));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        DateTimeImproved timeDay \u003d new DateTimeImproved(String.join(\"/\", dayInfo));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.updateHourDay(timeHour, timeDay);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    } else if (end.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        DateTimeImproved timeHour \u003d new DateTimeImproved(end[1] + this.ampm);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        List\u003cString\u003e dayInfo \u003d new ArrayList\u003c\u003e(Arrays.asList(dateInfos).subList(0, dateInfos.length - 1));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        dayInfo.add(end[0]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        DateTimeImproved timeDay \u003d new DateTimeImproved(String.join(\"/\", dayInfo));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.updateHourDay(timeHour, timeDay);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            throw new NotADateException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int first \u003d Integer.parseInt(dateInfos[0]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int second \u003d Integer.parseInt(dateInfos[1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int third \u003d Integer.parseInt(dateInfos[2]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int firstLength \u003d dateInfos[0].length();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int secondLength \u003d dateInfos[1].length();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        int thirdLength \u003d dateInfos[2].length();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        if (first \u003e third) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.format \u003d \"y\".repeat(firstLength) + \"/\" + DateTimeImproved.dateMonthFormat(second, third, secondLength, thirdLength);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.time \u003d LocalDateTime.of(LocalDate.parse(first + \"/\" + second + \"/\" + third, timeFormat), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.format \u003d \"y\".repeat(thirdLength) + \"/\" + DateTimeImproved.dateMonthFormat(first, second, firstLength, secondLength);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(this.format);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                            this.time \u003d LocalDateTime.of(LocalDate.parse(third + \"/\" + first + \"/\" + second, timeFormat), LocalTime.of(0, 0));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                        this.updateTime();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    throw new NotADateException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                throw new NotADateException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private static String dateMonthFormat(int first, int second, int firstLength, int secondLength) throws NotADateException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (32 \u003e first \u0026\u0026 first \u003e 12 \u0026\u0026 0 \u003c second \u0026\u0026 second \u003c 13) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"d\".repeat(firstLength) + \"/\" + \"M\".repeat(secondLength);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (32 \u003e second \u0026\u0026 second \u003e 12 \u0026\u0026 0 \u003c first \u0026\u0026 first \u003c 13) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"M\".repeat(firstLength) + \"/\" + \"d\".repeat(secondLength);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (first \u003e 31 \u0026\u0026 0 \u003c second \u0026\u0026 second \u003c 13) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"y\".repeat(firstLength) + \"/\" + \"M\".repeat(secondLength);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (second \u003e 31 \u0026\u0026 0 \u003c first \u0026\u0026 first \u003c 13) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"M\".repeat(firstLength) + \"/\" + \"y\".repeat(secondLength);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (0 \u003c first \u0026\u0026 first \u003c 32 \u0026\u0026 0 \u003c second \u0026\u0026 second \u003c 13) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"d\".repeat(firstLength) + \"/\" + \"M\".repeat(secondLength);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        throw new NotADateException();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private void updateHourDay(DateTimeImproved timeHour, DateTimeImproved timeDay) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.hour \u003d timeHour.hour;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.minute \u003d timeHour.minute;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.second \u003d timeHour.second;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.year \u003d timeDay.year;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.month \u003d timeDay.month;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.day \u003d timeDay.day;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.weekday \u003d timeDay.weekday;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    private void updateTime() throws NotADateException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.hour \u003d this.time.getHour();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (!this.ampm.equals(\"\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            if (this.ampm.equals(\"am\") \u0026\u0026 (this.hour \u003e 12 || this.hour \u003c 1)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                throw new NotADateException();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            if (this.ampm.equals(\"pm\")) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                if (this.hour \u003e 12 || this.hour \u003c 1) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    throw new NotADateException();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                if (this.hour \u003c 12) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                    this.hour +\u003d 12;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.year \u003d this.time.getYear();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.month \u003d this.time.getMonth().toString();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.month \u003d this.month.charAt(0) + this.month.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.day \u003d this.time.getDayOfMonth();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.weekday \u003d this.time.getDayOfWeek().name();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.weekday \u003d this.weekday.charAt(0) + this.weekday.substring(1, 3).toLowerCase();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.minute \u003d this.time.getMinute();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        this.second \u003d this.time.getSecond();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    public static String getDaySuffix(int x) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (x % 100 \u003d\u003d 11 || x % 100 \u003d\u003d 12 || x % 100 \u003d\u003d 13) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"th\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (x % 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"st\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (x % 10 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"nd\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (x % 10 \u003d\u003d 3) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"rd\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        return \"th\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    public static String getTimeAMPM(int hour, int minute, int second) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        String afterHour \u003d \"\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (second !\u003d 0) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            afterHour \u003d minute + \":\" + second;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        else if (minute !\u003d 0) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            afterHour \u003d String.valueOf(minute);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (afterHour.equals(\"\") \u0026\u0026 hour \u003d\u003d 0) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return \"\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (!afterHour.isEmpty()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            afterHour \u003d \":\" + afterHour;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (hour \u003c 12) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return hour + afterHour + \"am\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        else if (hour \u003d\u003d 12) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return hour + afterHour + \"pm\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        return hour - 12 + afterHour + \"pm\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    public String getTimeString() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (this.month.equals(\"\")) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return String.valueOf(this.year);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        String timeHour \u003d getTimeAMPM(this.hour, this.minute, this.second);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        if (timeHour.equals(\"\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//            return this.weekday + \", \" + this.day + DateTimeImproved.getDaySuffix(this.day) + \" of \" + this.month + \" \" + this.year;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//        return this.weekday + \", \" + this.day + DateTimeImproved.getDaySuffix(this.day) + \" of \" + this.month + \" \" + this.year + \", \" + timeHour;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 316
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class DukeException extends Throwable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public DukeException(Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    protected DukeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message, cause, enableSuppression, writableStackTrace);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static \u003cE extends DukeException\u003e E getFormattedException(Class\u003cE\u003e clazz, Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return clazz.getConstructor(String.class).newInstance(clazz.getMethod(\"getFormattedString\", Map.class).invoke(null, format));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (Throwable ex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static \u003cE extends DukeException\u003e E getFormattedException(Class\u003cE\u003e clazz, String format) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return clazz.getConstructor(String.class).newInstance(clazz.getMethod(\"getFormattedString\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                    Map.class).invoke(null, DukeException.generateFormatMap(format)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        catch (Throwable ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static Map\u003cString, String\u003e generateFormatMap(String format) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        Map\u003cString, String\u003e formatMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        formatMap.put(\"format\", format);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return formatMap;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 56
    }
  },
  {
    "path": "src/main/java/exception/EmptyCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EmptyCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EmptyCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 7
    }
  },
  {
    "path": "src/main/java/exception/EmptyIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EmptyIndexException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EmptyIndexException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"Missing task index. Please ensure you have followed the format \u0027\" + format.get(\"format\") + \"\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/exception/EmptyKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EmptyKeywordException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EmptyKeywordException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"Missing keyword to search. Please ensure you have followed the format \u0027\" + format.get(\"format\") + \"\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/exception/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EmptyTaskException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"The description of a \" + format.get(\"format\") + \" cannot be empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public EmptyTimeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (\"Warning: No time specified, \" + format.get(\"format\") + \" will be added without time\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n\\n     I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n       \" + format.get(\"task\") +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n     Now you have \" + format.get(\"nofTasks\") + \" tasks in the list.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 16
    }
  },
  {
    "path": "src/main/java/exception/InvalidCommandArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class InvalidCommandArgumentException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public InvalidCommandArgumentException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"Invalid \" + format.get(\"format\") + \" argument! Please check your input\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/exception/MissingArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class MissingArgumentException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public MissingArgumentException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"Missing \" + format.get(\"argument\") + \" argument. Please ensure you have followed the format \u0027\" + format.get(\"format\") + \"\u0027\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 13
    }
  },
  {
    "path": "src/main/java/exception/MultipleValuesForSameArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class MultipleValuesForSameArgumentException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public MultipleValuesForSameArgumentException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"Cannot assign multiple values for \" + format.get(\"format\") + \"!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 14
    }
  },
  {
    "path": "src/main/java/exception/NotADateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class NotADateException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public NotADateException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public NotADateException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (\"I could not understand that time format! Still adding task anyway...\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n\\n     I\u0027ve added this task:\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n       \" + format.get(\"task\") +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"\\n     Now you have \" + format.get(\"nofTasks\") + \" tasks in the list.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 20
    }
  },
  {
    "path": "src/main/java/exception/TaskIndexOutOfBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskIndexOutOfBoundException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskIndexOutOfBoundException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public static String getFormattedString(Map\u003cString, String\u003e format) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (\"That index is not applicable for your current task list\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "                \"     You currently have \" + format.get(\"format\") + \" task(s) in your task list\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 14
    }
  },
  {
    "path": "src/main/java/exception/TaskListEmptyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskListEmptyException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskListEmptyException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 7
    }
  },
  {
    "path": "src/main/java/exception/TaskNotFound.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskNotFound extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public TaskNotFound(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 7
    }
  },
  {
    "path": "src/main/java/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 7
    }
  },
  {
    "path": "src/main/java/exception/UnknownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UnknownException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UnknownException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UnknownException(Throwable exception) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this(exception, true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public UnknownException(Throwable exception, boolean printMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(exception.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (printMessage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            System.out.println(this.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 19
    }
  },
  {
    "path": "src/main/java/exception/UnsupportedDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class UnsupportedDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 4
    }
  },
  {
    "path": "src/main/java/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Deadlines(String description, String by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getExtraParams() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"/by \" + this.by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.by.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"[D]\" + super.toString() + \" (no deadline specified)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 28
    }
  },
  {
    "path": "src/main/java/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Events(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getExtraParams() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"/at \" + this.at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        if (this.at.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "            return \"[E]\" + super.toString() + \" (no time specified)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 28
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (this.isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return (this.isDone ? \"1\": \"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getExtraParams() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getSaveForm() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getStatus() + String.join(\" \", this.getType(), this.getDescription()) + this.getExtraParams();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 44
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 6
    }
  },
  {
    "path": "src/main/java/task/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public ToDos(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String getExtraParams() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LongLeCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LongLeCE": 22
    }
  }
]
