[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void checkInputError(String myString) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d Parser.userInputStringToArray(myString);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if(userInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"The description of deadline cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } else if(!myString.contains(\"/by\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Deadline invalid date\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String getTaskName(String myString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String taskName \u003d myString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskName \u003d Parser.removeFirstWordFromString(taskName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskName \u003d taskName.split(\"/by\")[0];     // gets user entered task (before /by)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static Date getTaskDate(String myString) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String deadlineDateString \u003d myString.split(\"/by\")[1];     // gets user entered date (after /by)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            Date deadlineDate \u003d dateFormat.parse(deadlineDateString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            return deadlineDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch(ParseException errorMessage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Deadline invalid date\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateFormat.format(by) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 50
    }
  },
  {
    "path": "src/main/java/Delete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Delete {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void checkInputError(String myString) throws DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d Parser.userInputStringToArray(myString);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if(userInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Delete must be followed by a number from the list.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static int getDeleteNumber(String myString) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String userInput \u003d myString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        userInput \u003d Parser.removeFirstWordFromString(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int userInputNumber \u003d Integer.parseInt(userInput.split(\" \")[0]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return userInputNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 17
    }
  },
  {
    "path": "src/main/java/Done.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Done {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void checkInputError(String myString) throws DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d Parser.userInputStringToArray(myString);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if(userInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Done must be followed by a number from the list.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static int getDoneNumber(String myString) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String userInput \u003d myString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        userInput \u003d Parser.removeFirstWordFromString(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int userInputNumber \u003d Integer.parseInt(userInput.split(\" \")[0]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return userInputNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 17
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Scanner;  // Import the Scanner class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String userInputFirstWord \u003d Parser.getFirstWordFromString(userInput);   // get first word from userInput"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        // restore taskList from previous session"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        Storage storage \u003d new Storage(\"/data/duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskList \u003d storage.restoreTaskList(taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if (userInputFirstWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    String taskName \u003d Todo.getTaskName(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Todo userTodo \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.addTaskToList(userTodo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Deadline.checkInputError(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    String deadlineTask \u003d Deadline.getTaskName(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Date deadlineDate \u003d Deadline.getTaskDate(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Deadline userDeadline \u003d new Deadline(deadlineTask, deadlineDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.addTaskToList(userDeadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Event.checkInputError(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    String eventTask \u003d Event.getTaskName(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Date eventDateFrom \u003d Event.getEventDateFrom(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Date eventDateTo \u003d Event.getEventDateTo(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Event userEvent \u003d new Event(eventTask, eventDateFrom, eventDateTo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.addTaskToList(userEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Delete.checkInputError(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    int userInputNumber \u003d Delete.getDeleteNumber(userInput);    // get the number that user entered"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.deleteTask(userInputNumber);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Done.checkInputError(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    int userInputNumber \u003d Done.getDoneNumber(userInput);    // get the number that user entered"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.setTaskDone(userInputNumber);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    Find.checkInputError(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    String keyword \u003d Find.getKeyword(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.findTask(keyword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    taskList.printTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (userInputFirstWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } catch(DukeException errorMessage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if(errorMessage.getMessage().equals(\"Deadline invalid date\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    ui.printDeadlineFormat();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                } else if (errorMessage.getMessage().equals(\"Event invalid date\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    ui.printEventFormat();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.err.println(errorMessage.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            userInput \u003d input.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            userInputFirstWord \u003d Parser.getFirstWordFromString(userInput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 89,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public DukeException(String errorMessage){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return \"\\u2639 OOPS!!! \" + this.errorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private Date fromDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private Date toDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Event(String description, Date fromDate, Date toDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.fromDate \u003d fromDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void checkInputError(String myString) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d Parser.userInputStringToArray(myString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if(userInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"The description of event cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } else if(!myString.contains(\"-\") || !myString.contains(\"/at\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Event invalid date\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String getTaskName(String myString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String taskName \u003d myString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskName \u003d Parser.removeFirstWordFromString(taskName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskName \u003d taskName.split(\"/at\")[0];     // gets user entered task (before /by)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static Date getEventDateFrom(String myString) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String taskName \u003d myString.split(\"/at\")[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String eventDateString \u003d taskName.split(\"-\")[0];   // gets user input date in string form"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            Date eventDate \u003d dateFormat.parse(eventDateString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            return eventDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch(ParseException errorMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Event invalid date\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static Date getEventDateTo(String myString) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String taskName \u003d myString.split(\"/at\")[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            String eventDateString \u003d taskName.split(\"-\")[1];   // gets user input date in string form"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            Date eventDate \u003d dateFormat.parse(eventDateString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            return eventDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch(ParseException errorMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Event invalid date\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateFormat.format(fromDate) + \" - \" + dateFormat.format(toDate) + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 67
    }
  },
  {
    "path": "src/main/java/Find.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Find {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void checkInputError(String myString) throws DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d Parser.userInputStringToArray(myString);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if(userInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Find must be followed by a string from the list.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String getKeyword(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String keyword \u003d Parser.removeFirstWordFromString(userInput);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 15
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String getFirstWordFromString(String userInput) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d userInputStringToArray(userInput);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return userInputArray[0];"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String removeFirstWordFromString(String userInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String finalString \u003d userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] stringArray \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if (stringArray.length \u003e 1) {       // ensure that string has more than 1 word, if not will get out of bound error"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            finalString \u003d userInput.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return finalString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String[] userInputStringToArray(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return userInputArray;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 22
    }
  },
  {
    "path": "src/main/java/Save.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.ArrayList; // import the ArrayList class"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Save {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private static String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String directory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String projectDirectory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Save(String path) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.path \u003d System.getProperty(\"user.dir\") + path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        filename \u003d path.substring(path.lastIndexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        directory \u003d path.substring(0, path.lastIndexOf(\"/\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getFileName(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getDirectoryName(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void saveTaskList(ArrayList\u003cTask\u003e arrayList) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskList \u003d arrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int tryAgain \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while(tryAgain \u003c 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                FileOutputStream file \u003d new FileOutputStream(new File(path));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ObjectOutputStream object \u003d new ObjectOutputStream(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                object.writeObject(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                object.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                file.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                tryAgain \u003d 2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } catch(FileNotFoundException errorMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                tryAgain++ ;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                File file \u003d new File(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                file.getParentFile().mkdirs();          // create directory. This function will not create if already exist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if(!file.createNewFile()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.out.println(\"Unable to create file \" + path + \"...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.out.println(errorMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } catch (IOException errorMessage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                tryAgain \u003d 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(\"Error saving to \" + path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(errorMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static ArrayList\u003cTask\u003e readTaskList() throws IOException, DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(new File(path));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            ObjectInputStream object \u003d new ObjectInputStream(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            taskList \u003d (ArrayList\u003cTask\u003e)object.readObject();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            object.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch(FileNotFoundException errorMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            file.getParentFile().mkdirs();          // create directory. This function will not create if already exist."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if(!file.createNewFile()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(\"Unable to create file \" + path + \"...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(errorMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new DukeException(\"Error creating save file.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (IOException errorMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(\"Error reading file from \" + path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(errorMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Error reading save file.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (ClassNotFoundException errorMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(errorMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static ArrayList\u003cTask\u003e restoreTaskList(ArrayList\u003cTask\u003e arrayList) throws IOException, DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d readTaskList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (IOException errorMessage){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(errorMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Error restoring from save file. Please delete /data/duke.txt and relaunch.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 102
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.ArrayList; // import the ArrayList class"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String directory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String projectDirectory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.path \u003d System.getProperty(\"user.dir\") + path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        filename \u003d path.substring(path.lastIndexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        directory \u003d path.substring(0, path.lastIndexOf(\"/\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getFileName(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getDirectoryName(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void saveTaskList(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        int tryAgain \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        while(tryAgain \u003c 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                FileOutputStream file \u003d new FileOutputStream(new File(path));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                ObjectOutputStream object \u003d new ObjectOutputStream(file);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                object.writeObject(taskList.toArrayList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                //object.writeObject(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                object.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                file.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                tryAgain \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } catch(FileNotFoundException errorMessage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                tryAgain++ ;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                File file \u003d new File(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                file.getParentFile().mkdirs();          // create directory. This function will not create if already exist."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                if(!file.createNewFile()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.out.println(\"Unable to create file \" + path + \"...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                    System.out.println(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            } catch (IOException errorMessage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                tryAgain \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(\"Error saving to \" + path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(errorMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public TaskList restoreTaskList(TaskList taskList) throws IOException, DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        ArrayList\u003cTask\u003e arrayList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(new File(path));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            ObjectInputStream object \u003d new ObjectInputStream(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            arrayList \u003d (ArrayList\u003cTask\u003e)object.readObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            TaskList newTaskList \u003d new TaskList(arrayList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            //TaskList newTaskList \u003d (TaskList) object.readObject();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            object.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            return newTaskList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch(FileNotFoundException errorMessage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            file.getParentFile().mkdirs();          // create directory. This function will not create if already exist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if(!file.createNewFile()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(\"Unable to create file \" + path + \"...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(errorMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new DukeException(\"Error creating save file.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (EOFException errorMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if(!file.createNewFile()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(\"Save file is corrupted and unable to create new file \" + path + \"...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(errorMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new DukeException(\"Error creating save file.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (IOException errorMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(\"Error reading file from \" + path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(errorMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"Error reading save file.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (ClassNotFoundException errorMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(errorMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 96
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return (this.description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 27
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void addTaskToList(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void setTaskDone(int number) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if(number \u003e taskList.size() || number \u003c 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new DukeException(\"The selected task does not exist.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            taskList.get(number-1).setIsDone(true);          // set the task as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(taskList.get(number-1).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        catch(DukeException errorMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.err.println(errorMessage.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void deleteTask(int number) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (number \u003e taskList.size() || number \u003c 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                throw new DukeException(\"The selected task does not exist.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(taskList.get(number - 1).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            taskList.remove(number - 1);          // delete task from task list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        } catch (DukeException errorMessage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.err.println(errorMessage.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void findTask(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            if (taskList.get(i).getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                System.out.println(i+1 + \".\" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void printTaskList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            System.out.println(index + \".\" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public ArrayList\u003cTask\u003e toArrayList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 75
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static void checkInputError(String myString) throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String[] userInputArray \u003d Parser.userInputStringToArray(myString);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        if(userInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "            throw new DukeException(\"The description of todo cannot be empty.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public static String getTaskName(String myString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String taskName \u003d myString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        taskName \u003d Parser.removeFirstWordFromString(taskName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 25
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        //System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void printDeadlineFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Incorrect format. Please try:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"deadline \u003ctask\u003e /by \u003cdd/MM/yyyy HHmm\u003e\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"E.g. deadline Celebrate birthday /by 12/11/2019 1800\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    public void printEventFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"Incorrect format. Please try:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"event \u003ctask\u003e /at \u003cdd/MM/yyyy HHmm\u003e - \u003cdd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "        System.out.println(\"E.g. event Celebrate birthday /at 12/11/2019 1800 - 12/11/2019 2200\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TerenceTanWT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TerenceTanWT": 27
    }
  }
]
