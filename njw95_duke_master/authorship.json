[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.1.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 30,
      "-": 19
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    AddCommand(Task givenTask){ //constructor"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        task \u003d givenTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks,Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        tasks.addTask(task); //taken from above"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        storage.writeToFile(task.toTextFile(),true);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ui.printAdded(task,tasks);//task is above, tasks is the arraylist of tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 11
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Task task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        //does nothing in here"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    };"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 9
    }
  },
  {
    "path": "src/main/java/Datentime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Datentime {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String extractDnT (String data){ //we will pass everything from /by or /at onwards"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String[] dataSet \u003d data.split(\" \"); //split into date and time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String[] dateInfo \u003d dataSet[0].split(\"/\"); //get individual numbers of the date part dd/mm/yy"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if(Integer.parseInt(dateInfo[0])\u003c10) dateInfo[0]\u003dInteger.toString(Integer.parseInt(dateInfo[0]));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if(dateInfo.length\u003d\u003d3){//it must have 3 parts dd mm yyyy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if(dataSet.length\u003d\u003d1){ //Only the presence of date, no time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return dateInfo[0] +getSuffix(dateInfo[0])+ \" of \" + getMonth(Integer.parseInt(dateInfo[1]))+\" \" + dateInfo[2];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if(dataSet.length\u003d\u003d2){ //has date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return dateInfo[0] +getSuffix(dateInfo[0])+ \" of \" + getMonth(Integer.parseInt(dateInfo[1]))+\" \" + dateInfo[2]+ \", \" + getTime(dataSet[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else{ //3 or more parts, invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return \"null\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getSuffix(String myStringDay){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        int day \u003d Integer.parseInt(myStringDay);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String suffix \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if(day\u003d\u003d11||day\u003d\u003d12||day\u003d\u003d13){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "            int lastDigit \u003d day%10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "            switch(lastDigit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                case 1: suffix\u003d\"st\";break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "                case 2: suffix\u003d\"nd\";break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                case 3: suffix\u003d\"rd\";break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "                default : suffix \u003d \"th\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return suffix;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getMonth(int number){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String allMonths[] \u003d {\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return allMonths[number-1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getTime(String dataTime){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "       String hours \u003d dataTime.substring(0,2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "       String minutes \u003d dataTime.substring(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "       String time_Suffix\u003d\"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "       int int_Hours\u003dInteger.parseInt(hours);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "       int int_Minutes\u003dInteger.parseInt(minutes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "       if(int_Minutes\u003d\u003d0) minutes \u003d \"00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "       if(int_Hours\u003c12) time_Suffix\u003d\"am\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "       else if(int_Hours\u003e\u003d12 \u0026\u0026 int_Hours\u003c24){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "           time_Suffix \u003d \"pm\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": "           if (int_Hours !\u003d 12) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "               int_Hours \u003d int_Hours % 12;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "           }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "       }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "       return Integer.toString(int_Hours)+\".\"+ minutes +time_Suffix;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 63
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Deadline(String description, String date, boolean checkDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d checkDone; //checkDone will report true/false for isDone which gets converted to INT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" + getType() + \"]\" + \"[\" + super.getStatusIcon() + \"] \" + super.getDescription() + \"(by: \" + super.getDate() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toTextFile() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return super.getType() + \" | \" + super.getStatus() + \" | \" + super.getDescription() + \"| \" + super.getDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 21
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    DeleteCommand(int givenIndex) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        index \u003d givenIndex - 1; //for array usage"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if (index \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "                throw new DukeException(DukeException.typesOfError.INDEX_ISSUE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if (tasks.getList().isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "                throw new DukeException(DukeException.typesOfError.EMPTY_LIST);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "            ui.printDeleted(tasks.getTask(index));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "            storage.removefromFile(tasks.getItemInfo(index) + \"\\n\"); //delete the line too"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 24
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public int index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    DoneCommand(int givenIndex){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        index \u003d givenIndex-1; //for use in array"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if(index\u003etasks.getSize()){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "                throw new DukeException(DukeException.typesOfError.INDEX_ISSUE);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if(tasks.getList().isEmpty()){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "                throw new DukeException(DukeException.typesOfError.EMPTY_LIST);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            tasks.markItemDone(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "            storage.writeToFile(tasks.convertArrayToString(),false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "            ui.printDone(tasks.getTask(index));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch(DukeException e){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        tasks \u003d new TaskList(storage.readFile()); //read file from the FILEPATH into a TaskList and pass it to tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if(fullCommand \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw new DukeException(DukeException.typesOfError.INVALID_COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "                e.printError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\Jian Wei\\\\Desktop\\\\duke\\\\data\\\\duke.txt\").run();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "njw95": 30,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected typesOfError error;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String eType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    enum typesOfError { //enumerate all types of error"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        EMPTY_LIST,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        INVALID_COMMAND,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "        INDEX_ISSUE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    DukeException(typesOfError e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        error \u003d e;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void printError() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        switch(error) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case TODO: System.out.println(\"Missing/Incorrect format detected. Please use \\\"todo [insert task description]\\\"\");break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DEADLINE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"deadline [insert task description] /by [DD/MM/YYYY] [HHMM]\\\"\");break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case EVENT: System.out.println(\"Missing/Incorrect format detected. Please use \\\"event [insert task description] /at [DD/MM/YYYY] [HHMM]\\\"\");break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DONE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"done [insert index of task]\\\"\");break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DELETE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"delete [insert index of task] to delete the item. Ensure that index is correct.\\\"\");break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case FIND: System.out.println(\"Missing/Incorrect format detected. Please use \\\"find [insert keyword] to allow lookup. Please ensure you have a keyword inserted\\\"\");break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case EMPTY_LIST: System.out.println(\"☹OOPS!!! The task list is empty. Please input some item into list before using this command.\");break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case INVALID_COMMAND: System.out.println(\"☹OOPS!!! There is no support for such instruction.\");break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case INDEX_ISSUE: System.out.println(\"The index you have given is out of range, please enter valid index.\");break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Remember to ommit the [ ] brackets when you type your task description, date and time.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 33
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Event(String description, String date, boolean checkDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d checkDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" + getType() + \"]\" + \"[\" + super.getStatusIcon() + \"] \" + super.getDescription() + \"(at: \" + getDate() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    /**Text File requires a different format from String printing*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toTextFile() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return super.getType() + \" | \" + super.getStatus() + \" | \" + super.getDescription() + \"| \" + getDate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 23
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ui.sayBye();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        isExit(); //this command can only flag true in this class"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 12
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String keyword;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    FindCommand(String givenWord){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        keyword \u003d givenWord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d tasks.searchForTask(keyword);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ui.printFound(searchResults);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 14
    }
  },
  {
    "path": "src/main/java/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        isExit();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 6
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if(tasks.getList().isEmpty()){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "                throw new DukeException(DukeException.typesOfError.EMPTY_LIST);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "            ui.printList(tasks);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch(DukeException e){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printError();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 14
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public static Command parse(String myInput) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String[] sep_myInput \u003d myInput.split(\" \", 2);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "            /**These keywords will call their respective function to do processing*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if (myInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (myInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (sep_myInput[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (sep_myInput.length \u003c 2) throw new DukeException(DukeException.typesOfError.DONE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new DoneCommand(Integer.parseInt(sep_myInput[1]));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (sep_myInput[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (sep_myInput.length \u003c 2) throw new DukeException(DukeException.typesOfError.TODO);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "                ToDo newToDoTask \u003d new ToDo(sep_myInput[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new AddCommand(newToDoTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (sep_myInput[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (sep_myInput.length \u003c 2) throw new DukeException(DukeException.typesOfError.DEADLINE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "                //if(!(sep_myInput[1].trim().length() \u003e 0))throw new DukeException(); //safeguard statement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (!sep_myInput[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw new DukeException(DukeException.typesOfError.DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "                //check dateFormat"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "                String[] dateFormat \u003d sep_myInput[1].split(\"/by \"); //description and date+time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (dateFormat.length \u003c 2) throw new DukeException(DukeException.typesOfError.DEADLINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "                Datentime dnt \u003d new Datentime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                dateFormat[1] \u003d dnt.extractDnT(dateFormat[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (dateFormat[1].equals(\"null\")) throw new DukeException(DukeException.typesOfError.INVALID_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                Deadline newDeadlineTask \u003d new Deadline(dateFormat[0], dateFormat[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new AddCommand(newDeadlineTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (sep_myInput[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if ((sep_myInput.length \u003c 2)) throw new DukeException(DukeException.typesOfError.EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "                //if!(sep_myInput[1].trim().length() \u003e 0)) throw new DukeException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (!sep_myInput[1].contains(\"/at\")) throw new DukeException(DukeException.typesOfError.EVENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "                String[] dateFormat \u003d sep_myInput[1].split(\"/at \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (dateFormat.length \u003c 2) throw new DukeException(DukeException.typesOfError.EVENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "                Datentime dnt \u003d new Datentime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "                dateFormat[1] \u003d dnt.extractDnT(dateFormat[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (dateFormat[1].equals(\"null\")) throw new DukeException(DukeException.typesOfError.EVENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "                Event newEventTask \u003d new Event(dateFormat[0], dateFormat[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new AddCommand(newEventTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (sep_myInput[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (sep_myInput.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw new DukeException(DukeException.typesOfError.DELETE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(sep_myInput[1]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else if (sep_myInput[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (sep_myInput.length \u003c 2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw new DukeException(DukeException.typesOfError.FIND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "                //create a FindCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return new FindCommand(sep_myInput[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw new DukeException(DukeException.typesOfError.INVALID_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.printError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    return new InvalidCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "njw95"
        },
        "content": "            catch(DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printError();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "njw95"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }//end catch"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }//close parse"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "njw95"
        },
        "content": "}//close class"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "njw95": 70
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    private static String FILE_PATH \u003d \"C:\\\\Users\\\\Jian Wei\\\\Desktop\\\\duke\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    Storage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FILE_PATH \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() { //return type is ArrayList of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "            ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while (bufferLine !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                String[] words \u003d bufferLine.split(\"\\\\| \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (words[0].equals(\"D \")) { //careful of the space, must include"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Deadline item \u003d new Deadline(words[2], words[3], words[1].contains(\"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    listOfTasks.add(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } else if (words[0].equals(\"E \")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Event item \u003d new Event(words[2], words[3], words[1].contains(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    listOfTasks.add(item);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } else if (words[0].equals(\"T \")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    ToDo item \u003d new ToDo(words[2], words[1].contains(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    listOfTasks.add(item);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "            return listOfTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } finally { //close pointers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "                fr.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }//end read"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void writeToFile(String data, boolean append) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileWriter fw \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedWriter bw \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fw \u003d new FileWriter(file, append);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bw.write(data);//writes a string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bw.newLine(); //writes a line separator"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } finally {//close after using"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "njw95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "njw95"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "njw95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void removefromFile(String toBeDeleted) { //pass the string that we want to delete in form of Text"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String oldCopy \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while (bufferLine !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "njw95"
        },
        "content": "                oldCopy \u003d oldCopy + bufferLine + System.lineSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "njw95"
        },
        "content": "            oldCopy \u003d oldCopy.substring(0, oldCopy.length() - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String newContent \u003d oldCopy.replace(toBeDeleted, \"\");//replace the string to be deleted with nothing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "njw95"
        },
        "content": "            Storage writer \u003d new Storage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "njw95"
        },
        "content": "            writer.writeToFile(newContent, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } finally {//close pointers"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "njw95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "njw95"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "njw95"
        },
        "content": "                fr.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "njw95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 107
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Task(String description) { //constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getStatusIcon() { return (isDone ? \"✔\" : \"✘\"); }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    //public String getStatusIcon() { return (isDone ? \"\\u2713\" : \"\\u2718\"); } //issue with javaFX"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public int getStatus() { return (isDone ? 1 : 0); }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getType() { return type; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getDate() { return date; }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" + getType() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toTextFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return getType() + \" | \" + getStatus() + \" | \" + getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 26
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected ArrayList\u003cTask\u003e myTasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e list) { //constructor myTasks based on the given list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        myTasks \u003d list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        myTasks.add(t);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        myTasks.remove(index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() { //method for retrieving myTasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return myTasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    /**Returns the specific task*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Task getTask(int index) { //obtain task based on Index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return myTasks.get(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "    /**Returns a task in format ready for txt file*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getItemInfo(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return myTasks.get(index).toTextFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "    /**converts the ArrayList to String for storage into txt file*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String convertArrayToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String inputStr \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "        for (Task task : myTasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "            inputStr \u003d inputStr + task.toTextFile() + System.lineSeparator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "        inputStr \u003d inputStr.substring(0, inputStr.length() - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return inputStr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "    /**Marks an item done by passing the index*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void markItemDone(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "        myTasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "    /**Returns a ArrayList of items found that matches the key*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ArrayList\u003cTask\u003e searchForTask(String key) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "        for (Task t : myTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String[] words \u003d t.getDescription().split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if (Arrays.asList(words).contains(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "                searchResults.add(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public int getSize(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return myTasks.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 55
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ToDo(String description, boolean checkDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d checkDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 12
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        Scanner input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String output \u003d input.nextLine();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void sayBye(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void printDone(Task t) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(t.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void printDeleted(Task t) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"As requested. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(t.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void printFound(ArrayList\u003cTask\u003e searchResult) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if (searchResult.size()\u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "            for (Task task : searchResult) { //for all task in result arrayList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "                System.out.println((++index) + \". \" + task.toString()); //print"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "            System.out.println(\"No task matching description. Try another keyword!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void printAdded(Task currentTask, TaskList tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(currentTask.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void printList(TaskList tasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "        for (Task task : tasks.getList())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "            System.out.println(++index + \".\" + task.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 54
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 9
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    private final ToDo testCase \u003d new ToDo(\"eat potato\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        assertEquals(testCase.toString(), \"[T][✘] eat potato\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "njw95": 12
    }
  }
]
