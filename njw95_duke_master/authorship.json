[
  {
    "path": "src/main/java/Datentime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Datentime {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String extractDnT (String data){ //we will pass everything from /by or /at onwards"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String[] dataSet \u003d data.split(\" \"); //split into date and time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String[] dateInfo \u003d dataSet[0].split(\"/\"); //get individual numbers of the date part dd/mm/yy"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if(Integer.parseInt(dateInfo[0])\u003c10) dateInfo[0]\u003dInteger.toString(Integer.parseInt(dateInfo[0]));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if(dateInfo.length\u003d\u003d3){//it must have 3 parts dd mm yyyy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if(dataSet.length\u003d\u003d1){ //Only the presence of date, no time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return dateInfo[0] +getSuffix(dateInfo[0])+ \" of \" + getMonth(Integer.parseInt(dateInfo[1]))+\" \" + dateInfo[2];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if(dataSet.length\u003d\u003d2){ //has date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return dateInfo[0] +getSuffix(dateInfo[0])+ \" of \" + getMonth(Integer.parseInt(dateInfo[1]))+\" \" + dateInfo[2]+ \", \" + getTime(dataSet[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else{ //3 or more parts, invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return \"null\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getSuffix(String myStringDay){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        int day \u003d Integer.parseInt(myStringDay);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String suffix \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "        if(day\u003d\u003d11||day\u003d\u003d12||day\u003d\u003d13){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "            int lastDigit \u003d day%10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "            switch(lastDigit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                case 1: suffix\u003d\"st\";break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "                case 2: suffix\u003d\"nd\";break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                case 3: suffix\u003d\"rd\";break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "                default : suffix \u003d \"th\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return suffix;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getMonth(int number){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "        String allMonths[] \u003d {\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return allMonths[number-1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getTime(String dataTime){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "       String hours \u003d dataTime.substring(0,2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "       String minutes \u003d dataTime.substring(2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "       String time_Suffix\u003d\"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "       int int_Hours\u003dInteger.parseInt(hours);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "       int int_Minutes\u003dInteger.parseInt(minutes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "       if(int_Minutes\u003d\u003d0) minutes \u003d \"00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "       if(int_Hours\u003c12) time_Suffix\u003d\"am\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "       else if(int_Hours\u003e\u003d12 \u0026\u0026 int_Hours\u003c24){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "           time_Suffix \u003d \"pm\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": "           if (int_Hours !\u003d 12) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "               int_Hours \u003d int_Hours % 12;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "           }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "       }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "       return Integer.toString(int_Hours)+\".\"+ minutes +time_Suffix;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 63
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"D\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Deadline(String description, String date, boolean checkDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"D\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d checkDone; //checkDone will report true/false for isDone which gets converted to INT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" + getLetterSymbol() + \"]\" + \"[\" + super.getStatusIcon() + \"] \" + super.getDescription() + \"(by: \" + super.getDate() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return super.getLetterSymbol() + \" | \" + super.getStatus() + \" | \" + super.getDescription() + \"| \" + super.getDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 21
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.lang.Object;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ArrayList\u003cTask\u003e myList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "            FileReading reader \u003d new FileReading();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "            myList \u003d reader.ReadFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String myInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String[] sep_myInput \u003d myInput.split(\" \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if (myInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (myList.isEmpty()) throw new DukeException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Here are the items in your list:\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    int counter \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    for (Task task : myList) { //traverse all task in my list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        counter++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        System.out.println(counter + \".\" + task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.emptyList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((sep_myInput.length \u003c 2)||(Integer.parseInt(sep_myInput[1]) \u003e myList.size())) throw new DukeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if(!(sep_myInput[1].trim().length() \u003e 0)) throw new DukeException(); //safeguard statement might need to enable later"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String prevData \u003d myList.get(Integer.parseInt(sep_myInput[1])- 1).toText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.get(Integer.parseInt(sep_myInput[1])-1).markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"[\" + myList.get(Integer.parseInt(sep_myInput[1]) - 1).getStatusIcon() + \"] \" + myList.get(Integer.parseInt(sep_myInput[1]) - 1).description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String currData \u003d myList.get(Integer.parseInt(sep_myInput[1]) - 1).toText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //Modify Duke.txt"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.ModifyFile(prevData, currData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.DONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (sep_myInput.length \u003c 2) throw new DukeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if(!(sep_myInput[1].trim().length() \u003e 0)) throw new DukeException();//safeguard"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    ToDo newToDoTask \u003d new ToDo(sep_myInput[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.add(newToDoTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    printGotIt(newToDoTask,myList.size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //write to duke.txt"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.WriteFile(newToDoTask.toText(), true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.TODO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (sep_myInput.length \u003c 2) throw new DukeException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if(!(sep_myInput[1].trim().length() \u003e 0))throw new DukeException(); //safeguard statement"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (!sep_myInput[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        throw new DukeException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //check dateFormat"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String[] dateFormat \u003d sep_myInput[1].split(\"/by \"); //description and date+time"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (dateFormat.length \u003c 2) throw new DukeException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Datentime dnt \u003d new Datentime();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    dateFormat[1]\u003ddnt.extractDnT(dateFormat[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if(dateFormat[1].equals(\"null\")) throw new DukeException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Deadline newDeadlineTask \u003d new Deadline(dateFormat[0], dateFormat[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.add(newDeadlineTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    printGotIt(newDeadlineTask,myList.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.WriteFile(newDeadlineTask.toText(), true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.DEADLINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((sep_myInput.length \u003c 2))throw new DukeException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if!(sep_myInput[1].trim().length() \u003e 0)) throw new DukeException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (!sep_myInput[1].contains(\"/at\")) throw new DukeException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String[] dateFormat \u003d sep_myInput[1].split(\"/at \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (dateFormat.length \u003c 2) throw new DukeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Datentime dnt \u003d new Datentime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    dateFormat[1]\u003ddnt.extractDnT(dateFormat[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if(dateFormat[1].equals(\"null\")) throw new DukeException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Event newEventTask \u003d new Event(dateFormat[0], dateFormat[1]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.add(newEventTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    printGotIt(newEventTask,myList.size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //Write to duke.txt"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.WriteFile(newEventTask.toText(), true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.EVENT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((sep_myInput.length \u003c 2)||Integer.parseInt(sep_myInput[1]) \u003e myList.size())throw new DukeException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if!(sep_myInput[1].trim().length() \u003e 0)) throw new DukeException(); //safeguard"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String dataToDelete \u003d myList.get(Integer.parseInt(sep_myInput[1]) - 1).toText();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(myList.get(Integer.parseInt(sep_myInput[1]) - 1).toString());//print String"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.removefromFile(dataToDelete); //remove from file"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.DELETE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (sep_myInput[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((sep_myInput.length \u003c 2)) throw new DukeException(); //at least 2 words \"find something\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //!(sep_myInput[1].trim().length() \u003e 0)) throw new DukeException();//safeguard"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    for (Task task : myList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        String[] descriptionSplit \u003d task.getDescription().split(\" \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        if (Arrays.asList(descriptionSplit).contains(sep_myInput[1])) { //using the array as a list, find \"something\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "njw95"
        },
        "content": "                            result.add(task); //any description with the \"something\" will be added into result"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (result.size() \u003e 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        int index \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        for (Task task : result) { //for all task in result arrayList"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "njw95"
        },
        "content": "                            System.out.println((++index) + \". \" + task.toString()); //print"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    } else if(result.isEmpty()){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        System.out.println(\"Nothing was found with that keyword.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }  //end try"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "njw95"
        },
        "content": "                catch (DukeException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.FIND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }//end catch"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }//end find function"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw new DukeException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.invalidInstruction();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }//end while"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public static void printGotIt(Task currentTask, int sizeOfList){"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(currentTask.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Now you have \" + sizeOfList + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 163,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    DukeException() {} //constructor"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    //if list command but list is empty"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"☹OOPS!!! The task list is empty. Please input some item into list before using this command.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    //if command is invalid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void invalidInstruction() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"☹OOPS!!! There is no support for such instruction.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    enum typesOfError { //enumerate all types of error"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FIND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void incorrectInputFormat(typesOfError error) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "        switch(error) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case TODO: System.out.println(\"Missing/Incorrect format detected. Please use \\\"todo [insert task description]\\\"\");break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DEADLINE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"deadline [insert task description] /by [DD/MM/YYYY] [HHMM]\\\"\");break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case EVENT: System.out.println(\"Missing/Incorrect format detected. Please use \\\"event [insert task description] /at [DD/MM/YYYY] [HHMM]\\\"\");break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DONE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"done [insert index of task]\\\"\");break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DELETE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"delete [insert index of task] to delete the item. Ensure that index is correct.\\\"\");break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case FIND: System.out.println(\"Missing/Incorrect format detected. Please use \\\"find [insert keyword] to allow lookup. Please ensure you have a keyword inserted\\\"\");break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Remember to ommit the [ ] brackets when you type your task description, date and time.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 33
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"E\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Event(String description, String date, boolean checkDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"E\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d checkDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" + getLetterSymbol() + \"]\" + \"[\" + super.getStatusIcon() + \"] \" + super.getDescription() + \"(at: \" + getDate() + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return super.getLetterSymbol() + \" | \" + super.getStatus() + \" | \" + super.getDescription() + \"| \" + getDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 22
    }
  },
  {
    "path": "src/main/java/FilePathManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class FilePathManager {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    static final String FILE_PATH \u003d \"C:\\\\Users\\\\Jian Wei\\\\Desktop\\\\duke\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 3
    }
  },
  {
    "path": "src/main/java/FileReading.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class FileReading extends FilePathManager {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ArrayList\u003cTask\u003e ReadFile() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while (bufferLine !\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "                String[] words \u003d bufferLine.split(\"\\\\| \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (words[0].equals(\"D \")) { //careful of the space, must include"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Deadline item \u003d new Deadline(words[2], words[3], words[1].contains(\"1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    listOfTasks.add(item);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } else if (words[0].equals(\"E \")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Event item \u003d new Event(words[2], words[3], words[1].contains(\"1\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    listOfTasks.add(item);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "                else if (words[0].equals(\"T \")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    ToDo item \u003d new ToDo(words[2], words[1].contains(\"1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    listOfTasks.add(item);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            return listOfTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 41
    }
  },
  {
    "path": "src/main/java/FileWriting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class FileWriting extends FilePathManager {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void WriteFile(String data, boolean append) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileWriter fw \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedWriter bw \u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fw \u003d new FileWriter(file, append);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bw.write(data);//writes a string"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bw.newLine(); //writes a line separator"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "        finally {//close after using"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bw.close();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void ModifyFile(String prevData, String currData) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String oldCopy \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while ( bufferLine!\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "                oldCopy \u003d oldCopy + bufferLine + System.lineSeparator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "            oldCopy \u003d oldCopy.substring(0, oldCopy.length() - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String newContent \u003d oldCopy.replace(prevData, currData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "            FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "            writer.WriteFile(newContent, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void removefromFile(String toBeDeleted) { //pass the string that we want to delete in form of Text"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String oldCopy \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while ( bufferLine!\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "                oldCopy \u003d oldCopy + bufferLine + System.lineSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bufferLine \u003d br.readLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "njw95"
        },
        "content": "            oldCopy \u003d oldCopy.substring(0, oldCopy.length() - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String newContent \u003d oldCopy.replace(toBeDeleted,\"null\");//replace the string to be deleted with nothing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "njw95"
        },
        "content": "            FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "njw95"
        },
        "content": "            writer.WriteFile(newContent, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 75
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String letterSymbol;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getStatusIcon() { return (isDone ? \"\\u2713\" : \"\\u2718\"); }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public int getStatus() { return (isDone ? 1 : 0); }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getLetterSymbol() { return letterSymbol; }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getDate() { return date; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" + getLetterSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return getLetterSymbol() + \" | \" + getStatus() + \" | \" + getDescription();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 25
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"T\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ToDo(String description, boolean checkDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d checkDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"T\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 12
    }
  }
]
