[
  {
    "path": "src/main/java/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"D\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Deadline(String description, String date, boolean status){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol \u003d \"D\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone\u003dstatus;//the status will reflect true/false for isDone"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\"+getLetterSymbol()+\"]\" + \"[\"+super.getStatusIcon()+\"] \"+ super.getDescription() + \"(by: \" + super.getDate() + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toTextData() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return super.getLetterSymbol()+\"|\"+super.getStatus()+\"|\"+super.getDescription()+\"|\"+super.getDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 27
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke\\nWhat Can I do for you?\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        ArrayList\u003cTask\u003emyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "            FileReading reader \u003d new FileReading();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "            myList \u003d reader.ReadFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String myInstruction \u003d sc.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String[] words \u003d myInstruction.split(\"\\\\s\",2); //split into command todo,deadline,event,done then desc"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            if (words[0].equals(\"bye\")) { //bye"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (words[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (myList.isEmpty()) throw new DukeException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //list has items"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    int counter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    for (Task task : myList) { //for all task in myList, traverse and print"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        counter++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        System.out.println(counter + \".\" + task.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    catch(DukeException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        e.emptyList(); //prints out emptyList message from DukeException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if (myInstruction.contains(\"done\")) { //done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((words.length \u003c 2) || (words[1].equals(\"\")) || (Integer.parseInt(words[1]) - 1 \u003e myList.size()))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        throw new DukeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if no error, proceed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String prevData \u003d myList.get(Integer.parseInt(words[1]) - 1).toTextData();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.get(Integer.parseInt(words[1]) - 1).markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"[\" + myList.get(Integer.parseInt(words[1]) - 1).getStatusIcon() + \"] \" + myList.get(Integer.parseInt(words[1]) - 1).description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String currData \u003d myList.get(Integer.parseInt(words[1]) - 1).toTextData();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //Modify Duke.txt here, need to update the isDone"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.ModifyFile(prevData,currData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "njw95"
        },
        "content": "                catch(DukeException e){ //catch the error if it was thrown above"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        e.incorrectInputFormat(DukeException.typesOfError.DONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if(myInstruction.contains(\"todo\")){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((words.length \u003c 2) || (words[1].equals(\"\")))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        throw new DukeException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //if no error, proceed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    ToDo newToDoTask \u003d new ToDo(words[1]); //pass taskName as description"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.add(newToDoTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(newToDoTask.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Now you have \" + myList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //update Duke.txt here"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.WriteFile(newToDoTask.toTextData(),true); //write using data text format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "njw95"
        },
        "content": "                catch(DukeException e){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.TODO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if(myInstruction.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((words.length \u003c 2) || !(words[1].contains(\"/by\")))//must contain /by"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        throw new DukeException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //ensure date format is correct"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String[] dateFormat \u003d words[1].split(\"/by\"); // \"taskDescription\" and \"dd/mm/yy\" separated"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (dateFormat[1].equals(\"\")) throw new DukeException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Deadline newDeadlineTask \u003d new Deadline(dateFormat[0], dateFormat[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.add(newDeadlineTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(newDeadlineTask.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Now you have \" + myList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //update Duke.txt here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.WriteFile(newDeadlineTask.toTextData(),true); //write using data text format"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.DEADLINE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else if(myInstruction.contains(\"event\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if ((words.length \u003c 2) || !(words[1].contains(\"/at\")))//must contain /at"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "njw95"
        },
        "content": "                        throw new DukeException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //ensure date format is correct"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    String[] dateFormat \u003d words[1].split(\"/at\"); // \"taskDescription\" and \"dd/mm/yy\" separated"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    if (dateFormat[1].equals(\"\")) throw new DukeException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Event newEventTask \u003d new Event(dateFormat[0], dateFormat[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    myList.add(newEventTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(newEventTask.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    System.out.println(\"Now you have \" + myList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    //update Duke.txt here"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    writer.WriteFile(newEventTask.toTextData(),true);//write using data text format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.incorrectInputFormat(DukeException.typesOfError.EVENT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "njw95"
        },
        "content": "            else { //all other unsupported instructions"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "njw95"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    DukeException e \u003d new DukeException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "njw95"
        },
        "content": "                catch (DukeException e){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    e.invalidInstruction();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 120,
      "-": 11
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    DukeException() {} //constructor"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void emptyList(){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"☹ OOPS!!! The task list is empty. Please input some tasks before using this command.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void invalidInstruction(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        System.out.println(\"☹ OOPS!!! There is no support for such instruction.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    enum typesOfError{ //enumerate all types of error we can have"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "        DONE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void incorrectInputFormat(typesOfError error){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "        switch(error){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case TODO: System.out.println(\"Missing/Incorrect format detected. Please use \\\"todo [insert task description]\\\"\");break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DEADLINE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"deadline [insert task description] /by [date/time]\\\"\");break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case EVENT: System.out.println(\"Missing/Incorrect format detected. Please use \\\"event [insert task description] /at [date/time]\\\"\");break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            case DONE: System.out.println(\"Missing/Incorrect format detected. Please use \\\"done [insert index of task]\\\"\");break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 27
    }
  },
  {
    "path": "src/main/java/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol\u003d\"E\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date\u003ddate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Event(String description, String date,boolean status) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.letterSymbol\u003d\"E\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.date\u003ddate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\" +super.getLetterSymbol()+\"]\" +\"[\"+super.getStatusIcon()+\"] \"+ super.getDescription() + \"(at: \" + super.getDate() + \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toTextData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return super.getLetterSymbol()+\"|\"+super.getStatus()+\"|\"+super.getDescription()+\"|\"+super.getDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 24
    }
  },
  {
    "path": "src/main/java/FileReading.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class FileReading extends ManageFile {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public ArrayList\u003cTask\u003e ReadFile(){ //return an ArrayList of Task based on ReadFile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(\"C:/Users/Jian Wei/Desktop/duke/data/duke.txt\".toURI().getPath());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String currentLine \u003d br.readLine(); //buffer will read line by line"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while(currentLine!\u003dnull) { //we have data, we carry on"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "                String[] words \u003d currentLine.split(\"\\\\|\"); //format is letterSymbol,status,description,and time/data(if applicable)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "                if (words[0].equals(\"D\")) { //belongs to deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Deadline item \u003d new Deadline(words[2], words[3], words[1].contains(\"1\")); //format: String description, String date, boolean status)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    list.add(item);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } else if (words[0].equals(\"E\")) { //belongs to Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    Event item \u003d new Event(words[2], words[3], words[1].contains(\"1\")); //format: String description, String date, boolean status)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    list.add(item);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "                } else if (words[0].equals(\"T\")) { //belongs to todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    ToDo item \u003d new ToDo(words[2], words[1].contains(\"1\")); //format: String description,boolean status)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "                    list.add(item);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "                //once no more item to read"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "            catch(IOException e){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace(); //locate where the exception is caught"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 40
    }
  },
  {
    "path": "src/main/java/FileWriting.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class FileWriting extends ManageFile {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void WriteFile(String data, boolean append){ //follows FileWriter Constructor format"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileWriter fwr \u003d null;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedWriter bwr \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fwr \u003d new FileWriter(file,append);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bwr \u003d new BufferedWriter(fwr);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bwr.write(data);//writes string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "            bwr.newLine(); //writes a line separator"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch(IOException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "        finally{ //close after using"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "                bwr.close();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": "                fwr.close();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "            catch(IOException e){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void ModifyFile(String prevData, String currData){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "njw95"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "njw95"
        },
        "content": "        FileReader fr \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "njw95"
        },
        "content": "        BufferedReader br\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "njw95"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "njw95"
        },
        "content": "            fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "njw95"
        },
        "content": "            br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String prev_item\u003d\"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String now \u003d br.readLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "njw95"
        },
        "content": "            while(now!\u003dnull){//make sure we have item in our file before we modify"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "njw95"
        },
        "content": "                prev_item+\u003dnow+System.lineSeparator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "njw95"
        },
        "content": "                now \u003d br.readLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "njw95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "njw95"
        },
        "content": "            prev_item\u003dprev_item.substring(0,prev_item.length()-1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "njw95"
        },
        "content": "            String updatedItem \u003d prev_item.replace(prevData,currData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "njw95"
        },
        "content": "            //write the new updated item into the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "njw95"
        },
        "content": "            FileWriting writer \u003d new FileWriting();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "njw95"
        },
        "content": "            writer.WriteFile(updatedItem,false);//do not append"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "njw95"
        },
        "content": "        catch(IOException e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "njw95"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "njw95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 52
    }
  },
  {
    "path": "src/main/java/ManageFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "import java.lang.Object;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ManageFile {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    //String URL \u003d \"C:\\\\Users\\\\Jian Wei\\\\Desktop\\\\duke\\\\data\\\\duke.txt\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    //URI outputURI \u003d new URI((file::///\"+URL.replaceAll(\" \", \"%20\")));"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    static final String FILE_PATH \u003d \"C:/Users/Jian Wei/Desktop/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 6
    }
  },
  {
    "path": "src/main/java/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected String letterSymbol;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public Task(String description) { //handling of letterSymbol and dates to be done in respective classes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public int getStatus(){ return isDone?1:0; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getDescription(){ return description;}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getLetterSymbol(){ return letterSymbol; }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String getDate(){ return date;}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public void markAsDone(){ this.isDone \u003d true; }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toString(){ //format for printing string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return \"[\"+ getLetterSymbol()+\"]\"+\"[\"+getStatusIcon()+\"]\"+getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "njw95"
        },
        "content": "    public String toTextData(){ //format for text file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "njw95"
        },
        "content": "        return getLetterSymbol()+\"|\"+getStatus()+\"|\"+getDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "njw95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 27
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "njw95"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "njw95"
        },
        "content": "     public ToDo(String description){"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "njw95"
        },
        "content": "         super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "njw95"
        },
        "content": "         this.letterSymbol\u003d\"T\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "njw95"
        },
        "content": "     }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "njw95"
        },
        "content": "     public ToDo(String description, boolean status){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "njw95"
        },
        "content": "         super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "njw95"
        },
        "content": "         this.letterSymbol\u003d\"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "njw95"
        },
        "content": "         this.isDone \u003d status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "njw95"
        },
        "content": "     }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "njw95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "njw95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "njw95": 12
    }
  }
]
