[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Deadline class is a subclass of Task, as specified in the Duke requirements."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Deadline contains a date in addition to the basic description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description User-defined description of the Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param by User-defined date of the Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            date \u003d formatter.parse(this.by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            System.out.println(\"â˜¹ OOPS!!! Please enter your date for deadline in the following format: dd/MM/yyyy\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Facilitating the storing of Deadline in disk as correct format, for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * easy reinitialisation into task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Correct format for storage of Deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"deadline \" + this.description + \" /by \" + this.by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Organise description, date for output."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Correct format for output of Deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"[D]\" + getStatusIcon() + super.toString() + \" (by: \" + date + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 52
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.lang.String;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * The main class for the Duke program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Main function for Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param args command line arguments, not used in Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printGreet();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cTask\u003e listTasks \u003d Storage.readFile();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        TaskList dukeList \u003d new TaskList(listTasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean exit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        while (!exit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String inputString \u003d Ui.takeInput();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                switch (Parser.decideCmd(inputString)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case EXIT:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        Storage.exit(dukeList.ListTasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        exit \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case LIST:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.list();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case DONE:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.doneTask(inputString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case TODO:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.addToDo(inputString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case DEADLINE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.addDeadline(inputString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case EVENT:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.addEvent(inputString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case DELETE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.deleteTask(inputString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    case FIND:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        dukeList.findTask(inputString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (InvalidDukeInputException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printInvalidDuke();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (ToDoEmptyException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printToDoEmpty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (DeadlineEmptyException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printDeadlineEmpty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (EventEmptyException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printEventEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (DeleteInvalidException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printDeleteInvalid();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (FindEmptyException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printFindEmpty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * The exception for generic invalid input that cannot be"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * sorted out into invalid commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class InvalidDukeInputException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 65,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Event class is a subclass of Task, as specified in the Duke requirements."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Event contains a date and time in addition to the basic description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * date_string and time_string will be concatenated into date for easy"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * output."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected String date_string;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected String time_string;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description User-defined description of the Event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param date User-defined date of the Event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param time User-defined time of the Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Event(String description, String date, String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.date_string \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.time_string \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.date \u003d formatter.parse(date_string + \" \" + time_string);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            System.out.println(\"â˜¹ OOPS!!! Please enter your date and time for your event in the following format: dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Facilitating the storing of Events in disk as correct format, for"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * easy reinitialisation into task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Correct format for storage of Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"event \" + this.description + \" /at \" + this.date_string + \" \" + this.time_string;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Organise description, date (comprising both the date and time of Event)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * for output."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Correct format for output of Event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"[E]\" + getStatusIcon() + super.toString() + \" (at: \" + date + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 58
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Parser class handles the parsing of the input from user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * These are the constants that are used in the decideCmd method."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String EXIT_CMD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String LIST_CMD \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String DONE_CMD \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String TODO_CMD \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String DEADLINE_CMD \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String EVENT_CMD \u003d \"event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String DELETE_CMD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String FIND_CMD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Takes in the user input and interprets the command that the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * intended. Returns an enum called cmd that specifies the type of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * command, which is used to decide the next course of action for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * the list of tasks. If the user has not keyed in a valid command,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * throws InvalidDukeInputException."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param inputString User input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The type of command that the user has input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws InvalidDukeInputException If user has keyed in a generic incorrect input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static cmd decideCmd(String inputString) throws InvalidDukeInputException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (inputString.equals(EXIT_CMD)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return cmd.EXIT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (inputString.equals(LIST_CMD)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return cmd.LIST;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String[] inputParts \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (inputParts[0].equals(DONE_CMD)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return cmd.DONE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else if (inputParts[0].equals(TODO_CMD)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return cmd.TODO;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else if (inputParts[0].equals(DEADLINE_CMD)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return cmd.DEADLINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else if (inputParts[0].equals(EVENT_CMD)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return cmd.EVENT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else if (inputParts[0].equals(DELETE_CMD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return cmd.DELETE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else if (inputParts[0].equals(FIND_CMD)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return cmd.FIND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new InvalidDukeInputException(); // define what to do for DukeException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * enum class that specifies the type of command based on the user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "enum cmd {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    EXIT, LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 59
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Storage class handles the writing and reading of task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * list from disk."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Hardcoded file path constant."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String FILEPATH \u003d \"D:\\\\duke\\\\src\\\\main\\\\java\\\\duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Reads the file, initialises each task correctly as a ToDo,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Event or Deadline, then enters them into the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static ArrayList\u003cTask\u003e readFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cTask\u003e listTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        File file \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner sc1 \u003d new Scanner(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (sc1.hasNextLine()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String fileString \u003d sc1.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String[] fileParts \u003d fileString.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Scanner sc2 \u003d new Scanner(fileString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                sc2.next();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (fileParts[0].equals(Parser.TODO_CMD)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    ToDo newToDo \u003d new ToDo(sc2.nextLine());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    listTasks.add(newToDo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                } else if (fileParts[0].equals(Parser.DEADLINE_CMD)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String restOfString \u003d sc2.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String[] parts \u003d restOfString.split(\"/by\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String description \u003d parts[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String byString \u003d parts[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    Deadline newDeadline \u003d new Deadline(description, byString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    listTasks.add(newDeadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                } else if (fileParts[0].equals(Parser.EVENT_CMD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String restOfInput \u003d sc2.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String[] parts \u003d restOfInput.split(\"/at\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String description \u003d parts[0].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String[] dateAndTime \u003d parts[1].trim().split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String date \u003d dateAndTime[0].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String time \u003d dateAndTime[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    Event newEvent \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    listTasks.add(newEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            sc1.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return listTasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * When the user has ended usage, write all the tasks in the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * to the file path and say goodbye to the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param listTasks The list of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static void exit(ArrayList\u003cTask\u003e listTasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(FILEPATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            for (Task eachTask: listTasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                writer.println(eachTask.getTaskType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printBye();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 79
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Basic Task class. Forms a base for ToDo, Deadline, and Event."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Description of task and whether the task is marked as done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Decides the status icon of the task, whether it is a tick"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * or cross."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Tick if the task is marked as done, cross if not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Returns the type of task. General case will return task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return A \"task\" string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * General case, return the description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The description of the task as a string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Changes the isDone boolean to mark the task as done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The isDone boolean, which will be true."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyeah": 60
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * TaskList class maintains the main list of tasks. Will"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * handle all manipulation of the list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * The list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    protected ArrayList\u003cTask\u003e ListTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param list The list of tasks read from disk in the Storage class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ListTasks \u003d list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Extracts ToDo description from the input and adds ToDo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * to the list of Tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ToDoEmptyException If user doesn\u0027t key in any ToDo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void addToDo(String input) throws ToDoEmptyException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        sc.next(); // ignore todo_word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ToDo newToDo \u003d new ToDo(sc.nextLine());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.ListTasks.add(newToDo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int pos \u003d this.ListTasks.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printAddTask(pos, newToDo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ToDoEmptyException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Extracts Deadline description and date from the input and adds"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Deadline to the list of Tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws DeadlineEmptyException If user doesn\u0027t key in any Deadline."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void addDeadline(String input) throws DeadlineEmptyException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        sc.next(); // ignore deadline word"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String restOfInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String[] parts \u003d restOfInput.split(\"/by\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String description \u003d parts[0].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String byString \u003d parts[1].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(description, byString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.ListTasks.add(newDeadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int pos \u003d this.ListTasks.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printAddTask(pos, newDeadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new DeadlineEmptyException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Extracts Event description, date and time from the input and adds"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Event to the list of Tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws EventEmptyException If user doesn\u0027t key in any Event."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void addEvent(String input) throws EventEmptyException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        sc.next(); // ignore event word"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String restOfInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String[] parts \u003d restOfInput.split(\"/at\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String description \u003d parts[0].trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String[] dateAndTime \u003d parts[1].trim().split(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String date \u003d dateAndTime[0].trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String time \u003d dateAndTime[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Event newEvent \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.ListTasks.add(newEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int pos \u003d this.ListTasks.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printAddTask(pos, newEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new EventEmptyException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Extracts the task to be deleted from the user input,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * and deletes that task from the list of tasks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws DeleteInvalidException If user has not keyed in a valid task to"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * be deleted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void deleteTask(String input) throws DeleteInvalidException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        sc.next(); // ignore delete word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (sc.hasNextInt()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int taskIdx \u003d sc.nextInt() - 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Task delTask \u003d this.ListTasks.get(taskIdx);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.ListTasks.remove(taskIdx);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int num \u003d this.ListTasks.size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printDeleteTask(num, delTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new DeleteInvalidException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Extracts the task to be searched from the user input,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * and then searches for the task in the list of tasks. Will output"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * the task description and status."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws FindEmptyException If user doesn\u0027t key in a task to be searched."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void findTask(String input) throws FindEmptyException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        sc.next(); // ignore find word"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String searchWord \u003d sc.nextLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printHoriLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printLine(Ui.FIND_STRING);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int countFound \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            for (Task eachTask : this.ListTasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (eachTask.toString().contains(searchWord)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    countFound++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    Ui.printLine(countFound + \".\" + eachTask);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (countFound \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Ui.printLine(Ui.NONE_FOUND);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printHoriLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new FindEmptyException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Lists all the tasks in the list, printing their description"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * and their status."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printHoriLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (int a \u003d 0; a \u003c this.ListTasks.size(); a++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int displayNum \u003d a + 1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Ui.printLine(displayNum + \". \" + this.ListTasks.get(a) + \"\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printHoriLine();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Extracts the done task from the user input and changing the status of"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * that task to Done."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param inputString User input."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void doneTask(String inputString) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String[] tokens \u003d inputString.split(\" \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int taskNum \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int index \u003d taskNum - 1; // list is zero-indexed while user sees a one-indexed list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.ListTasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printHoriLine();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printLine(Ui.DONE_STRING);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printLine(this.ListTasks.get(index) + \"\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Ui.printHoriLine();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Below are the various exceptions that are thrown by the methods in the TaskList class."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class ToDoEmptyException extends Exception {}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class EventEmptyException extends Exception {}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class DeadlineEmptyException extends Exception {}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class DeleteInvalidException extends Exception {}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class FindEmptyException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 184
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * ToDo class is a subclass of Task. It is mostly the same"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * except that Task methods are overriden with more extensive versions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description User-defined description of the ToDo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public ToDo(String description){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Facilitating the storing of ToDo in disk as correct format, for"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * easy reinitialisation into task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Correct format for storage of ToDo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"todo \" + this.description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Organise description of ToDo for output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Correct format for output of ToDo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return \"[T]\" + getStatusIcon() + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 35
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Ui class deals with interaction with the user, asking for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * input and dealing with output."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * The constants that will be printed out by the methods in Ui class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String GREETING \u003d \"Hello! I\u0027m Duke \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"What can I do for you? \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String HORIZONTAL_LINE \u003d new String(new char[42]).replace(\"\\0\", \"\\u23E4\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String BYE_STRING \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String DONE_STRING \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String ADD_STRING \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String DELETE_STRING \u003d \"Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String TASK_NUM_STRING_1  \u003d\"Now you have \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String TASK_NUM_STRING_2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String FIND_STRING \u003d \"Here are the matching tasks in your list: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String NONE_FOUND \u003d \"Sorry, could not find any tasks containing your search words. \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints a line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param str The string of words to be printed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printLine(String str) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printHoriLine() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints the greeting for Duke, when Duke is first brought up."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printGreet() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(LOGO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(GREETING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints the exit message for Duke, when user has ended usage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printBye() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(BYE_STRING + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Takes in the user input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return User input as a string of words."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public String takeInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String inputString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        inputString.trim(); // trim any trailing whitespace"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return inputString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints confirmation of task addition and number of tasks in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param pos The number of tasks in the list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param newTask The task that was added. Can be ToDo, Deadline or Event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printAddTask(int pos, Task newTask) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(ADD_STRING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(newTask.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"Now you have \" + pos + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints confirmation of task deletion and number of tasks in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param pos The number of tasks in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param delTask The task that was deleted. Can be ToDo, Deadline or Event."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printDeleteTask(int pos, Task delTask) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(DELETE_STRING);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(delTask.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(TASK_NUM_STRING_1 + pos + TASK_NUM_STRING_2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints error message for invalidDukeInputException."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printInvalidDuke() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" + \"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints error message for an Empty Todo Command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printToDoEmpty() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\" + \"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints error message for Empty Deadline Command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printDeadlineEmpty() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"â˜¹ OOPS!!! The description of a deadline cannot be empty.\" + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints error message for Empty Event Command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printEventEmpty() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"â˜¹ OOPS!!! The description of a event cannot be empty.\" + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints error message for Invalid Delete Command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printDeleteInvalid() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"â˜¹ OOPS!!! Please enter the valid number of a Task.\" + \"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Prints error message for Empty Find Command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static public void printFindEmpty() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printLine(\"â˜¹ OOPS!!! Please enter a valid search word.\" + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        printHoriLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 154
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void decideCmd_genericInvalidInput_invalidDukeInputException(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertThrows(InvalidDukeInputException.class, () -\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Parser.decideCmd(\"kkj\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        });"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 13
    }
  }
]
