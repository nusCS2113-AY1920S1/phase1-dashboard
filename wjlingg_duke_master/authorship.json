[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    testImplementation \u0027org.hamcrest:hamcrest-library:1.3\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    mainClassName \u003d \"duke.src.main.java.Duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 30,
      "-": 14
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates dialog box for Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param text Duke response"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param img Duke image"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return dialog box"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 65
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.filePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Duke processes different commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for Duke class to instantiation Ui, Storage, TaskList classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param filePath String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Method to start the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Starting the program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param args the command line parameter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 63,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Duke duke \u003d new Duke(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 50
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the bye command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Display the exit message and the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * A flag to raise a request to exit the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if user wants to exit the program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 32
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Abstract class to represent command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String userInputCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 17
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_DEADLINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_DEADLINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the deadline command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DeadlineCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DeadlineCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the deadline command to add deadline task to task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the date and time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(8) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\",2)[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (description.contains(\"/by\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String details \u003d description.trim().split(\"/by\", 2)[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String date \u003d description.trim().split(\"/by\", 2)[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (details.isEmpty() || date.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_DEADLINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (isParseDate(date)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        taskList.addDeadlineTask(details, date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        storage.saveFile(taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_DEADLINE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validate the format of the input date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param dateStr String containing user input date and time"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if user input the correct format for the date and time and false otherwise"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParseDate(String dateStr) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            simpleDateFormat.parse(dateStr);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 84
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_DELETE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the delete command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DeleteCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DeleteCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the delete command to delete task in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(6) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\",2)[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + taskList.getSize() + \".\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.deleteTask(index - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 82
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_FOLLOWUP_EMPTY_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_EMPTY_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_EMPTY_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_UNKNOWN_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_DONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the done command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class DoneCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand input command from user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DoneCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Validates that user inputs an integer value for the index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param input String containing integer input from user for the index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return true if the user inputs an integer and false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static boolean isParsable(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the done command to mark task as done in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     *                      or user inputs an invalid index or the list of tasks is empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_DONE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EMPTY_INDEX + MESSAGE_FOLLOWUP_EMPTY_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\",2)[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (isParsable(description)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                //converting string to integer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                int index \u003d Integer.parseInt(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        throw new DukeException(ERROR_MESSAGE_INVALID_INDEX + taskList.getSize() + \".\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.doneTask(index - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_UNKNOWN_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 82
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the event command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class EventCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public EventCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the event command to add event task to task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or user inputs a wrong format for the description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\",2)[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (description.contains(\"/at\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String details \u003d description.trim().split(\"/at\", 2)[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                String date \u003d description.trim().split(\"/at\", 2)[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (details.isEmpty() || date.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    taskList.addEventTask(details, date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    storage.saveFile(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_EVENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 59
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_FIND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_FIND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the find command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public FindCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the find command to search for tasks in task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input or there is no matching task found in tbe list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(MESSAGE_FIND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                System.out.println(\"     \" + (i + 1) + \". \" + taskList.findTask(description).get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 53
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_TASKED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the list command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ListCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the list command to display all tasks in task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_TASKED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.listTask().size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(taskList.listTask().get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 40
    }
  },
  {
    "path": "src/main/java/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_FOLLOWUP_NUll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_GENERAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_TODO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the todo command and inherits all the fields and methods of Command parent class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class TodoCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TodoCommand(String userInputCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.userInputCommand \u003d userInputCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the todo command to add tasks to task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param ui deals with interactions with the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognize the user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_GENERAL + MESSAGE_FOLLOWUP_NUll);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().charAt(4) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String description \u003d userInputCommand.trim().split(\"\\\\s\",2)[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            taskList.addTodoTask(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            storage.saveFile(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 50
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * A class to store all the initialisation of the static error messages to String value."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String filePath \u003d \"C:\\\\Users\\\\Wen Jian\\\\Desktop\\\\duke\\\\src\\\\main\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_ADDED \u003d \"     Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_DELETE \u003d \"     Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FIND \u003d \"     Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_EMPTY_INDEX \u003d \"       Kindly enter the command again with an index.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_FOLLOWUP_NUll \u003d \"       Kindly enter the command again with a description.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_ITEMS1 \u003d \"     Now you have \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_ITEMS2 \u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_MARKED \u003d \"     Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String MESSAGE_TASKED \u003d \"     Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_DEADLINE \u003d \"       \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"☹ OOPS!!! Please specify the deadline in this format: \\n         \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"deadline [event description] /by [day/month/year time]\\n         \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Eg: 28/8/2019 2359 (For date and time format)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_INDEX \u003d \"       ☹ OOPS!!! The index cannot be empty.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_EMPTY_LIST \u003d \"       \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"☹ OOPS!!! The list is empty.\\n       \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Kindly add a task.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_EVENT \u003d \"       \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"☹ OOPS!!! Please specify the event details in this format: \\n         \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"event [event description] /at [event time or venue]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_GENERAL \u003d \"       ☹ OOPS!!! The description cannot be empty.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_DATE \u003d \"       \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"☹ OOPS!!! Please specify the date and time in this format: \\n         \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"[day/month/year time] Eg: 28/8/2019 2359\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_INVALID_INDEX \u003d \"     Invalid index entered.\\n     \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Kindly enter command with index not more than \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_UNKNOWN_INDEX \u003d \"     Unknown index entered.\\n     \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"Kindly enter an integer for the index.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_LOADING \u003d \"     ☹ OOPS!!! Error loading file: \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_NOTFOUND \u003d \"     \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            + \"☹ OOPS!!! I\u0027m sorry, but there is no matching tasks in your list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String ERROR_MESSAGE_RANDOM \u003d \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String COMMAND_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static final String DIVIDER \u003d \"   ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 56
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * DukeException as a child class inherits all the fields and methods of Exception parent class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for the class DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param errorMessage String containing the error messages"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 15
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import command.TodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_RANDOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_BYE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_DEADLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_DELETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_DONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_EVENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_FIND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_LIST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.COMMAND_TODO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Making sense of the user input command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Processes the different user input command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputCommand String containing input command from user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return the different command object corresponding to the user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke cannot recognise the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public static Command parse(String userInputCommand) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (userInputCommand.trim().equals(COMMAND_LIST)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new ListCommand(userInputCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.trim().equals(COMMAND_BYE)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DONE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return new DoneCommand(userInputCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 8).equals(COMMAND_DEADLINE)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new DeadlineCommand(userInputCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 6).equals(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new DeleteCommand(userInputCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 5).equals(COMMAND_EVENT)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new EventCommand(userInputCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 4).equals(COMMAND_TODO)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new TodoCommand(userInputCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (userInputCommand.contains(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (userInputCommand.trim().substring(0, 4).equals(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                return new FindCommand(userInputCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_RANDOM);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 77
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles the ability to read and write to the storage location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static final ArrayList\u003cTask\u003e arrTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for the class Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param filePath String containing the directory in which the tasks are to be stored"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Writing to file to save the task to file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList contains the task list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void saveFile(TaskList taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            for (Task task: taskList.getTaskList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                bufferedWriter.write(task.toSaveString() + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (Exception exc) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            exc.printStackTrace(); // If there was an error, print the info."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Load all the save tasks in the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return the list of tasks in taskList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if Duke is not able to load the tasks from the file or unable to open the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            while ((content \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                if (content.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    String details \u003d content.substring(8);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    Task task \u003d new Todo(details);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    arrTaskList.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    //need to escape character in string for \"|\" by adding \"\\\\\" in front of \"|\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    //if not the split will be on the wrong place"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    String[] split \u003d content.substring(8).split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    if (content.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        Task task \u003d new Deadline(split[0], split[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrTaskList.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    } else if (content.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        Task task \u003d new Event(split[0], split[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        if (content.charAt(4) \u003d\u003d \u0027+\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        arrTaskList.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            fileReader.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"Unable to open file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            System.out.println(\"Error reading file \u0027\" + filePath + \"\u0027\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrTaskList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 95
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Represent a deadline task and inherits all the fields and methods of Task parent class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String by; // private instance variables"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param by String containing the date and time of the deadline for the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"D\" + super.toSaveString() + \" | \" + by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Convert the user input date and time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param userInputDate String containing the user input date and time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the converted date and time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String convertDate(String userInputDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String suffix \u003d \"\";// st, nd, rd, th"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String extra \u003d \"\";// am, pm"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String month \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String[] monthArray \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                               \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String date \u003d userInputDate.trim().split(\"\\\\s\", 2)[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String time \u003d userInputDate.trim().split(\"\\\\s\", 2)[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int hr;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int day \u003d Integer.parseInt(date.split(\"/\", 3)[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int mth \u003d Integer.parseInt(date.split(\"/\", 3)[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int first \u003d Integer.parseInt(time.substring(0, 1));//first digit of the time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int second \u003d Integer.parseInt(time.substring(1, 2));//second digit of the time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (day \u003d\u003d 1 || day \u003d\u003d 21 || day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            suffix \u003d \"st\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (day \u003d\u003d 2 || day \u003d\u003d 22) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            suffix \u003d \"nd\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else if (day \u003d\u003d 3 || day \u003d\u003d 23) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            suffix \u003d \"rd\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            suffix \u003d \"th\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        //differentiating morning and afternoon"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        extra \u003d (first \u003d\u003d 0 || (first \u003d\u003d 1 \u0026\u0026 (second \u003d\u003d 0 || second \u003d\u003d 1))) ? \"am\" : \"pm\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int change \u003d Integer.parseInt(time.substring(0, 2)) - 12;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        //converting the hours"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        hr \u003d (first \u003d\u003d 0) ? ((second \u003d\u003d 0) ? 12 : second) :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                ((first \u003d\u003d 1) ? ((second \u003c\u003d 2) ? (first * 10 + second) :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        change) : change);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        //converting the month"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (mth \u003d\u003d i + 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                month \u003d monthArray[i];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String min \u003d time.substring(2, 4);//last 2 digits of the time"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String yr \u003d date.split(\"/\", 3)[2];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String dateline \u003d \"\";//final conversion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        dateline \u003d day + suffix + \" of \" + month + \" \" + yr + \", \" + hr + \".\" + min + extra;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return dateline;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 91
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Represent an event task and inherits all the fields and methods of Task parent class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param at String containing the venue of the event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"E\" + super.toSaveString() + \" | \" + at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at:\" + at + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 37
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Abstract class to represent task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected String description; //User input"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    protected boolean isDone; //To check if the task is completed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.description \u003d description; //user input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.isDone \u003d false; //initially marked as not completed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Get the description of the different tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Set the task as done after completion."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    } //marked as completed when done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Get the current status of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing plus symbol if completed and minus symbol otherwise"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return (isDone ? \"+\" : \"-\"); //return plus or minus symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \" | \" + getStatusIcon() + \" | \" + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 57
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Represent a todo task and inherits all the fields and methods of Task parent class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for class Todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        super(description);//super class constructor call to the Task(description) constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format to store in file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"T\" + super.toSaveString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Converts user input command to a standardized format in taskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return String containing the standardized format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 33
    }
  },
  {
    "path": "src/main/java/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_ADDED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_DELETE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_ITEMS1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_MARKED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_NOTFOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " * Handles all the operations for the task in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private static String msg \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor for the class TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Constructor to initialize taskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param taskList loaded tasklist from file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Search for matching tasks in taskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the targeted search"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of matching tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if not able to find any matching task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e findTask(String description) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            if (taskList.get(i).getDescription().contains(description)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                arrFind.add(taskList.get(i).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (arrFind.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            throw new DukeException(ERROR_MESSAGE_NOTFOUND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            return arrFind;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Get all the tasks in the current taskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of tasks in the taskList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e listTask() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c getSize(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            final int displayIndex \u003d i + DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrList.add(\"     \" + displayIndex + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Get number of tasks in taskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return Integer corresponding to the number of tasks in taskList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Adds deadline task to taskList."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param by String containing the date and time of the deadline for the task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addDeadlineTask(String description, String by) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String date \u003d new Deadline(description, by).convertDate(by);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.add(new Deadline(description, date));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Adds event task to taskList."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param at String containing the venue of the event"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addEventTask(String description, String at) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.add(new Event(description, at));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Adds todo task to taskList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param description String containing the description of the task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void addTodoTask(String description) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.add(new Todo(description));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        int index \u003d taskList.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_ADDED + \"       \" + taskList.get(index - 1) + \"\\n\" + MESSAGE_ITEMS1 + index + msg);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Mark the task as completed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void doneTask(int i) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.get(i).markAsDone();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_MARKED + \"       \" + taskList.get(i));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Delete task in taskList."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @param i index of the task in taskList"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void deleteTask(int i) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        if (taskList.size() - 1 \u003c\u003d 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d \" task in the list.\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            msg \u003d MESSAGE_ITEMS2;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_DELETE + \"       \" + taskList.get(i)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                + \"\\n\" + MESSAGE_ITEMS1 + (taskList.size() - 1) + msg);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.remove(taskList.get(i));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Get the current taskList in file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return ArrayList containing tasks"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 162
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.filePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.MESSAGE_BYE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.ERROR_MESSAGE_LOADING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static common.Messages.DIVIDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Display welcome message of the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \"      ___         _        \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        + \"     |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        + \"     | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        + \"     | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(DIVIDER + logo + \"     Hello! I\u0027m Duke\\n\" + \"     What can I do for you?\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(MESSAGE_BYE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.print(DIVIDER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(ERROR_MESSAGE_LOADING + filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 52
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestDeadlineToSaveString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"D | - | return book | 2/12/2019 1800\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                new Deadline(\"return book\", \"2/12/2019 1800\").toSaveString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestDeadlineToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"[D][-] return book (by: 2/12/2019 1800)\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                new Deadline(\"return book\", \"2/12/2019 1800\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestDeadlineDateConversion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String date \u003d new Deadline(\"return book\", \"2/12/2019 1800\").convertDate(\"2/12/2019 1800\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"2nd of December 2019, 6.00pm\", date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestDeadlineGetStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Task deadline \u003d new Deadline(\"borrow book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"+\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 36
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestEventToSaveString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"E | - | project meeting | Aug 6th 2-4pm\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                new Event(\"project meeting\", \"Aug 6th 2-4pm\").toSaveString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestEventToString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"[E][-] project meeting (at: Aug 6th 2-4pm)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "                new Event(\"project meeting\", \"Aug 6th 2-4pm\").toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestEventGetStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Task event \u003d new Event(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"+\", event.getStatusIcon());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 30
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Creates test cases by adding tasks to taskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of tasks in taskList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public TaskList taskListTestStr() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addDeadlineTask(\"return book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addTodoTask(\"text ui testing\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addDeadlineTask(\"assignment 3\", \"9/9/2019 1800\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addEventTask(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addTodoTask(\"JUnit testing\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Tests findTask method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of items corresponding to the found items"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @throws DukeException if not able to find any matching items"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e findActualTestStr() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        String description \u003d \"test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrListFind \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListTestStr().findTask(description).size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrListFind.add((i + 1) + \". \" + taskListTestStr().findTask(description).get(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrListFind;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Tests deleteTask method."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of remaining tasks in taskList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e deleteActualTestStr() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrListDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addDeadlineTask(\"return book\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addTodoTask(\"text ui testing\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addDeadlineTask(\"assignment 3\", \"9/9/2019 1800\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addEventTask(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.addTodoTask(\"JUnit testing\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrListDelete.add((i + 1) + \". \" + taskList.getTaskList().get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrListDelete;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * Tests listTask method."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of tasks in taskList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e listActualTestStr() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        taskListTestStr().getTaskList().remove(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListTestStr().getSize(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "            arrList.add(taskListTestStr().listTask().get(i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * States the expected results for findTask method."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of expected items"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e addExpectedFindTestStr() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"1. [T][-] text ui testing\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"2. [T][-] JUnit testing\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrListTest;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * States the expected results for deleteTask method."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of expected items"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e addExpectedDeleteTestStr() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"1. [T][-] text ui testing\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"2. [D][-] assignment 3 (by: 9th of September 2019, 6.00pm)\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"3. [E][-] project meeting (at: Aug 6th 2-4pm)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"4. [T][-] JUnit testing\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrListTest;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * States the expected results for listTask method."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     * @return list of expected items"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public ArrayList\u003cString\u003e addExpectedListTestStr() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        ArrayList\u003cString\u003e arrListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"     1. [D][-] return book (by: 2nd of December 2019, 6.00pm)\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"     2. [T][-] text ui testing\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"     3. [D][-] assignment 3 (by: 9th of September 2019, 6.00pm)\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"     4. [E][-] project meeting (at: Aug 6th 2-4pm)\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        arrListTest.add(\"     5. [T][-] JUnit testing\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        return arrListTest;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestFindCommand() throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(addExpectedFindTestStr(), findActualTestStr());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestDeleteCommand() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(addExpectedDeleteTestStr(), deleteActualTestStr());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestListCommand() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(addExpectedListTestStr(), listActualTestStr());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 122
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestTodoToSaveString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"T | - | borrow book\", new Todo(\"borrow book\").toSaveString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestTodoToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"[T][-] borrow book\", new Todo(\"borrow book\").toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wjlingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    public void shouldTestTodoGetStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        Task todo \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        // assert statements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "        assertEquals(\"+\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wjlingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wjlingg": 27
    }
  }
]
