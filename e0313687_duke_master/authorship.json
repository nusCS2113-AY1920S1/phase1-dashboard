[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 10,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Duke program is a simple Personal Assistant Chatbot that helps to keep track of various things."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * @autho e0313687"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static final String FILE_PATH \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This creates Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private Duke(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Storage storage \u003d new Storage(FILE_PATH, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        while (true){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            String userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                command.execute(ui, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                if (command instanceof ExitCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This is the entry point;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static void main (String[] args){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 41,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * A command class to add a new task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * A new AddCommand is created given the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param task The task to add to the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public AddCommand(Task task){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This command is executed on the user interface and the given task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param ui The user interface that displays tasks on the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param storage The storage object that contains the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        storage.getTasks().add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showAdd(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showTotal(storage.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * An abstract class representing individual commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "         * This command is executed on the user interface and the given task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "         *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "         * @param ui The user interface that displays tasks on the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "         * @param storage The storage object that contains the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "         * @throws DukeException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "         */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        public abstract void execute(Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 20
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * A command class to delete a new task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * A new DeleteCommand is created with the given index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This command is executed on the user interface and the given list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param ui The user interface that displays tasks on the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param storage The storage object that contains the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            Task task \u003d storage.getTasks().remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            ui.showDelete(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            throw new DukeException(\"Index requested is out of bounds!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showTotal(storage.getTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * A command class to exit the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This command executes on the user interface and the given list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param ui The user interface that displays tasks on the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param storage The storage object that contains the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 21
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * A command class to find a task given keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public FindCommand(String word){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ArrayList\u003cTask\u003e userCommands \u003d storage.getTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (Task task: userCommands) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            if (task.toString().contains(word)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showList(result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * A command class to list all the tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This command is executed on the user interface and the given task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param ui The user interface that displays tasks on the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param storage The storage object that contains the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ui.showList(storage.getTasks());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 21
    }
  },
  {
    "path": "src/main/java/duke/command/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * A command class to mark a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class MarkAsDoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * A new MarkAsDoneCommand is created with the given index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public  MarkAsDoneCommand(int index){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This command is executed on the user interface and the given list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param ui The user interface that displays tasks on the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param storage The storage object that contains the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void execute(Ui ui, Storage storage){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            Task userCommands \u003d storage.getTasks().get(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            userCommands.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            ui.showMarkDone(userCommands);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Index requested is out of bounds!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 39
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The DukeException class is an error during operation of the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Parser class deals with making sense of the user command, which reads from standard input and returns Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses the userInput and returns a Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user Interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The corresponding Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If userInput is invalid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String commandWord \u003d getCommandWord(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new AddCommand(ParserUtil.createDeadline(userInput));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new DeleteCommand(ParserUtil.getIndex(userInput));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new MarkAsDoneCommand(ParserUtil.getIndex(userInput));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new AddCommand(ParserUtil.createEvent(userInput));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new FindCommand(getWord(userInput));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                return new AddCommand(ParserUtil.createTodo(userInput));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, I don\u0027t understand.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This gets command word from the userInput."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The command word."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static String getCommandWord(String userInput) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return userInput.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This gets word from the userInput."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The word."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If userInput is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private static String getWord(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return userInput.strip().split(\" \")[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            throw new DukeException(\"Invalid format. Refer to help for command format.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 66
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The ParserStorage class deals with storage related operations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ParserStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses a task from String format stored in the files back to the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param line The String description of a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The corresponding task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If the task cannot be converted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static Task createTaskFromStorage(String line) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            String type \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            String status \u003d taskParts[1].strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            String description \u003d taskParts[2].strip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    task \u003d new Deadline(description, ParserTime.parseStringToDate(taskParts[3].strip()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    task \u003d new Deadline(description, taskParts[3].strip());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    task \u003d new Event(description, ParserTime.parseStringToDate(taskParts[3].strip()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    task \u003d new Event(description, taskParts[3].strip());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            throw new DukeException(\" Rip, Task cannot be converted to String!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses a task from task to String format in order to be stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param task The task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The corresponding String format of the task object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If the task cannot be converted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public static String toStorageString(Task task) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return \"D | \" + task.getDone() + \" | \" + task.getDescription() + ((Deadline) task).getTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return \"E | \" + task.getDone() + \" | \" + task.getDescription() + ((Event) task).getTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } else if (task instanceof Todo) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return \"T | \" + task.getDone() + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        throw new DukeException(\" Rip, Task cannot be converted to String!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 67
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The ParserTime class deals with time related operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "class ParserTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses a Stirng into a LocalDateTime object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param line The input String of the date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The date and time, with missing information padded with current time information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If the format is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    static LocalDateTime parseStringToDate(String line) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String[] timePatterns \u003d { \"dd/MM/yy\", \"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\", \"dd/MM/yyyy HHmm\", \"dd/MM/yy HHmm\", \"[\u0027next \u0027][\u0027this \u0027]E\", \"[\u0027this \u0027][\u0027next \u0027]EEEE\", \"HHmm\", };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        TimePatternType[] timeTypes \u003d {TimePatternType.DATE, TimePatternType.DATE_TIME,  TimePatternType.DATE_TIME, TimePatternType.DATE_TIME, TimePatternType.DAY_OF_WEEK, TimePatternType.DAY_OF_WEEK,TimePatternType.TIME};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (int i \u003d 0; i \u003c timePatterns.length;) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(timePatterns[i]).parse(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                switch (timeTypes[i]) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case DATE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case DATE_TIME:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case DAY_OF_WEEK:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    case TIME:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                        return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        throw new DukeException(\"Invalid format. Refer to help for command format.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 52
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The ParserUtil class deals with utility functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses the userInput and returns a new deadline constructed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The new deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If input is invalid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    static Deadline createDeadline(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String[] deadlineDetails \u003d userInput.substring(\"deadline\".length()).strip().split(\"/by\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if ((deadlineDetails.length !\u003d 2) || (deadlineDetails[1] \u003d\u003d null)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Invalid format. Refer to help for command format.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (deadlineDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Ah oh, the description cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return new Deadline(deadlineDetails[0].strip(), ParserTime.parseStringToDate(deadlineDetails[1].strip()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return new Deadline(deadlineDetails[0].strip(), deadlineDetails[1].strip());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses the userInput and returns a new event constructed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The new event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If input is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    static Event createEvent (String userInput) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String[] eventDetails \u003d userInput.substring(\"event\".length()).strip().split(\"/by\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (eventDetails.length !\u003d 2 || eventDetails[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Invalid format. Refer to help for command format.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (eventDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Ah oh, the description cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return new Event(eventDetails[0].strip(), ParserTime.parseStringToDate(eventDetails[1].strip()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return new Event(eventDetails[0].strip(), eventDetails[1].strip());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses the userInput and returns a new to-do constructed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The new to-do."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If input is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    static Todo createTodo(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String description \u003d userInput.substring(\"todo\".length()).strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Ah oh, the description cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This parses the userInput and returns an index extracted from it."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @throws DukeException If input is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    static int getIndex (String userInput) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            int temp \u003d Integer.parseInt(userInput.replaceAll(\"\\\\D+\", \"\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            return temp-1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            throw new DukeException(\"Invalid format. Refer to help for command format.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 86
    }
  },
  {
    "path": "src/main/java/duke/parser/TimePatternType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The enumerations for different specificity of time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public enum TimePatternType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    DAY_OF_WEEK, DATE_TIME, DATE, TIME"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 8
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.parser.ParserStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Storage class manages the storage of duke data in local storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private ArrayList\u003cTask\u003e userCommands;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This constructs a Storage object that contains tasks and storage related operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param filePath The filepath to the txt file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param ui The user interface displaying tasks on the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Storage(String filePath, Ui ui){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This reads tasks from filepaths, or creates empty tasks if file cannot be read."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private void load(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                newTasks.add(ParserStorage.createTaskFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Oh no, file not found!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        userCommands \u003d newTasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void write() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            for (Task task : userCommands) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "                writer.write(ParserStorage.toStorageString(task) + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Oops, file not saved!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return userCommands;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 71
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Deadline class represents a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This initializes a deadline with the given description and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param description The description of this deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param startDate The date of this deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Deadline (String description, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(description, \"D\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This initializes a deadline with the given description and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param description The description of this deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param time The date of this deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Deadline (String description, String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(description, \"D\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This returns a string representation of this deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return \"[\" + this.getType() + \"][\" + this.getStatusIcon() + \"] \" + this.getDescription() + \" (by: \" + (startDate \u003d\u003d null ? time : startDate.toString()) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return startDate \u003d\u003d null ? time : startDate.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 45
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Event class represents a event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This initializes a event with the given description and date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param description The description of this event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param startDate The date of this event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Event (String description, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(description, \"E\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This initializes a event with the given description and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param description The description of this event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param time The time of this event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Event (String description, String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(description, \"E\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This returns a string representation of this event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return \"[\" + this.getType() + \"][\" + this.getStatusIcon() + \"] \" + this.getDescription() + \" (at: \" + (startDate \u003d\u003d null ? time : startDate.toString()) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return startDate \u003d\u003d null ? time : startDate.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 45
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Task class represents a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This initializes a task with the given description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param description The description of this task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param type The type of this task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Task(String description, String type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return (isDone ? \"✓\" : \"\\u2718\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This returns a string representation of this task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return \"[\" + this.getType() + \"][\" + this.getStatusIcon() + \"] \" + this.getDescription() + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0313687": 59
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Todo class represents a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Todo (String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        super(description, \"T\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 13
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": " * The Ui class interacts with the user as it handles user input and messages shown to user of this application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints the description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showAdd(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints the bye message to the user when they exit the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints the task that is deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showDelete (Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"Alright! I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints an error message to the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param errorMessage The error message shown."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints the task that is marked as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showMarkDone (Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints the list of the tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userCommands The list of tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showList(ArrayList\u003cTask\u003e userCommands) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommands.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println((i+1) + \". \" + userCommands.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints the number of tasks in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @param userCommands The list of tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showTotal (ArrayList\u003cTask\u003e userCommands) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"Now you have \" + userCommands.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This prints a welcome message to the user at the startup."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * This scans the next line from standard input, returning a String containing the user input with leading and trailing whitespaces removed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     * @return The String corresponding to the user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0313687"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        String line \u003d scanner.nextLine().strip();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        System.out.println(\"\\n\" + line);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 96
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 9
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Storage storage \u003d new Storage(\"duke.txt\", ui);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        Task task \u003d new Todo(\"homework\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        assertTrue(storage.getTasks().contains(task));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 20
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(Parser.parse(\"deadline eat book /by 6pm\") instanceof AddCommand);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(Parser.parse(\"event group meeting /at outside LT3\") instanceof AddCommand);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(Parser.parse(\"todo work\") instanceof AddCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\") instanceof MarkAsDoneCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 21
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0313687"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0313687"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0313687"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void createDeadline() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(ParserUtil.createDeadline(\"deadline A-Exceptions /by tonight\") instanceof Deadline);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void CreateEvent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(ParserUtil.createEvent(\"event Group meeting /at outside Lt7\") instanceof Event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void createTodo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertTrue(ParserUtil.createTodo(\"Level10\") instanceof Todo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0313687"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            assertEquals(ParserUtil.getIndex(\"done 1\"), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0313687"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0313687"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0313687"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0313687"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0313687": 49
    }
  }
]
