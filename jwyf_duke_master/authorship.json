[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 14,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * A Personal Assistant Chatbot, Duke, that helps a person to keep track of various things."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param filePath The string representing the path to the file of which Duke loads data from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showFileNotFoundError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showDukeError(e); //save corrupted exceptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method runs Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printHelloMsg();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                ui.showDukeError(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                ui.showIOExceptionError(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                ui.showIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                ui.showNumberFormatException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Main function."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param args Command-line arguments as an array of String objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String filePath \u003d \"C:/Users/josep/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 65,
      "-": 5
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ByeCommand(String input) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the ByeCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printByeMsg();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 24
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the classes inheriting Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param input The string representing the user\u0027s input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Command(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method returns the isExit status of the Command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A boolean, true if isExit is true, false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * An abstract method to be overwritten by inheriting classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException The Duke-specific exception thrown when the user input is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IndexOutOfBoundsException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws NumberFormatException The exception thrown when the input format is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            IOException, IndexOutOfBoundsException, NumberFormatException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 45
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public DeadlineCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the DeadlineCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException The Duke-specific exception thrown when the user input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Deadline deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (input.substring(8).isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String[] deadlineArray \u003d input.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (deadlineArray[0].isBlank() || deadlineArray[1].isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_DEADLINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        deadline \u003d new Deadline(deadlineArray[0], deadlineArray[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printAddMsg(deadline, taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 41
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the DeleteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException The Duke-specific exception thrown when the user input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (input.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_DELETE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int taskNum \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Task currentTask \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList.remove(currentTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printDeleteMsg(currentTask, taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 37
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the DoneCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IndexOutOfBoundsException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws NumberFormatException The exception thrown when the input format is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws IndexOutOfBoundsException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            NumberFormatException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        int taskNum \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Task currentTask \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        currentTask.setDoneStatus(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printDoneMsg(currentTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 34
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public EventCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the EventCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException The Duke-specific exception thrown when the user input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (input.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String[] eventArray \u003d input.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (eventArray[0].isBlank() || eventArray[1].isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_EVENT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        event \u003d new Event(eventArray[0], eventArray[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printAddMsg(event, taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 41
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the FindCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException The Duke-specific exception thrown when the user input is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (input.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_FIND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String keyWord \u003d input.substring(5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ArrayList\u003cTask\u003e findList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (Task t : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String command \u003d t.getCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (command.contains(keyWord)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                findList.add(t);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printFindMsg(findList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 39
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ListCommand(String input) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        ui.printList(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 23
    }
  },
  {
    "path": "src/main/java/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ToDoCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method executes the ToDoCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The list of tasks of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param ui The ui, handler of Duke\u0027s responses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storage The Storage, handler of how Duke reads from and writes to its save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException The Duke-specific exception thrown when the user input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the input is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (input.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_TODO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ToDo todo \u003d new ToDo(input.substring(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            taskList.add(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.printAddMsg(todo, taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 37
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ExceptionType exceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for the exceptions specific to Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param exceptionType The exception type that is specific to Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public DukeException(ExceptionType exceptionType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.exceptionType \u003d exceptionType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * The getter for the exceptions specific to Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The exception type that is specific to Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ExceptionType getExceptionType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return exceptionType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 22
    }
  },
  {
    "path": "src/main/java/exceptions/ExceptionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public enum ExceptionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    EMPTY_TODO, EMPTY_DEADLINE, EMPTY_EVENT, UNKNOWN_COMMAND, UNKNOWN_ERROR,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    SAVE_CORRUPTED, EMPTY_FIND, EMPTY_DELETE, EMPTY_FIELD"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 6
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.ToDoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method parses the input into a Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param input The string the user entered."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The Command that is executed next."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException This specific-to-Duke exception is thrown when the input by the user is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IndexOutOfBoundsException The exception thrown when the input is out of bounds."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws NumberFormatException The exception thrown when the input is in the wrong format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public static Command parse(String input) throws DukeException,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            IndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.EMPTY_FIELD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new ByeCommand(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return addTask(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method parses a valid input into a Command, else it returns a DukeException."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param input The string the user entered."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A Command that is given to the parser method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException This specific-to-Duke exception is thrown when the input by the user is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private static Command addTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String taskType \u003d words[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new ToDoCommand(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } case \"deadline\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new DeadlineCommand(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } case \"event\": {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return new EventCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } default: {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            throw new DukeException(ExceptionType.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 65
    }
  },
  {
    "path": "src/main/java/storage/FileWriting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class FileWriting {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method writes a string text to the text file at the file path."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param filePath The string which represents the file path of the text save file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param textToAdd The string which represents the content to be written to the text file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the filepath is invalid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method appends a string text to the text file at the file path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param filePath The string which represents the file path of the text save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param textToAppend The string which represents the content to be written to the text file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the filepath is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public static void appendToFile(String filePath, String textToAppend) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 30
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.ExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor of Storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param filePath A string representing the file path to Duke\u0027s save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method loads the text save file of Duke and returns the data of it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The TaskList from previous saves of Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws FileNotFoundException This exception is thrown when the save file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws DukeException This Duke-specific exception is thrown when the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public TaskList load() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String currentInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (currentInput.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                String[] todoArray \u003d currentInput.split(\" \\\\| \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                ToDo toDo \u003d new ToDo(todoArray[2]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if (todoArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    toDo.setDoneStatus(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    toDo.setDoneStatus(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                taskList.add(toDo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } else if (currentInput.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                String[] deadlineArray \u003d currentInput.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Deadline deadline \u003d new Deadline(deadlineArray[2], deadlineArray[3]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if (deadlineArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    deadline.setDoneStatus(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    deadline.setDoneStatus(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                taskList.add(deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } else if (currentInput.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                String[] eventArray \u003d currentInput.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Event event \u003d new Event(eventArray[2], eventArray[3]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                if (eventArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    event.setDoneStatus(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    event.setDoneStatus(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                throw new DukeException(ExceptionType.SAVE_CORRUPTED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method writes to the text save file of Duke."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param modifiedList The TaskList to be saved, written into the text file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @throws IOException The exception thrown when the file is not found."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void save(TaskList modifiedList) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList \u003d modifiedList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String formattedList \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String taskType \u003d currentTask.getTaskType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Deadline deadline \u003d (Deadline) currentTask;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                formattedList \u003d formattedList + deadline.getTaskType() + \" | \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + (deadline.getDoneStatus() ? 1 : 0) + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + deadline.getCommand() + \" | \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + deadline.getDateString()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + System.lineSeparator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Event event \u003d (Event) currentTask;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                formattedList \u003d formattedList + event.getTaskType() + \" | \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + (event.getDoneStatus() ? 1 : 0) + \" | \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + event.getCommand() + \" | \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + event.getDate()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + System.lineSeparator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                formattedList \u003d formattedList + currentTask.getTaskType() + \" | \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + (currentTask.getDoneStatus() ? 1 : 0) + \" | \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + currentTask.getCommand()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                        + System.lineSeparator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        FileWriting.writeToFile(filePath, formattedList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 109
    }
  },
  {
    "path": "src/main/java/task/DateValidation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DateValidation{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method validates the format of the date string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param date The string representing the date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A boolean, true of the date string is of a valid format, false otherwise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public static boolean validateJavaDate(String date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "         * Set preferred date format,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "         * For example MM-dd-yyyy, MM.dd.yyyy,dd.MM.yyyy etc."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "         */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"DD/mm/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        /* Create Date object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "         * parser the string into date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Date javaDate \u003d simpleDateFormat.parse(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 30
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param description The description string of the Deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param by The time string by which the Deadline task is due."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super.taskType \u003d \"D\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        checkDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method checks if the time string of the Deadline is valid to be converted to LocalDateTime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private void checkDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String[] byArray \u003d by.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String date \u003d byArray[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            String time \u003d byArray[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            if (DateValidation.validateJavaDate(by) \u003d\u003d true) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                String[] dateArray \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Integer year \u003d Integer.parseInt(dateArray[2]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Integer month \u003d Integer.parseInt(dateArray[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Integer day \u003d Integer.parseInt(dateArray[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Integer hours \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Integer minutes \u003d Integer.parseInt(time.substring(3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                this.date \u003d LocalDateTime.of(year, month, day, hours, minutes);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                this.date \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter returns the date string of the Deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string which represents the date the deadline is due."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter returns the LocalDateTime of the Deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The LocalDateTime object which represents the date the deadline is due."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method returns all the attributes of the Deadline task in a string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string which comprises of all the Deadline\u0027s attributes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 75
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private String on;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param description The description string of the Event task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param on The time string at which the Event task is held."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Event(String description, String on) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super.taskType \u003d \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter returns the date string of the Event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string which represents the date at which the Event is held."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return on;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method returns all the attributes of the Event task in a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string which comprises of all the Event\u0027s attributes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + on + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 37
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for classes inheriting the Task abstract class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param command The string representing command of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Task(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method return the status of the Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return If the Task is done, a tick is return, else a cross is return."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter return the command of the Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string representing the command of the Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This setter changes the command of a Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param command The string of which the command of the Task will be set to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter returns the done status of the Task, true or false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A boolean, true if the Task is done, else false."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This setter set the done status of the Task to the boolean entered."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param done The boolean input to which the done status of the Task will be set to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void setDoneStatus(boolean done) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter return the task type of the Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A string representing the task type of the Task, T for ToDo, E for Event, D for Deadline."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method returns a string which represents the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A string which comprises of all the attributes of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.getCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 74
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Base Constructor for TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for an existing TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param storageList The list loaded from the save file to be copied over into TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public TaskList(TaskList storageList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList \u003d storageList.getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This getter returns the list of tasks of the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The ArrayList of tasks of the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This setter sets the list of tasks to the input TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList The ArrayList of tasks to which the TaskList will become."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        taskList \u003d taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method adds a new Task to the TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param task The task to be added to the TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method removes an existing task from the TaskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param task The task to be removed from the TaskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void remove(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.taskList.remove(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method gets the Task of the index from the TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param index The integer index of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The task of the integer index from the TaskList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Task get(Integer index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method returns the size of the TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The integer representing the size of the TaskList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Integer size() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method checks if the TaskList is empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return A boolean, true of the TaskList is empty, false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return taskList.isEmpty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 80
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        super.taskType \u003d \"T\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method returns all the attributes of the ToDo task in a string."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string which comprises of all the ToDo\u0027s attributes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 17
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private static String TAB \u003d \"    \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private static String LINE \u003d TAB + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * Constructor for ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to show the message for the FileNotFound exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void showFileNotFoundError() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" File not found exceptions, an empty list is loaded\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to show the message for the IOException."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param e The IOException thrown by Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void showIOExceptionError(Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" There is an IOException error: \" + e.getMessage()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + \" when writing to file\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to show the message for the NumberFormat exception."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void showNumberFormatException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Number format exceptions! Invalid format entered!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to show the message for the IndexOutOfBounds exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void showIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Index out of Bounds exceptions! An invalid input or date was processed!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to show the messages for Duke-specific exceptions."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param e The DukeException thrown by Duke if an invalid input is entered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void showDukeError(DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        String dukeErrorMsg \u003d TAB + \" Duke exceptions error: \" + e.getExceptionType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        switch (e.getExceptionType()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case EMPTY_TODO: {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case EMPTY_DEADLINE: {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case EMPTY_EVENT: {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case UNKNOWN_COMMAND: {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case UNKNOWN_ERROR: {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! I\u0027m sorry, we encountered an unknown error!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case SAVE_CORRUPTED: {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" Your saved list is corrupted, there are unreadable entries\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                    TAB + \" An empty list is loaded\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case EMPTY_FIELD: {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" The field cannot be blank\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case EMPTY_DELETE: {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! The delete field cannot be empty.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        case EMPTY_FIND: {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! The find field cannot be empty.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            printWithLine(dukeErrorMsg, TAB + \" ☹ OOPS!!! The find field cannot be empty.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the formatting lines between each of Duke\u0027s responses and User\u0027s input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private void printLine() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is method is to wrap the content, Duke\u0027s responses, in formatting lines."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param content All the strings that are to be wrapped by formatting lines."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private void printWithLine(String...content) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (String s : content) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the hello message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printHelloMsg() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Hello! I\u0027m Duke\\n\" + TAB + \" What can I do for you?\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the bye message."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printByeMsg() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to iterate through and print out the entire TaskList provided."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList A list of tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printList(TaskList taskList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            System.out.println(TAB + \" The list is currently empty, please add a new task!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            System.out.println(TAB + \" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                System.out.println(TAB + \" \" + (i + 1) + \". \" + currentTask.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the confirmation message when a task is successfully added into Duke\u0027s save file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param task The task that is added to Duke\u0027s save file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList Duke\u0027s current list of tasks."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printAddMsg(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Got it. I\u0027ve added this task: \", TAB + \"   \" + task.toString(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                TAB + \" Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the confirmation message when a task is successfully deleted from Duke\u0027s save file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param currentTask The task that is being delete from Duke\u0027s save file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param taskList Duke\u0027s current list of tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printDeleteMsg(Task currentTask, TaskList taskList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Noted. I\u0027ve removed this task: \", TAB + \"   \" + currentTask.toString(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                TAB + \" Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the confirmation message when a task is successfully marked as done."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param currentTask The task that is being marked as done."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printDoneMsg(Task currentTask) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printWithLine(TAB + \" Nice! I\u0027ve marked this task as done: \", TAB + \"   [\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                + currentTask.getStatusIcon() + \"] \" + currentTask.getCommand());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This is to print the list of the matching tasks from Duke\u0027s task list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @param findList The list of tasks matching the user\u0027s input."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void printFindMsg(ArrayList findList) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        System.out.println(TAB + \" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        for (int i \u003d 0; i \u003c findList.size(); i++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Task currentTask \u003d (Task) findList.get(i);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            System.out.println(TAB + \" \" + (i + 1) + \". \" + currentTask.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * This method is to read the user\u0027s input."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     * @return The string that is the user\u0027s input."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwyf"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 205
    }
  },
  {
    "path": "src/test/java/Parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testParse() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"done\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"delete\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"find\") instanceof FindCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"todo JUnit Test T\") instanceof ToDoCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"deadline JUnit Test D /by Random DateString\") instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertTrue(Parser.parse(\"event JUnit Test D /at Random DateString\") instanceof EventCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showDukeError(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void shouldThrowEmptyFieldException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        DukeException dukeException0 \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Parser.parse(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(dukeException0.getExceptionType(), ExceptionType.EMPTY_FIELD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        DukeException dukeException1 \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Parser.parse(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(dukeException1.getExceptionType(), ExceptionType.EMPTY_FIELD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        DukeException dukeException2 \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Parser.parse(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(dukeException2.getExceptionType(), ExceptionType.EMPTY_FIELD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void shouldThrowUnknownCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        DukeException dukeException0 \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Parser.parse(\"Random unknown command\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(dukeException0.getExceptionType(), ExceptionType.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        DukeException dukeException1 \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "           Parser.parse(\"Banana\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 54
    }
  },
  {
    "path": "src/test/java/Storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    String trueFilePath \u003d \"C:/Users/josep/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    String corruptedFilePath \u003d \"C:/Users/josep/duke/data/corruptedDuke.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    String fakeFilePath \u003d \"C:/Users/josep/duke/data/fakeFile.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    String testFilePath \u003d \"C:/Users/josep/duke/data/testDuke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testLoad() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Storage storage \u003d new Storage(trueFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList testTaskList \u003d storage.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ToDo readBookTodo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            readBookTodo.setDoneStatus(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            expectedTaskList.add(readBookTodo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Deadline returnBookDeadline \u003d new Deadline(\"return book\", \"June 6th\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            expectedTaskList.add(returnBookDeadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Event projectMeetingEvent \u003d new Event(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            expectedTaskList.add(projectMeetingEvent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ToDo joinSportsClubToDo \u003d new ToDo(\"join sports club\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            joinSportsClubToDo.setDoneStatus(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            expectedTaskList.add(joinSportsClubToDo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ToDo addToDo \u003d new ToDo(\"add\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            expectedTaskList.add(addToDo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Deadline testPrintDeadline \u003d new Deadline(\"test print\", \"2/12/2019 1800\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            testPrintDeadline.setDoneStatus(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            expectedTaskList.add(testPrintDeadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertEquals(testTaskList.size(), expectedTaskList.size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            for (int i \u003d 0; i \u003c testTaskList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                assertEquals(testTaskList.get(i).toString(), expectedTaskList.get(i).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch(FileNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showFileNotFoundError();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showDukeError(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void shouldThrowFileNotFoundException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Storage storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList taskList \u003d storage.load();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Storage storage \u003d new Storage(fakeFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList taskList \u003d storage.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void shouldThrowDukeException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        DukeException dukeException \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Storage storage \u003d new Storage(corruptedFilePath); //corrupted txt file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList taskList \u003d storage.load();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(dukeException.getExceptionType(), ExceptionType.SAVE_CORRUPTED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSave() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Storage storage \u003d new Storage(testFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.save(testTaskList); //to clear the save file first"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ToDo randomToDo \u003d new ToDo(\"random\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            testTaskList.add(randomToDo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.save(testTaskList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList outputTaskList \u003d storage.load();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            assertEquals(testTaskList.size(), outputTaskList.size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            for (int i \u003d 0; i \u003c testTaskList.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwyf"
        },
        "content": "                assertEquals(testTaskList.get(i).toString(), outputTaskList.get(i).toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showIOExceptionError(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            ui.showDukeError(e);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void shouldThrowIOException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertThrows(IOException.class, () -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            Storage storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwyf"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 119
    }
  },
  {
    "path": "src/test/java/Task/DateValidationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.DateValidation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DateValidationTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testValidateJavaDate() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertTrue(DateValidation.validateJavaDate(\"01/01/2019 1200\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertTrue(DateValidation.validateJavaDate(\"2/12/2019 1800\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\" \"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"Random string\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"OneWordString\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"01012019 1200\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"01/01/2019 12:00\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"01-01-2019 1200\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"01.01.2019 1200\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertFalse(DateValidation.validateJavaDate(\"00/00/2019 1200\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 25
    }
  },
  {
    "path": "src/test/java/Task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private Deadline testDeadline \u003d new Deadline(\"JUnit Test\", \"Test dateString\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private Deadline testDeadline1 \u003d new Deadline(\"Random\", \"07/10/2019 2100\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetDoneStatus() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getDoneStatus(), false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getDoneStatus(), false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSetDoneStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testDeadline.setDoneStatus(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testDeadline1.setDoneStatus(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testDeadline.setDoneStatus(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testDeadline1.setDoneStatus(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getCommand(), \"JUnit Test\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getCommand(), \"Random\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSetCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testDeadline.setCommand(\"Random test string\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getCommand(), \"Random test string\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testDeadline1.setCommand(\"OneLongWordStringTest\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getCommand(), \"OneLongWordStringTest\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetTaskType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getTaskType(), \"D\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getTaskType(), \"D\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetDateString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getDateString(), \"Test dateString\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getDateString(), \"07/10/2019 2100\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.getDate(), null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.getDate(), LocalDateTime.of(2019, 10, 7, 21, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline.toString(), \"[D][✘] JUnit Test (by: Test dateString)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testDeadline1.toString(), \"[D][✘] Random (by: 07/10/2019 2100)\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 71
    }
  },
  {
    "path": "src/test/java/Task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private Event testEvent \u003d new Event(\"JUnit Test\", \"Test dateString\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private Event testEvent1 \u003d new Event(\"Random\", \"07/10/2019 2100\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetDoneStatus() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getDoneStatus(), false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getDoneStatus(), false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSetDoneStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testEvent.setDoneStatus(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testEvent1.setDoneStatus(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testEvent.setDoneStatus(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testEvent1.setDoneStatus(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getCommand(), \"JUnit Test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getCommand(), \"Random\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSetCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testEvent.setCommand(\"Random test string\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getCommand(), \"Random test string\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testEvent1.setCommand(\"OneLongWordStringTest\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getCommand(), \"OneLongWordStringTest\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetTaskType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getTaskType(), \"E\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getTaskType(), \"E\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.getDate(), \"Test dateString\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.getDate(), \"07/10/2019 2100\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent.toString(), \"[E][✘] JUnit Test (at: Test dateString)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testEvent1.toString(), \"[E][✘] Random (at: 07/10/2019 2100)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 63
    }
  },
  {
    "path": "src/test/java/Task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwyf"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwyf"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwyf"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ToDo testToDo \u003d new ToDo(\"JUnit Test\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    private ToDo testToDo1 \u003d new ToDo(\"Random\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetDoneStatus() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getDoneStatus(), false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getDoneStatus(), false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSetDoneStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testToDo.setDoneStatus(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testToDo1.setDoneStatus(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testToDo.setDoneStatus(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testToDo1.setDoneStatus(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getStatusIcon(), \"✘\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getCommand(), \"JUnit Test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getCommand(), \"Random\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testSetCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testToDo.setCommand(\"Random test string\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getCommand(), \"Random test string\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        testToDo1.setCommand(\"OneLongWordStringTest\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getCommand(), \"OneLongWordStringTest\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testGetTaskType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.getTaskType(), \"T\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.getTaskType(), \"T\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo.toString(), \"[T][✘] JUnit Test\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwyf"
        },
        "content": "        assertEquals(testToDo1.toString(), \"[T][✘] Random\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwyf"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwyf"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwyf"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwyf": 57
    }
  }
]
