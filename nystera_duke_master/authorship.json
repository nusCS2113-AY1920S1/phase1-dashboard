[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nathan"
        },
        "content": "run {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 26,
      "Jeffry Lum": 15
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public Deadline(String description, String by){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public Deadline(String description, String by, boolean isDone){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 20
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import java.util.Scanner; // Imports the Scanner Class"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    // This line is to help make the input look neater"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public static final String line \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public static TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        //Initializes the data in duke.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        FileManager file \u003d new FileManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        file.openFile();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        file.readData();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        System.out.println(line + \"Hello I\u0027m Duke\\n\" + \"What can I do for you?\\n\" + line);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        Scanner userInputs \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        while (userInputs.hasNextLine()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            input \u003d userInputs.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String[] splitInput1 \u003d input.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String inputType1 \u003d splitInput1[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                DukeException.validateCommand(inputType1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                switch(inputType1.toLowerCase()){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        list.addDeadline(input, splitInput1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        list.addToDo(input, splitInput1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        list.addEvent(input, splitInput1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        list.listTask();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    case \"done\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        list.completeTask(splitInput1, list.getSize());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    case \"bye\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        list.endDuke(splitInput1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                // Exit condition"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                if(splitInput1[0].equalsIgnoreCase(\"bye\")){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            } catch(InvalidInputException m){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                m.getErrorMsg();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        file.updateFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        file.closeFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 53,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import javax.lang.model.type.NullType;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    static void validateCommand(String command) throws InvalidInputException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        switch(command.toLowerCase()){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                throw new InvalidInputException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    static void validateInput(String[] splitInput, String inputType) throws InvalidInputException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        if(splitInput.length \u003d\u003d 1 \u0026\u0026 !inputType.equalsIgnoreCase(\"bye\")){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            throw new InvalidInputException(\"description\", inputType, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if(splitInput.length !\u003d 1 \u0026\u0026 inputType.equalsIgnoreCase(\"bye\")){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            throw new InvalidInputException(\"I\u0027m sorry, were you trying to exit Duke? Please only input \u0027bye\u0027\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if (!inputType.equalsIgnoreCase(\"bye\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            boolean flag \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            for(int i \u003d 1; i \u003c splitInput.length; ++i){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                if((splitInput[i].equalsIgnoreCase(\"/by\") \u0026\u0026 inputType.equalsIgnoreCase(\"deadline\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        || (splitInput[i].equalsIgnoreCase(\"/at\") \u0026\u0026 inputType.equalsIgnoreCase(\"event\"))){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    if(i \u003d\u003d 1){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        throw new InvalidInputException(\"task\", inputType, false, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    else if(i \u003d\u003d splitInput.length - 1){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                        throw new InvalidInputException(\"time\", inputType, true, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                else if(splitInput[i].contains(\"/\") \u0026\u0026 inputType.equalsIgnoreCase(\"todo\")){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    throw new InvalidInputException(\"description\", inputType, true, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            if(!flag \u0026\u0026 !(inputType.equalsIgnoreCase(\"todo\"))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                throw new InvalidInputException(\"time\", inputType, true, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    static void ValidateMarkAsDone(String[] splitInput, int size) throws InvalidInputException{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        if(splitInput.length \u003c 2){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            throw new InvalidInputException(\"Please input a number\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if(splitInput.length \u003e 2){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            throw new InvalidInputException(\"Wrong formatting of done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            if(!(TaskList.isNumeric(splitInput[1]))){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                throw new InvalidInputException(\"Please enter a valid number\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            else if(Integer.parseInt(splitInput[1]) \u003e size"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    || (Integer.parseInt(splitInput[1]) \u003c\u003d 0)){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                throw new InvalidInputException(\"Input range is out of bounds\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 67
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public Event(String description, String at){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public Event(String description, String at, boolean isDone){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 20
    }
  },
  {
    "path": "src/main/java/FileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private static Scanner x;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private static Formatter y;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private FileWriter z;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private static final String ROOTDIR \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private static final String filePath \u003d ROOTDIR + \"\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private static final String FOLDER \u003d ROOTDIR + \"\\\\data\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void createFile(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            File makeDirectory \u003d new File(FOLDER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            makeDirectory.mkdir();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            y \u003d new Formatter(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch(Exception e){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"error\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void openFile(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            x \u003d new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            this.createFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            this.openFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void closeFile(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        if(y !\u003d null){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            y.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        x.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    // As we are dealing with a smaller sample, we will just recreate a new file everytime it closes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void updateFile(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            y \u003d new Formatter(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            addData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void addData(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        String taskType, status, description, time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        String taskStr;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        for(Task task : TaskList.list){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            taskStr \u003d task.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            //System.out.println(taskStr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            taskType \u003d task.toString().substring(1,2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            //System.out.println(taskType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            status \u003d task.getStatusIcon().equals(\"\\u2713\") ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            //System.out.println(status);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            if(taskType.equals(\"T\")){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                description \u003d task.toString().substring(7);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                y.format(\"%s // %s // %s\\n\", taskType, status, description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            else if(taskType.equals(\"E\")){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                description \u003d taskStr.substring(7, taskStr.indexOf(\" (at:\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d taskStr.substring(taskStr.indexOf(\"(at:\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d time.replace(\"(at: \", \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d time.substring(0, time.length() - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                y.format(\"%s // %s // %s // %s\\n\", taskType, status, description, time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            else if(taskType.equals(\"D\")){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                description \u003d taskStr.substring(7, taskStr.indexOf(\" (by:\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d taskStr.substring(taskStr.indexOf(\"(by:\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d time.replace(\"(by: \", \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d time.substring(0, time.length() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                y.format(\"%s // %s // %s // %s\\n\", taskType, status, description, time);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void readData(){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        String taskType, description, time;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        while(x.hasNextLine()){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String[] splitLine \u003d x.nextLine().split(\" // \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            taskType \u003d splitLine[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            isDone \u003d splitLine[1].equals(\"\\u2713\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            description \u003d splitLine[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            if(taskType.equals(\"T\")){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                Duke.list.addToDo(description, isDone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                time \u003d splitLine[3];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                if(taskType.equals(\"D\")){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    Duke.list.addDeadline(description, time, isDone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                else{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                    Duke.list.addEvent(description, time, isDone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 105
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class InvalidInputException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private String errorMsg;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private String inputContent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private String inputType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private boolean hasDescription \u003d false;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private boolean hasTimeSet \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public InvalidInputException(String s){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.errorMsg \u003d s;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public InvalidInputException(String s, String commandType, boolean hasDescription, boolean hasTimeSet){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.inputContent \u003d s;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.inputType \u003d commandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.hasDescription \u003d hasDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.hasTimeSet \u003d hasTimeSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void getErrorMsg(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        if(inputType \u003d\u003d null){ // Garbage inputs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + errorMsg);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.print(Duke.line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if(!hasDescription \u0026\u0026 !hasTimeSet){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"OOPS!!! There is nothing to add in the \" + inputType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.print(Duke.line);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if(hasDescription \u0026\u0026 !hasTimeSet){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"OOPS!!! Please set a valid format of time of the \" + inputType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.print(Duke.line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if(!hasDescription \u0026\u0026 hasTimeSet){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"OOPS!!! Please insert the description of the \" + inputType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.print(Duke.line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else if(hasDescription \u0026\u0026 hasTimeSet){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"OOPS!!! Description of the \" + inputType + \" is in the wrong format\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.print(Duke.line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 41
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public Task(String description){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public String getStatusIcon(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return (\"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 22
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class TaskList{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private static int curPtr;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public int getSize(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    // Function repeats the statement of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void printAddedTask(String input){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        System.out.println(Duke.line + \"added: \" + input + \"\\n\" + Duke.line);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    // Function shows when you have completed a task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void completeTask(String[] splitInput, int size){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            DukeException.ValidateMarkAsDone(splitInput, size);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            list.get(Integer.parseInt(splitInput[1]) - 1).markAsDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"Nice! I\u0027ve marked this task as done:\\n\" + \"  [\\u2713] \" + list.get(Integer.parseInt(splitInput[1]) - 1).description + \"\\n\" + Duke.line);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch(InvalidInputException m){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            m.getErrorMsg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void listTask(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        short i \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        System.out.print(Duke.line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        if(list.size() !\u003d 0){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            for(Task task : list) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                System.out.print(i + \".\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                System.out.println(task.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nathan"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"You have no current tasks! Good job!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        System.out.println(Duke.line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void addToDo(String input, String[] splitInput){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            DukeException.validateInput(splitInput, \"todo\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String description \u003d input.substring(5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            list.add(newToDo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"Got it. I\u0027ve added this task:\" );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"  \" + newToDo.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(showCurrTasks());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch(InvalidInputException m) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            m.getErrorMsg();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void addToDo(String description, boolean isDone){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        ToDo newToDo \u003d new ToDo(description, isDone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        list.add(newToDo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void addDeadline(String input, String[] splitInput){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            DukeException.validateInput(splitInput, \"deadline\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String description \u003d input.substring(9, input.indexOf(\"/by\") - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String by \u003d input.substring(input.indexOf(\"/by\") + 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            list.add(newDeadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"Got it. I\u0027ve added this task:\" );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"  \" + newDeadline.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(showCurrTasks());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch(InvalidInputException m){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            m.getErrorMsg();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void addDeadline(String description, String by, boolean isDone){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(description, by, isDone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        list.add(newDeadline);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void addEvent(String input, String[] splitInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            DukeException.validateInput(splitInput, \"event\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String description \u003d input.substring(6, input.indexOf(\"/at\") - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            String at \u003d input.substring(input.indexOf(\"/at\") + 4);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            Event newEvent \u003d new Event(description, at);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            list.add(newEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(\"  \" + newEvent.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(showCurrTasks());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch(InvalidInputException m){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            m.getErrorMsg();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void addEvent(String description, String by, boolean isDone){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        Event newEvent \u003d new Event(description, by, isDone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        list.add(newEvent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    void endDuke(String[] splitInput){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            DukeException.validateInput(splitInput, \"bye\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            System.out.println(Duke.line + \"Bye. Hope to see you again soon!\\n\" + Duke.line);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch(InvalidInputException m){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            m.getErrorMsg();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    private String showCurrTasks(){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return \"Now you have \" + list.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    // Function checks if the string is numeric which means user wants to tick their task as done."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public static boolean isNumeric(String strNum){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            double d \u003d Double.parseDouble(strNum);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        } catch (NumberFormatException | NullPointerException nfe){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nathan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 133
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nathan"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public ToDo(String description){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public ToDo(String description, boolean isDone){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nathan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nathan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nathan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nathan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nathan": 16
    }
  }
]
