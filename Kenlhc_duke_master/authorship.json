[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This is a Personal Task Manager called Duke that can aid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * in storing your tasks as a todo, deadline or event with"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * status icons to signify completion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method initialises the variables required"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param filename The name of the file to be read from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Duke (String filename) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage \u003d new Storage(filename);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method runs the entire program by taking in user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * and understanding them as commands to either add, delete, find, list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * or mark as done before exiting when the user types bye"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                String input \u003d ui.readInput();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                Command command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(\"Please enter a task.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(\"Please enter date in the correct format dd/mm/yyyy hhmm\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(\"Please specify a task number to delete.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(\"The task number you entered does not exist.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This is the main method of the program"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param args The main argument of the program"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\user\\\\Desktop\\\\duke\\\\data\\\\tasks.txt\").run();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 70,
      "-": 5
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This is the parent class of all subclasses of Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The command to be carried out specified by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method executes the command given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param taskList The list of tasks specified by the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches any invalid input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Catches any invalid date format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public abstract void execute (TaskList taskList, Ui ui, Storage storage) throws DukeException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.converter.Converter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A deadline command specified by the user which adds deadline as a task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class and the Parser program"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input The command given by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeadlineCommand (String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method stores the task as a deadline and at the same time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * store the tasks recorded so far into the file in hard drive"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches invalid user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Catches invalid date format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] splitter \u003d words[1].split(\"/by\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] dateTime \u003d splitter[1].trim().split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (dateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Task task \u003d new Deadline(splitter[0].trim(), Converter.dateTime(splitter[1].trim()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            list.store(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            storage.writeFile(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The time for a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 59
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A delete command specified by the user which"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * deletes the selected task number"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class and the Parser program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input The command given by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method deletes the task specified and at the same time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * store the most recently updated into the file in hard drive"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches invalid user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! You did not specify a task number to delete.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int check \u003d Integer.parseInt(words[1].trim()) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            list.delete(check);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            storage.writeFile(list);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 46
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A done command specified by the user which marks a task as complete"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class and the Parser program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input The command given by the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method marks a task as done and at the same time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * store the tasks most recently updated into the file in hard drive"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches invalid user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! You did not specify a task to mark as done.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int check \u003d Integer.parseInt(words[1].trim()) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.complete(check);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeFile(list);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.converter.Converter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * An event command specified by the user which adds event as a task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class and the Parser program"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input The command given by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public EventCommand (String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method stores the task as an event and at the same time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * store the tasks recorded so far into the file in hard drive"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches invalid user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException Catches invalid date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] splitter \u003d words[1].split(\"/at\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] dateTime \u003d splitter[1].trim().split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (dateTime.length \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            Task task \u003d new Event(splitter[0].trim(), Converter.dateTime(splitter[1].trim()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            list.store(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            storage.writeFile(list);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The time for an event cannot be empty.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 56
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * An exit command specified by the user which exits the program"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method exits the program once the user types bye"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A find command specified by the user which"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * finds tasks with the given keyword"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class and the Parser program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input The command given by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method finds the tasks with the user specified key word"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * and prints them"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches invalid user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! You did not specify a keyword.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.find(words[1].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A list command specified by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * which lists all the tasks previously stored"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the Command parent class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method lists all the tasks previously stored"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.listTask();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A todo command specified by the user which adds todo as a task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the user input from the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Command parent class and the Parser program"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input The command given by the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public TodoCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method stores the task as a todo and at the same time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * store the tasks recorded so far into the file in hard drive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks the user has to complete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param ui The user interface that the user can interact with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param storage The program responsible for storing and reading the tasks from hard drive"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches invalid user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (words.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Task task \u003d new Todo(words[1].trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.store(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        storage.writeFile(list);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the program if the user wants to exit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return true if user types bye, false otherwise"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 47
    }
  },
  {
    "path": "src/main/java/duke/converter/Converter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.converter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This Converter program implements an application that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * converts the user given date and time into a standard format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Converter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method is used to convert the given date and time format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * into a standard format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param dateTime This is the date and time given by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return SimpleDateFormat This returns the date given in the standard format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws ParseException catches invalid date formats"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static String dateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat simpleDateFormat1 \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Date date \u003d simpleDateFormat1.parse(dateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        SimpleDateFormat simpleDateFormat2 \u003d new SimpleDateFormat(\"EEE dd MMMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return simpleDateFormat2.format(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * One of the Exceptions thrown in Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This exception is thrown when an error pertaining to duke occurs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param message The message to be displayed when an error has occurred"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public DukeException (String message){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 14
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This Parser program implements an application that"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * reads a user\u0027s command and understands it to perform different tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method is used to understand the command given by the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * and carry out the tasks specified."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param input This is the command given by the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Command based on user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws DukeException Catches commands given by the user which is not understood"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        String[] words \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (input.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! You did not enter anything.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (words[0].equals(\"done\") || words[0].equals(\"Done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (words[0].equals(\"delete\") || words[0].equals(\"Delete\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (words[0].equals(\"find\") || words[0].equals(\"Find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (words[0].equals(\"todo\") || words[0].equals(\"Todo\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new TodoCommand(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (words[0].equals(\"deadline\") || words[0].equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new DeadlineCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else if (words[0].equals(\"event\") || words[0].equals(\"Event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            return new EventCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! I do not understand what command you just told me.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 42
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This Storage program implements methods to store and read"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * Tasks that have been specified by the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The name of the file to save the tasks to as well as read from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static String filename;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the filename from the String in the main application"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param filename The name of the file to store and read from"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Storage(String filename) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method stores the tasks specified by the user into a file saved"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * on the hard drive"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The tasks that has been specified by the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void writeFile(TaskList list) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(filename));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            for (int i \u003d 0; i \u003c list.getSize(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                bufferedWriter.write(list.getTaskList(i) + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\"There\u0027s no file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method reads the tasks specified by the user from a file saved"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * on the hard drive"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Task containing the full list of tasks specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws FileNotFoundException Catches missing files that are to be read from"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public ArrayList\u003cTask\u003e readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(filename));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String input \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            String status;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            while (input !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                status \u003d input.substring(3, 6);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                if (input.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    input \u003d input.substring(7).trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    Task task \u003d new Todo(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    if (status.equals(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        list.get(count).markAsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else if (input.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    input \u003d input.substring(7);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    String[] splitter \u003d input.split(\"\\\\(by:\", 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    String remove_bracket \u003d splitter[1].substring(0, splitter[1].length() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    Task task \u003d new Deadline(splitter[0].trim(), remove_bracket.trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    if (status.equals(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        list.get(count).markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                } else if (input.startsWith(\"[E]\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    input \u003d input.substring(7);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    String[] splitter \u003d input.split(\"\\\\(at:\", 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    String remove_bracket \u003d splitter[1].substring(0, splitter[1].length() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    Task task \u003d new Event(splitter[0].trim(), remove_bracket.trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    if (status.equals(\"[\\u2713]\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                        list.get(count).markAsDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    count +\u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                input \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\"There\u0027s no file\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 103
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This TaskList Program implements methods to store and alter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * tasks that have been specified by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The list of tasks that the user will specify and store in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    private static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * Constructor method for TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the list of tasks from the variable"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * declared above"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param list The list of tasks specified by the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method gives the number of tasks currently"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * specified by the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Size of the list of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method gives the specific task number"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * of the task specified by the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param i The task number to be shown"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return index of the task specified by the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Task getTaskList(int i) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return list.get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method stores all the tasks specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * by the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param a The task to be stored"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void store(Task a) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.add(a);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        if (list.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    + \"   \" + a.toString() + \"\\nNow you have \" + list.size() + \" task in the list\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                    + \"   \" + a.toString() + \"\\nNow you have \" + list.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method deletes the task at the specified task number"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param i The task number of the task to be deleted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @throws NumberFormatException Catches invalid number formats"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void delete(int i) throws NumberFormatException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + \"   \" + list.get(i).toString() );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.remove(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method marks a task as complete when specified by the user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param i The task number of the task to be marked as complete"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void complete(int i) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        list.get(i).markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + list.get(i).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method finds tasks which contain a specified keyword from the user"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param match The keyword to be found in the current list of tasks"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void find(String match) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your lists:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            if (list.get(i).description.contains(match)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                System.out.println(count+1 + \".\" + list.get(i).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method lists all the tasks that the user has specified so far"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public static void listTask() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "            System.out.println(i+1 + \".\" + list.get(i).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 111
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A deadline specified by the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The date and time you have to finish the task by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the details of the deadline to be met in the Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * parent class as well as the variable declared above"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param description The details of the deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param by The date and time you have to finish the task by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method generates a simple statement to show details of the deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return String to show a deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"[D][\" + super.getStatusIcon() + \"] \" + super.description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 31
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * An Event task specified by the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The date and time where the event will be held at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the details of the event in the Task parent"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * class and the variable declared above"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param description The details of the event specified by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param at The date and time of the event specified by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method generates a simple statement to show details of an event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return String to show an event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"[E][\" + super.getStatusIcon() + \"] \" + super.description + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 31
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This is the Parent class of all the subclasses of Task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The details of the task specified by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The status of the task whether it has been completed or not"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the details and status of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * from the variables declared above"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param description The details of the task specified by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method shows the current status of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Status Icon of the task specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method will mark a task as completed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 40
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * A todo task specified by the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method references the details of the todo in the Task parent class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @param description The details of the task specified by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method generates a simple statement to show details of a todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return String to show a todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return \"[T][\" + super.getStatusIcon() + \"] \" + super.description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 23
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " * This User Interface program implements methods for user interaction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * The input from the user to be read"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    Scanner obj \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method will read the input given by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * @return Scanner to continue scanning the next line of input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        return obj.nextLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method greets the user upon successful launch of Duke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method shows the user that an error has occurred when trying to retrieve the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * saved file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Sorry. The file does not exist.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     * This method tells the user that the program will exit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 44
    }
  },
  {
    "path": "src/test/java/duke/commands/CommandsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "public class CommandsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void exitCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assertions.assertEquals(new ExitCommand(), Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void listCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assertions.assertEquals(new ListCommand(), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void doneCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assertions.assertEquals(new DoneCommand(\"done 1\"), Parser.parse(\"done 1\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void deleteCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assertions.assertEquals(new DeleteCommand(\"delete 1\"), Parser.parse(\"delete 1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void findCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        Assertions.assertEquals(new FindCommand(\"find ST\"), Parser.parse(\"find ST\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void todoCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertEquals(new TodoCommand(\"todo test\"), Parser.parse(\"todo test\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void deadlineCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertEquals(new DeadlineCommand(\"deadline test /by 19/12/2019 2359\"), Parser.parse(\"deadline test /by 19/12/2019 2359\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    public void eventCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "        assertEquals(new EventCommand(\"event test /at 19/12/2019 2359\"), Parser.parse(\"event test /at 19/12/2019 2359\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kenlhc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kenlhc": 51
    }
  }
]
