[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "run {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "sourceSets.main.java.srcDirs \u003d [\u0027src/main/java/Commands\u0027,\u0027src/main/java\u0027,\u0027src/main/java/Classes\u0027]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "sourceSets.main.resources.srcDirs \u003d[\u0027src/main/resources\u0027]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "sourceSets.test.java.srcDirs \u003d [\u0027src/test/java/Commands\u0027,\u0027src/test/java\u0027,\u0027src/test/java/Classes\u0027]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    dependsOn \u0027cleanTest\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 24,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Classes/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents a deadline task that allows for a deadline to be set"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of the Task Class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a description of the task and the deadline of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param description A String representing the task to be completed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param by A LocalDateTime representing the deadline of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateToString(by) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Converts the input LocalDateTime to printable format in String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param dateTime LocalDateTime object to be converted to String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String format of the LocalDateTime"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private String dateToString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 36
    }
  },
  {
    "path": "src/main/java/Classes/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents an Event Task with a timing of the event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of the Task Class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in the event that will happen and the start time of the event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param description A String representing the event taking place"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param at LocalDateTime object representing the start time of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateToString(at) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Converts the input LocalDateTime to printable format in String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param dateTime LocalDateTime object to be converted to String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String format of the LocalDateTime"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private String dateToString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 37
    }
  },
  {
    "path": "src/main/java/Classes/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that takes in a string and parses it to return a valid command to be ran"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Takes in input from user and returns a command based on the input given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input String given by the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return The command object corresponding to the user input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @throws DukeException Thrown when an invalid input is given"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new AddToDoCommand(false, input);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else if (input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new AddEventCommand(false, input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else if (input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new AddDeadLineCommand(false, input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new MarkTaskAsDoneCommand(false, input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new ListTaskCommand(false, \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }  else if (input.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new FindTaskCommand(false, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new DeleteTaskCommand(false, input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return new ExitCommand(true, \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 32
    }
  },
  {
    "path": "src/main/java/Classes/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that deals with storage and I/O of the tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in the filePath for future I/O"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param filePath String representing the path of the file to be written and read from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Loads in data from an existing file into a created TaskList object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return TaskList object consisting of the data read from the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @throws DukeException Thrown when the file does not exist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (Files.isRegularFile(Paths.get(this.filePath))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                List\u003cString\u003e input \u003d Files.readAllLines(Paths.get(this.filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                if (input.isEmpty()) throw new DukeException(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                for (String value : input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    String[] splitInput \u003d value.split(\" \\\\| \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    if (value.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        Event newEvent \u003d new Event(splitInput[2], parseDate(splitInput[3]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        if (splitInput[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                            newEvent.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        taskList.add(newEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    } else if (value.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        ToDo newToDo \u003d new ToDo(splitInput[2]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        if (splitInput[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                            newToDo.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        taskList.add(newToDo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    } else if (value.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        Deadline newDeadline \u003d new Deadline(splitInput[2], parseDate(splitInput[3]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        if (splitInput[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                            newDeadline.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        taskList.add(newDeadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                throw new DukeException(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            createFileAndDirectory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Creates the directory and file as given by the file path initialized in the constructor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private void createFileAndDirectory() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                File myNewFile \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                Files.createDirectory(Paths.get(myNewFile.getParent()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                Files.createFile(Paths.get(this.filePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } catch(FileAlreadyExistsException e){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                createFileAndDirectory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private LocalDateTime parseDate(String dateToParse) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return LocalDateTime.parse(dateToParse, formatter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            System.out.println(\"Invalid date read from file.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Converts the LocalDateTime object into printable string for writing to file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param dateTime LocalDateTime object to be converted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String format of the LocalDateTime object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private String unparseDate(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return dateTime.format(formatter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Creates the file as necessary, reads the TaskList and converts each value into a string and writes it to file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Error occurs if program is unable to write to the file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void saveToFile() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String toSave \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        createFileAndDirectory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        for (int i \u003d 0; i \u003c TaskList.getSize(); ++i) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Task value \u003d TaskList.getTask(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            String taskType \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            String className \u003d value.getClass().getSimpleName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            int isDone \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            String description \u003d value.description;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            String newDate \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (className.equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                taskType \u003d \"T\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } else if (className.equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                taskType \u003d \"D\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                newDate \u003d unparseDate(((Deadline) value).by);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } else if (className.equals(\"Event\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                taskType \u003d \"E\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                newDate \u003d unparseDate(((Event) value).at);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (value.isDone) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                isDone \u003d 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                isDone \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (newDate !\u003d \"\") {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                toSave +\u003d taskType + \" | \" + Integer.toString(isDone) + \" | \" + description + \" | \" + newDate + \"\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                toSave +\u003d taskType + \" | \" + Integer.toString(isDone) + \" | \" + description + \"\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Files.writeString(Paths.get(this.filePath), toSave);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 147
    }
  },
  {
    "path": "src/main/java/Classes/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Main class used to represent various tasks"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in the task or event to be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param description String consisting of the task or event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the icon depending on the done status of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String representing the completion status"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return (isDone ? \"DONE\" : \"NOT DONE\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the task to be completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String representing the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Marks the task as completed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the completion status of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return True if the task is mark as done, false otherwise"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns a printable string of the task holding, all necessary values in the string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Sub classes will override this method to print any extra info that it contains"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String that holds the full string to be printed to user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 56
    }
  },
  {
    "path": "src/main/java/Classes/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class representing the list of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that creates a new TaskList if no TaskList is given"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "      */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that initializes the task list to a given task list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param tasks ArrayList object containing previously initialized tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Used to add a Task to the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param value Task to be added to the list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void addToArrayList(Task value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.taskList.add(value);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Used to delete a Task from the task list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param num The index of the task in the task list to be removed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return The Task that is to be deleted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Task deleteFromArrayList(int num) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return this.taskList.remove(num);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Used to get the current size of the task list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return The number of tasks in the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the task corresponding to the index given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param num Index of the Task to be found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return The Task corresponding to the index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public static Task getTask(int num) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return taskList.get(num);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 57
    }
  },
  {
    "path": "src/main/java/Classes/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class representing a task to be done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of Task Class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in the task to be completed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param description String representing the task to be completed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 18
    }
  },
  {
    "path": "src/main/java/Classes/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class representing the User Interface to be shown to the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Prints out message to be shown to the user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String output;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the value to be printed to the GUI"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String to be printed on the GUI"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String printOutputGUI() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Prints the welcome message to the User"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        System.out.println(logo + \"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Used to read input from the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String representing the input given by the User"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Scanner inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return inputScanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns good bye message to be shown to the User"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String representing a good bye message when \"bye\" command is given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String showGoodByeMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Prints out the loading error when no file could be found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        System.out.println(\"OOPS!!! File not found or is empty. Creating a new task list!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Prints out any error that occurs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param s Error message to be printed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void showError(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        System.out.println(\"Error: \" + s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns message of DukeException that occurs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param e DukeException that occurs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return Message of the DukeException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String printException(DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Prints out message"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param s String to be printed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void showMessage(String s) { System.out.println(s); }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns a formatted list of tasks when \"list\" command is given"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String that represents the list of task that is formatted to be shown to the User"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int taskListSize \u003d TaskList.getSize();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (TaskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return \"You have no tasks in your list\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int start \u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String outputString \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        outputString +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListSize; ++i) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (start \u003d\u003d taskListSize) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                outputString +\u003d start + \".\" + TaskList.getTask(i).toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                outputString +\u003d start + \".\" + TaskList.getTask(i).toString() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                start++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 105
    }
  },
  {
    "path": "src/main/java/Commands/AddDeadLineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that holds the command to add a deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class AddDeadLineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public AddDeadLineCommand(boolean isExit, String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.length() \u003c 10) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        input \u003d input.substring(9);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int dateIndex \u003d input.indexOf(\"/by \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please indicate the deadline after \\\"/by\\\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String by \u003d input.substring(dateIndex+4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String task \u003d input.substring(0, dateIndex-1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        LocalDateTime byValue \u003d parseDate(by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (byValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Deadline toAdd \u003d new Deadline(task, byValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        taskList.addToArrayList(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        //ui.showMessage(\"Got it. I\u0027ve added this task: \\n  \" + toAdd.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d \"Got it. I\u0027ve added this task: \\n  \" + toAdd.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Used to convert a string given to an appropriate LocalDateTime Object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param dateToParse String to be converted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return LocalDateTime object in d/M/yyyy HHmm format (2/2/2019 1830)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @throws DukeException Thrown if the input given does not match the format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private LocalDateTime parseDate(String dateToParse) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return LocalDateTime.parse(dateToParse, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please format your date and time in this format \\\"20/12/2019 1859\\\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 59
    }
  },
  {
    "path": "src/main/java/Commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the command to add an event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public AddEventCommand(Boolean isExit, String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (this.input.length() \u003c 7) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        input \u003d input.substring(6);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int dateIndex \u003d input.indexOf(\"/at \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please indicate the event timing after \\\"/at\\\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String task \u003d input.substring(0, dateIndex-1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String at \u003d input.substring(dateIndex+4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        LocalDateTime atValue \u003d parseDate(at);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (atValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Event toAdd \u003d new Event(task, atValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        taskList.addToArrayList(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        //ui.showMessage(\"Got it. I\u0027ve added this task: \\n  \" + toAdd.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d \"Got it. I\u0027ve added this task: \\n  \" + toAdd.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Used to convert a string given to an appropriate LocalDateTime Object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param dateToParse String to be converted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return LocalDateTime object in d/M/yyyy HHmm format (2/2/2019 1830)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @throws DukeException Thrown if the input given does not match the format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private LocalDateTime parseDate(String dateToParse) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return LocalDateTime.parse(dateToParse, formatter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please format your date and time in this format \\\"20/12/2019 1859\\\".\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Greatnest": 60
    }
  },
  {
    "path": "src/main/java/Commands/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that holds the command to add a to do"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class AddToDoCommand extends Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public AddToDoCommand(Boolean isExit, String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ToDo toAdd \u003d new ToDo(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        taskList.addToArrayList(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d \"Got it. I\u0027ve added this task: \\n  \" + toAdd.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 29
    }
  },
  {
    "path": "src/main/java/Commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the various commands to be executed"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Command(boolean isExit, String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Main method to be executed for each subclass that will complete its necessary tasks such as adding a deadline or deleting a task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param taskList Task List containing the initialized lists of the task on run"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param ui Ui for which any input and output will be given to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param storage Storage for storing and writing of the data to disk"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @throws DukeException thrown when any error occurs such as invalid input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 28
    }
  },
  {
    "path": "src/main/java/Commands/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the command to delete a Task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public DeleteTaskCommand(boolean isExit, String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! The task to delete cannot be empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            taskNumber \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            ui.showError(\"Please enter a number.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (taskNumber \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"You have entered a number larger than the number of tasks.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Task toDelete \u003d taskList.deleteFromArrayList(taskNumber-1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        //ui.showMessage(\"Noted. I\u0027ve removed this task: \\n  \" + toDelete.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d \"Noted. I\u0027ve removed this task: \\n  \" + toDelete.toString() + \"\\nNow you have \" + taskList.getSize() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 35
    }
  },
  {
    "path": "src/main/java/Commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the exit command"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class ExitCommand extends  Command{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise. Value should be true in this class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public ExitCommand(boolean isExit, String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d ui.showGoodByeMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 19
    }
  },
  {
    "path": "src/main/java/Commands/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the command for a task to be found"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public FindTaskCommand(boolean isExit, String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! The task to find cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"You have no tasks in your list\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int start \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String outputString \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        boolean exists \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        outputString +\u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); ++i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Task value \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (value.description.contains(input)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                outputString +\u003d start + \".\" + value.toString() + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                start++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                exists \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (exists) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            outputString \u003d outputString.substring(0, outputString.length() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            ui.output \u003d outputString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            //ui.showMessage(outputString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            ui.output \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            //ui.showMessage(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 48
    }
  },
  {
    "path": "src/main/java/Commands/ListTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents command for the tasks to be listed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class ListTaskCommand extends Command{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public ListTaskCommand(Boolean isExit, String input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d ui.printList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 18
    }
  },
  {
    "path": "src/main/java/Commands/MarkTaskAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the command to mark the task as done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class MarkTaskAsDoneCommand extends Command{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a flag to represent if it should exit and the input given by the User"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param isExit True if the program should exit after running this command, false otherwise"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input Input given by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public MarkTaskAsDoneCommand(Boolean isExit, String input) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(isExit, input);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"OOPS!!! The task to be marked as done cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            taskNumber \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            ui.showError(\"Please enter a number.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (taskNumber \u003e taskList.getSize())  {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"The task number is larger than the number of tasks in the list\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Task item \u003d taskList.getTask(taskNumber-1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (item.getIsDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            throw new DukeException(\"Task is already done.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        item.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        //ui.showMessage(\"Nice! I\u0027ve marked this task as done: \\n  \" + item.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.output \u003d \"Nice! I\u0027ve marked this task as done: \\n  \" + item.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        storage.saveToFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 41
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the DialogBox to be shown in the GUI"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Each message sent by Duke or a user is shown in this DialogBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Subclass of HBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that takes in a text and image to be displayed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param text Text to be printed for each message given by the user or response by Duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param img Image of the User and Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Flips the dialog box for responses by Duke so that the image is on the left and text on the right"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the DialogBox for inputs by the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param text Text given by the user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param img Image by the User"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return DialogBox object that holds User information"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the DialogBox for output given by Duke"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param text Text to be shown to the User based on response by Duke"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param img Image of Duke"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return DialogBox objects that holds Duke Information"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 76
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Main class that runs Duke and contains the main method for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Constructor that initializes the Task List, Storage and Ui"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Shows error if the file is empty or does not exit"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Runs the command line interface, reads input from user and returns result accordingly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                isExit \u003d c.isExit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Returns the response to the GUI when given an input by a user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param input: Input given by user in the GUI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @return String: Response to display on GUI by the bot."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            isExit \u003d c.isExit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            if (isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                return ui.showGoodByeMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return ui.printOutputGUI();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            return ui.printException(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Main method to run Duke"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param args Argument values given when running the program"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 68,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents Exceptions that are dedicated to Duke functions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    DukeException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 8
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class to launch the GUI Application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the Main GUI window to be shown to user when run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Starts the GUI to be shown to the user, reads in precreated FXML file created in Java SceneBuilder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * @param stage Stage object that holds the container containing the visual elements."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "          e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " * Class that represents the main window holding the different elements of the GUI"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     * Handles input given by the user and creates a DialogBox for every value given by user or response given by Duke"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    private void handleUserInput() throws InterruptedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Thread exitThread \u003d new Thread(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                public void run(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        Thread.sleep(1500);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            exitThread.start();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 63
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"false\" maxHeight\u003d\"Infinity\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 19
    }
  },
  {
    "path": "src/test/java/Classes/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2017, 2, 13, 15, 56);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(\"To Complete Test\", testTime);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Assertions.assertEquals(\"[D][NOT DONE] To Complete Test (by: 13/2/2017 1556)\", newDeadline.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newDeadline.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Assertions.assertEquals(\"[D][DONE] To Complete Test (by: 13/2/2017 1556)\", newDeadline.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 16
    }
  },
  {
    "path": "src/test/java/Classes/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        LocalDateTime testTime \u003d LocalDateTime.of(2019, 2, 15, 19, 00);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Event newEvent \u003d new Event(\"To Complete Test\", testTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"[E][NOT DONE] To Complete Test (at: 15/2/2019 1900)\", newEvent.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newEvent.markAsDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"[E][DONE] To Complete Test (at: 15/2/2019 1900)\", newEvent.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 17
    }
  },
  {
    "path": "src/test/java/Classes/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestParser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListTaskCommand);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"todo asdasd\") instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"event to do work /at 02/12/2019 1830\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"deadline to do stuff /by 12/12/2020 1830\") instanceof AddDeadLineCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\") instanceof MarkTaskAsDoneCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"delete 1\") instanceof DeleteTaskCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertTrue(Parser.parse(\"find hello\") instanceof FindTaskCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            Parser.parse(\"asdasd\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "            assertEquals(\"DukeException: OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 24
    }
  },
  {
    "path": "src/test/java/Classes/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestFileLoad() throws DukeException, IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File tempFile \u003d File.createTempFile(\"duke\", \".txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        FileWriter writer \u003d new FileWriter(tempFile);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        writer.write(\"T | 0 | Hello World\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        writer.write(\"D | 0 | To Do | 02/2/2019 1830\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Storage newStorage \u003d new Storage(tempFile.getPath());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ArrayList\u003cTask\u003e newArrayList \u003d newStorage.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList(newArrayList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(newTaskList.getSize(), 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(newTaskList.getTask(1).toString(), \"[D][NOT DONE] To Do (by: 2/2/2019 1830)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 30
    }
  },
  {
    "path": "src/test/java/Classes/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestAddToTaskList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newTaskList.addToArrayList(new ToDo(\"Hello World\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(newTaskList.getSize(), 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(newTaskList.getTask(0).toString(), \"[T][NOT DONE] Hello World\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newTaskList.deleteFromArrayList(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(newTaskList.getSize(), 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 17
    }
  },
  {
    "path": "src/test/java/Classes/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void ToStringTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        ToDo newToDo \u003d new ToDo(\"Hello World\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"[T][NOT DONE] Hello World\", newToDo.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newToDo.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"[T][DONE] Hello World\", newToDo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 15
    }
  },
  {
    "path": "src/test/java/Commands/AddDeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestDeadlineCommand() throws DukeException, IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File tempFile \u003d File.createTempFile(\"duke\",\".txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Ui newUi \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Storage newStorage \u003d new Storage(tempFile.getPath());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddDeadLineCommand deadLineCommand \u003d new AddDeadLineCommand(false,\"deadline To complete work /by 1/1/2019 1830\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        deadLineCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(1, newTaskList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertTrue(tempFile.exists());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals( \"D | 0 | To complete work | 1/1/2019 1830\", Files.readAllLines(Paths.get(tempFile.getPath())).get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 28
    }
  },
  {
    "path": "src/test/java/Commands/AddEventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestEventCommand() throws DukeException, IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File tempFile \u003d File.createTempFile(\"duke\",\".txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Ui newUi \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Storage newStorage \u003d new Storage(tempFile.getPath());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddEventCommand eventCommand \u003d new AddEventCommand(false,\"event Birthday Party /at 12/12/2019 1830\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        eventCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(1, newTaskList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newTaskList.getTask(0).markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newStorage.saveToFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertTrue(tempFile.exists());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals( \"E | 1 | Birthday Party | 12/12/2019 1830\", Files.readAllLines(Paths.get(tempFile.getPath())).get(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 30
    }
  },
  {
    "path": "src/test/java/Commands/AddToDoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class AddToDoCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestToDoCommand() throws DukeException, IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File tempFile \u003d File.createTempFile(\"duke\", \".txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Ui newUi \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Storage newStorage \u003d new Storage(tempFile.getPath());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddToDoCommand todoCommand \u003d new AddToDoCommand(false, \"todo hello world\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        todoCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(1, newTaskList.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertTrue(tempFile.exists());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"T | 0 | hello world\", Files.readAllLines(Paths.get(tempFile.getPath())).get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 28
    }
  },
  {
    "path": "src/test/java/Commands/DeleteTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class DeleteTaskCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestDeleteCommand() throws DukeException, IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File tempFile \u003d File.createTempFile(\"duke\",\".txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Ui newUi \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Storage newStorage \u003d new Storage(tempFile.getPath());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddEventCommand eventCommand \u003d new AddEventCommand(false,\"event Birthday Party /at 12/12/2019 1830\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        eventCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        DeleteTaskCommand newDeleteTaskCommand \u003d new DeleteTaskCommand(false, \"delete 1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newDeleteTaskCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(0, newTaskList.getSize());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newStorage.saveToFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertTrue(tempFile.exists());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertTrue(Files.readAllLines(Paths.get(tempFile.getPath())).isEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 32
    }
  },
  {
    "path": "src/test/java/Commands/FindTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class FindTaskCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestFindCommand() throws DukeException, IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File tempFile \u003d File.createTempFile(\"duke\",\".txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        tempFile.deleteOnExit();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        TaskList newTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Ui newUi \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Storage newStorage \u003d new Storage(tempFile.getPath());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddEventCommand eventCommand \u003d new AddEventCommand(false,\"event Birthday Party /at 12/12/2019 1830\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        eventCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddToDoCommand todoCommand \u003d new AddToDoCommand(false,\"todo celebrate Birthday\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        todoCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        AddDeadLineCommand deadLineCommand \u003d new AddDeadLineCommand(false,\"deadline do homework /by 12/12/2019 1830\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        deadLineCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(3, newTaskList.getSize());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newTaskList.getTask(0).markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        FindTaskCommand newFindTaskCommand \u003d new FindTaskCommand(false, \"find Birthday\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newFindTaskCommand.execute(newTaskList, newUi, newStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                \"1.[E][DONE] Birthday Party (at: 12/12/2019 1830)\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "                \"2.[T][NOT DONE] celebrate Birthday\", newUi.output);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 37
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    public void TestResponse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        File newFile \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        newFile.delete();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Greatnest"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        Duke newDuke \u003d new Duke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"You have no tasks in your list\", newDuke.getResponse(\"list\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \\n  [T][NOT DONE] Hello World\\nNow you have 1 task(s) in the list.\", newDuke.getResponse(\"todo Hello World\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Greatnest"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Greatnest": 16
    }
  }
]
