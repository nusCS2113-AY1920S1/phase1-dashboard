[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    protected String type \u003d \"D\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Deadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] split \u003d description.split(Parser.deadline);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(split.length \u003c 2)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Please use /by to indicate date\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else if(split.length \u003e 2)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Too many /by in String\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.readDate(split[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Deadline(String bool, String description, String dueDate) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.readDate(dueDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[D][\" + this.getStatusIcon() + \"] \" + this.getDescription() +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                \" (by: \" + this.getDueDate() + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType(){ return \"D\";}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 34
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Tasklist taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            taskList \u003d new Tasklist(storage.load());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            taskList \u003d new Tasklist();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String command\u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while(!isExit)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String line \u003d ui.readCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                Parser.parse(line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                line +\u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                Scanner temp \u003d new Scanner(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                command \u003d temp.next();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String input \u003d temp.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                input \u003d input.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        taskList.print();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.matches(\"todo|deadline|event\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    taskList.add(command, input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.equals(\"find\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    taskList.find(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    taskList.markDone(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.equals(\"delete\")){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    taskList.banishDelete(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                else"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"How the hell did you reach here\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        /* I am using A collections */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Duke duke \u003d new Duke(\"list.txt\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 62,
      "-": 11
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public DukeException(String ErrorMessage)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        // Call constructor of parent Exception"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        super(ErrorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String type \u003d \"E\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Event(String description) throws DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] split \u003d description.split(Parser.event);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Please use /at to indicate date\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Too many /at in String\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.readDate(split[1]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Event(String bool, String description, String dueDate) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.readDate(dueDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[E][\" + this.getStatusIcon() + \"] \" + this.getDescription() +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                \" (by: \" + this.getDueDate() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType(){ return \"E\";}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 32
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String deadline \u003d \"\\\\s*/by\\\\s*\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String event \u003d \"\\\\s*/at\\\\s*\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String taskSeparator \u003d \"\\\\s*\\\\|\\\\s*\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String newLine \u003d \"\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Parser(){}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static void parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Scanner temp \u003d new Scanner(line);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!temp.hasNext()){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Empty Command!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String command \u003d temp.next();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (command.matches(\"list|bye\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (temp.hasNextLine()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"List should not have any other arguments (whitespace acceptable\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                //for the future"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else if (command.matches(\"todo|deadline|event|done|delete|find\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(!temp.hasNextLine())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String input \u003d temp.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            input \u003d input.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            //System.out.println(\"input is\" + input + \"\\nCommand is\" + command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(input.isBlank())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                //for the future"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 42
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private File f;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String input \u003d \"\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Storage(String filePath){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        URL path \u003d Duke.class.getResource(filePath);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.f \u003d new File(path.getFile());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        /*encoding is ANSI */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String load(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try (BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(f))) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.input +\u003d line + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            // exception handling"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            // exception handling"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"I/O Issues\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void store(Tasklist list) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try(BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(this.f))) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(int i \u003d 0; i\u003c list.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String fileContent \u003d list.get(i).getType() + \" | \" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        (list.get(i).checkCompletion() ? \"1\": \"0\") + \" | \"+ list.get(i).getDescription();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if(list.get(i).getType().matches(\"D|E\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    fileContent +\u003d \" | \" + list.get(i).getDueDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                bufferedWriter.write(fileContent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            // exception handling"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Storage Attempt Failed\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 44
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    //protected String dueDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    protected Date dueDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private static DateFormat dateFormatter \u003d new SimpleDateFormat(\"E\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Task(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void readDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.dueDate \u003d dateFormatter.parse(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch(ParseException e)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Please use DDD format for date\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(this.isDone){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"But good sir, this task is already done!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public boolean checkCompletion() {return this.isDone;}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType(){ return \"G\";}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getDueDate() { return dateFormatter.format(this.dueDate); }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[?][\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 48
    }
  },
  {
    "path": "src/main/java/Tasklist.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Tasklist {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Tasklist(){}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Tasklist(String input) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] splitTasks \u003d input.split(Parser.newLine);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (int i \u003d 0; i \u003c splitTasks.length; i++) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String[] split \u003d splitTasks[i].split(Parser.taskSeparator);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if (split[0].equals(\"T\"))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    list.add(new Todo(split[1], split[2]));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                else if (split[0].equals(\"D\"))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    list.add(new Deadline(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                else if (split[0].equals(\"E\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    list.add(new Event(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                else"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException((i+1) + \"has incorrect task format.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch(DukeException e)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            list.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Issues encountered when creating tasks, initializing empty list.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public long size(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public boolean isOutOfRange(int request){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return ((request \u003c 0) || (request \u003e\u003d this.size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void markDone(String input) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int request \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            request-\u003d1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(isOutOfRange(request)){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"The index was not found within range\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.list.get(request).markDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        \"  \" + this.list.get(request).toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch(DukeException e)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void banishDelete(String input) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int request \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            request-\u003d1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(isOutOfRange(request)){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"The index was not found within range\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        \"  \" + list.get(request).toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.list.remove(request);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Now you have \" + this.list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch(DukeException e)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!this.isOutOfRange(index))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return this.list.get(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Requested Task not found within list\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void add(String type, String input){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Task temp \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    temp \u003d new Todo(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    temp \u003d new Deadline(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    temp \u003d new Event(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"What the Hell happened here?\\n\"+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                            \"Command passed successfully to tasklist.add, not found in any case\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        finally{"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(temp !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.list.add(temp);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        temp.toList() + \"\\nNow you have \"+ this.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void find(String input) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ArrayList\u003cTask\u003e FoundList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ArrayList\u003cInteger\u003e FoundIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (this.get(i).getDescription().contains(input) || this.get(i).getDueDate().contains(input)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                FoundList.add(this.get(i));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                FoundIndex.add(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(FoundIndex.isEmpty())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"There are no matching tasks in the list\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (int i \u003d 0; i\u003c FoundIndex.size(); i++)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println((FoundIndex.get(i)+1) + \". \" + FoundList.get(i).toList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"Whoops, there doesn\u0027t seem to be anything here at the moment\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(counter++ + \". \" + task.toList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 145
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    protected String type \u003d \"T\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Todo(String bool, String description){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[T][\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType(){ return \"T\";}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 16
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String loadingError \u003d \"Formatting Issues Encountered. New Task List initialized\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public UI(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                \"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String readCommand() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(sc.hasNextLine()) return sc.nextLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else throw new DukeException(\"There are no more lines to be read\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void showError(String error){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(loadingError);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void close(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.sc.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 31
    }
  }
]
