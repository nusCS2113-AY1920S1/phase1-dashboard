[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "run {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "jefferson111": 18
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * The duke.Duke program is a simple Personal Assistant Chatbot"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * that helps a person to keep track of various things."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * @author  Jefferson111"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static  final String FILE_PATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Entry point."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        new Duke();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Creates duke.Duke instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Storage storage \u003d new Storage(FILE_PATH, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            String userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                command.execute(ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                if (command instanceof ExitCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a command to add a new task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Creates a new AddCommand with the given task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        storage.getTasks().add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ui.showAdd(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Abstract class representing individual duke.commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public abstract void execute(Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 18
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a command to delete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            Task task \u003d storage.getTasks().remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            ui.showDelete(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a command to exit duke.Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a command to find a task by keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Creates a new FindCommand with the given keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param keyword The keyword to find."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ui.showList(result);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a command to list items in a task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void execute(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ui.showList(storage.getTasks());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a command to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Creates a new MarkDoneCommand with the given index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param storage The duke.storage object containing task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            Task task \u003d storage.getTasks().get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            ui.showMarkDone(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 41
    }
  },
  {
    "path": "src/main/java/duke/commons/DukeDateTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class DukeDateTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public DukeDateTimeParseException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(Message.INVALID_FORMAT);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/commons/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Represents an error during operation of duke.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jefferson111": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Messages used by duke.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String UNKNOWN_COMMAND \u003d \"☹ I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String EMPTY_DESCRIPTION \u003d \"⛔ The description cannot be empty. :-(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \"⚡ Invalid format. Refer to help for command formats. :-(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String OUT_OF_BOUNDS \u003d \"⚠ Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String FILE_NOT_FOUND \u003d \"☢ File not found! :-(\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String FILE_NOT_SAVE \u003d \"✋ File not saved! :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static final String CORRUPTED_TASK \u003d \"✇ Task cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 14
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Parser for duke.commands entered by the duke.Duke user. It reads from standard input and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * returns Command objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses the userInput and return a Command object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @throws IllegalArgumentException If userInput is undefined."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String commandWord \u003d getCommandWord(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createTodo(userInput));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createDeadline(userInput));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createEvent(userInput));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new MarkDoneCommand(ParserUtil.getIndex(userInput));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new DeleteCommand(ParserUtil.getIndex(userInput));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new FindCommand(getWord(userInput));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Gets command word from the userInput."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The command word."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static String getCommandWord(String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return userInput.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Gets word from the userInput."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The word."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static String getWord(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return userInput.strip().split(\" \")[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 72
    }
  },
  {
    "path": "src/main/java/duke/parsers/ParserStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Parser for Storage related operations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class ParserStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses a task from String format back to task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param line The String description of a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The corresponding task object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static Task createTaskFromStorage(String line) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            String type \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            String status \u003d taskParts[1].strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            String description \u003d taskParts[2].strip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    task \u003d new Deadline(description, ParserTime.parseStringToDate(taskParts[3].strip()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    task \u003d new Deadline(description, taskParts[3].strip());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    task \u003d new Event(description, ParserTime.parseStringToDate(taskParts[3].strip()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    task \u003d new Event(description, taskParts[3].strip());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            task.setDone(status.equals(\"true\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.CORRUPTED_TASK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses a task from task to String format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param task The task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The corresponding String format of the task object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public static String toStorageString(Task task) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return \"D | \" + task.isDone() + \" | \" + task.getDescription() + \" | \" + ((Deadline) task).getDeadline();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } else if (task instanceof Todo) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return  \"T | \" + task.isDone() + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return \"E | \" + task.isDone() + \" | \" + task.getDescription() + \" | \" + ((Event) task).getEvent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        throw new DukeException(Message.CORRUPTED_TASK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 66
    }
  },
  {
    "path": "src/main/java/duke/parsers/ParserTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Parser for Time related operations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class ParserTime {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses a String into a LocalDateTime object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param line The input String for Date extraction."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The date and time, missing information wil be padded with current time information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @throws DukeDateTimeParseException If the format is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    static LocalDateTime parseStringToDate(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String[] patterns \u003d {\"[\u0027next \u0027][\u0027this \u0027]E\", \"[\u0027this \u0027][\u0027next \u0027]EEEE\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                             \"dd/MM/yy HHmm\", \"HHmm\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                             \"dd/MM/yy\", \"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        TimePatternType[] types \u003d {TimePatternType.DAY_OF_WEEK, TimePatternType.DAY_OF_WEEK,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            TimePatternType.DATE_TIME, TimePatternType.DATE_TIME, TimePatternType.TIME, TimePatternType.DATE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            TimePatternType.DATE_TIME};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.length;) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(patterns[i]).parse(line);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                switch (types[i]) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                case DAY_OF_WEEK:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                case DATE_TIME:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                case TIME:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                case DATE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                    return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 55
    }
  },
  {
    "path": "src/main/java/duke/parsers/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Parser for utility functions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses the userInput and return a new to-do constructed from it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The new to-do object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    static Todo createTodo(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String description \u003d userInput.substring(\"todo\".length()).strip();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses the userInput and return a new deadline constructed from it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The new deadline object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    static Deadline createDeadline(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String[] deadlineDetails \u003d userInput.substring(\"deadline\".length()).strip().split(\"/by\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        if (deadlineDetails.length !\u003d 2 || deadlineDetails[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        if (deadlineDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new Deadline(deadlineDetails[0].strip(), ParserTime.parseStringToDate(deadlineDetails[1].strip()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new Deadline(deadlineDetails[0].strip(), deadlineDetails[1].strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses the userInput and return a new event constructed from it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The new event object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    static Event createEvent(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String[] eventDetails \u003d userInput.substring(\"event\".length()).strip().split(\"/at\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        if (eventDetails.length !\u003d 2 || eventDetails[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        if (eventDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new Event(eventDetails[0].strip(), ParserTime.parseStringToDate(eventDetails[1].strip()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return new Event(eventDetails[0].strip(), eventDetails[1].strip());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Parses the userInput and return an index extracted from it."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    static int getIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            int index \u003d Integer.parseInt(userInput.replaceAll(\"\\\\D+\", \"\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            return index - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            throw new DukeException(Message.INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 84
    }
  },
  {
    "path": "src/main/java/duke/parsers/TimePatternType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Enumerations for different specificity of time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public enum TimePatternType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    DAY_OF_WEEK, DATE_TIME, DATE, TIME"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.parsers.ParserStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Manages duke.storage of duke.Duke data in local duke.storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Constructs a Storage object that contains duke.tasks and duke.storage related operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Mainly save duke.tasks and get duke.tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param filePath The filepath to the txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param ui The user interface displaying events on the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Storage(String filePath, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        read();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Reads duke.tasks from filepath. Creates empty duke.tasks if file cannot be read."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private void read() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        ArrayList\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                newTasks.add(ParserStorage.createTaskFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            ui.showError(Message.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        tasks \u003d newTasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Writes the duke.tasks into a file of the given filepath."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void write() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "                writer.write(ParserStorage.toStorageString(task) + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            ui.showError(Message.FILE_NOT_SAVE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 77
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Initializes a deadline not yet done with the given description and a date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param description A description of this deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Deadline(String description, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Initializes a deadline not yet done with the given description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param description A description of this deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Deadline(String description, String deadline) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Returns a string representation of this deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + (startDate \u003d\u003d null ? deadline : startDate) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return startDate \u003d\u003d null ? deadline : startDate.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 45
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing an event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Initializes a event not yet done with the given description and a date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param description A description of this event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Event(String description, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Initializes a event not yet done with the given description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param description A description of this event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Event(String description, String event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Returns a string representation of this event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + (startDate \u003d\u003d null ? event : startDate) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String getEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return startDate \u003d\u003d null ? event : startDate.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 45
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * A generic task, which can be marked as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Initializes a task not yet done with the given description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param description A description of this task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Returns the description associated with this task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return This task\u0027s description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Returns the status of the task, true/false."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return True/false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Sets this task as done or undone."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return (isDone ? \"[✓] \" : \"[✘] \") + description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 55
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class representing a to-do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Initializes a to-do not yet done with the given description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @param description A description of this to-do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Returns a string representation of this to-do."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " * Class that handles user input and messages shown to user of this application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static final String MESSAGE_MARK_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this task:\\n  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private static final String MESSAGE_DELETE \u003d \"Alright! I\u0027ve removed this task:\\n  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints a welcome message to the user, which happens at startup."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints an error message to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints a bye message to the user, which happens upon exit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(MESSAGE_BYE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints the list of duke.tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); ++i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            System.out.println((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints the description of a task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showAdd(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(MESSAGE_ADDITION + task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints the task that is mark done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showMarkDone(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(MESSAGE_MARK_DONE + task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Prints the task that is deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public void showDelete(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(MESSAGE_DELETE + task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * Scans the next line from standard input, returning a String containing the user input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * with leading and trailing whitespaces removed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     * @return The String corresponding to the user input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        String line \u003d scanner.nextLine().strip();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        System.out.println(\"\\n\" + line);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 91
    }
  },
  {
    "path": "src/test/java/duke/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Storage storage \u003d new Storage(\"tasks.txt\", ui);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Task task \u003d new Todo(\"homework\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        addCommand.execute(ui, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        assertTrue(storage.getTasks().contains(task));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 22
    }
  },
  {
    "path": "src/test/java/duke/parsers/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(Parser.parse(\"todo homework\") instanceof AddCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(Parser.parse(\"deadline homework /by tomorrow\") instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(Parser.parse(\"event exam /at classroom\") instanceof AddCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 26
    }
  },
  {
    "path": "src/test/java/duke/parsers/ParserTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.commons.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class ParserTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void parseStringToDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertEquals(date, ParserTime.parseStringToDate(\"09/09/2019 0909\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 22
    }
  },
  {
    "path": "src/test/java/duke/parsers/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class ParserUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void createTodo() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(ParserUtil.createTodo(\"Homework\") instanceof Todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void createDeadline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(ParserUtil.createDeadline(\"deadline homework /by tomorrow\") instanceof Deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void createEvent() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertTrue(ParserUtil.createEvent(\"event exam /at classroom\") instanceof Event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            assertEquals(ParserUtil.getIndex(\"done 1\"), 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "            System.out.println(\"Fail\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 48
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Homework\", \"tomorrow\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        assertEquals(deadline.toString(), \"[D][✘] Homework (by: tomorrow)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 14
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Exam\", \"Classroom\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        assertEquals(event.toString(), \"[E][✘] Exam (at: Classroom)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 14
    }
  },
  {
    "path": "src/test/java/duke/tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        Todo todo \u003d new Todo(\"Homework\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✘] Homework\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jefferson111": 14
    }
  }
]
