[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "test {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.gui.DialogBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * A chat bot cum task management application that can handle events, deadlines and normal to-do tasks,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * as well as basic exception handling."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Duke object, which initializes the UI, duke.TaskList and duke.Storage in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * order to carry out its functions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        storage \u003d new Storage(Paths.get(\"data\",\"todo_list.txt\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            storage.loadList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Runs the program, constantly asking for and responding to user input, finally terminating"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * upon the word \"Bye\"."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        System.out.println(ui.showWelcomeMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                System.out.println(output);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                System.out.println(ui.showError(e));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Main function for duke.Duke, which creates a new duke.Duke object and runs it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param args Standard Java arguments for a main function, in this case, not used"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Initializes the GUI for duke.Duke"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param stage todo"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        stage.setTitle(\"duke.Duke\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        });"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * todo"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * todo"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DialogBox.getUserDialog(userInput.getText(), user),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DialogBox.getDukeDialog(getResponse(userInput.getText()), duke)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        );"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String, which is the response of duke.Duke in accordance to the input."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param input the String typed in as an input for duke.Duke"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the response String to be displayed"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            //isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 198,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * Custom exception class for all duke.Duke-related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String type \u003d \"other\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for duke.DukeException for default type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param input input message that triggered the exception"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DukeException(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for duke.DukeException for specific Tasks, in order to provide"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * type-specific error messages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param input input message that triggered the exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param type the type of the duke.tasks.Task that was attempted to be created which"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *             caused the exception (i.e. duke.tasks.ToDo, duke.tasks.Event, or duke.tasks.Deadline)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DukeException(String input, String type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the message associated with the type of duke.DukeException that has occurred."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the error message associated with the exception"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String message \u003d \"An unknown exception has occurred.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String word \u003d input.trim().equals(\"event\") ? \"an \" : \"a \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (input.trim().equals(\"todo\") || input.trim().equals(\"event\") || input.trim().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            message \u003d \"OOPS!!! The description of \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    + word"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    + input.trim()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    + \" cannot be empty.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (!type.equals(\"other\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"todo\": {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"event\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (!input.contains(\"/at\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    message \u003d \"OOPS!!! duke.tasks.Event is missing a location.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"deadline\": {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (!input.contains(\"/by\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    message \u003d \"OOPS!!! duke.tasks.Deadline is missing a deadline.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"io\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! An IO exception has occurred.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"empty\": {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"List is empty! Please enter a valid command.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"index\": {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"Invalid index! Please try again.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return Ui.wrap(message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // wrap is called from Ui in order to standardize the formatting of the output"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 90
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * todo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 37
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class used to interpret the incoming messages and translate them into the appropriate duke.Commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the duke.Commands.duke.Commands.Command object interpreted from the input message, and throws a duke.DukeException otherwise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message to be parsed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the duke.Commands.duke.Commands.Command object interpreted from the input message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of parsing errors"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static Command parse(String message) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (message.equals(\"bye\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (message.equals(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (message.length() \u003e\u003d 8 \u0026\u0026 message.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new DeleteCommand(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (message.length() \u003e\u003d 6 \u0026\u0026 message.substring(0,4).equals(\"find\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new FindCommand(message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else if (message.length() \u003e\u003d 6 \u0026\u0026 message.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new DoneCommand(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return new AddCommand(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 33
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class to implement persistent storage of the task list using a .txt file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Path file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Storage class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param file the Path object representing the path to the file being used to store the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    Storage(Path file) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns an ArrayList of the String representations of all the duke.tasks.Task objects in the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the task list containing all the duke.tasks.Task objects"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an ArrayList of the String representations of the tasks in the task list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cString\u003e formatFile(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.add(task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Writes the task list to the .txt file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param tasks an ArrayList of the String representations of the tasks in the task list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void writeFile(ArrayList\u003cString\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Files.write(file, tasks, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Reads the .txt fil and returns an ArrayList of Strings that represent the tasks in the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return an ArrayList of Strings that represent the tasks in the task list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cString\u003e readFile() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // reads file and returns an ArrayList of lines"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try (BufferedReader br \u003d Files.newBufferedReader(file)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.add(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\", \"io\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * After reading the file, converts each String representation back into its corresponding"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.tasks.Task object and pushes it into the duke.TaskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    void loadList(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        // loads data into list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d readFile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (String line: data) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            convertString(taskList, line);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Interprets the String, translates it to the appropriate duke.tasks.Task object, and adds it"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * to the duke.TaskList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param s the String representation to be converted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void convertString(TaskList taskList, String s) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String type \u003d s.substring(1,2); // T, D or E"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            boolean isDone \u003d s.substring(4,5).equals(\"v\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String addendum;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                description \u003d s.substring(7);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                ToDo todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    todo.setDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                taskList.add(todo);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"E\": {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"at:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                addendum \u003d sections[1].substring(1, sections[1].length() - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Event event \u003d new Event(description, addendum);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    event.setDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            case \"D\": {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String[] sections \u003d s.substring(7).split(\"by:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                description \u003d sections[0].substring(0, sections[0].length() - 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                addendum \u003d sections[1].substring(1, sections[1].length() - 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, addendum);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (isDone) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    deadline.setDone();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                taskList.add(deadline);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Updates the .txt file with the latest task list found within the duke.Duke program."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object used to store the task list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of input or output exceptions"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void updateFile(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        writeFile(formatFile(taskList.getTaskList()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 159
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * Class used to store the task list and perform necessary manipulations to the task list such as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * adding tasks, removing tasks and finding tasks based on keywords, as well as obtaining the size"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * of the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Removes an element from the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param index the index of the duke.tasks.Task in the task list that is to be removed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Adds an element to the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param t the duke.tasks.Task object to be added to the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a subset of the task list (implemented as an ArrayList of duke.tasks.Task objects) that contains"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * the query specified in the argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param query the search query to be obtained from the input command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the ArrayList of duke.tasks.Task objects whose description contained the query"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(String query) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (t.getDescription().contains(query)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.add(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the current size of the task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the current size of the task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the task list for duke.Duke, which is implemented as an ArrayList of duke.tasks.Task objects."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the task list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 69
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class used to read the input duke.commands (for the command line implementation of duke.Duke) and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * return the messages to be displayed in duke.Duke as a response to the user\u0027s input messages."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Reads the input message of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the input message of the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a welcome message for duke.Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a welcome message for duke.Duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String showWelcomeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return \"Hello from\\n\" + logo + wrap(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a final message from duke.Duke in the case of termination."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a terminal message from duke.Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static String showByeMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the error message associated with the caught duke.DukeException."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param e the duke.DukeException that was caught"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the error message associated with the duke.DukeException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String showError(DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the String but wrapped in between two horizontal lines for enhanced"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * reading and display on the command line interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param content the String to be wrapped with horizontal lines"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the wrapped String to be displayed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static String wrap(String content) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (\"\\n__________________________________\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + content"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n__________________________________\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String formatted for display that shows the results of the find command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the results of the find command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatFind(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(\"No such results!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.append(i + 1)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                        .append(list.get(i).toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    result.append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String formatted for display that shows all the elements in the task list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * due to the list command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(\"The list is empty!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String formatted for display that indicates that a task has been marked as done"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * by the done command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the task list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param index the index of the duke.tasks.Task object that was marked as done"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatDone(ArrayList\u003cTask\u003e list, int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String result \u003d \"Nice! I\u0027ve marked this task as done:\\n \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + list.get(index - 1).toString()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String formatted for display that indicates that a task has been deleted by"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * the done command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the task list prior to deletion"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param index the index of the item that was deleted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatDelete(ArrayList\u003cTask\u003e list, int index) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 2) ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String result \u003d \"Noted! I\u0027ve removed this task:\\n \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + list.get(index - 1).toString()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"Now you have \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + (list.size() - 1)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String formatted for display that indicates that a duke.tasks.Task object has been added"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * by the add command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param list the task list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param task the item that was added to the task list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String formatAdd(ArrayList\u003cTask\u003e list, Task task) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String word \u003d (list.size() \u003d\u003d 1) ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + task.toString()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + list.size()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + word"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return wrap(result);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 173
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class representing the command to add tasks to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the command to add a task to the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public AddCommand(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String identifier;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            identifier \u003d message.substring(0, 4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        switch (identifier) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            ToDo todo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.length() \u003c 5 || !message.substring(4,5).equals(\" \")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                todo \u003d new ToDo(message.trim().substring(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                taskList.add(todo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), todo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(message, \"todo\"); //empty to-do"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"dead\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.length() \u003c 9 || !message.substring(4,9).equals(\"line \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Deadline deadline;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String[] sections \u003d message.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                deadline \u003d new Deadline(sections[0], sections[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                taskList.add(deadline);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(message,\"deadline\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        case \"even\": {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (message.length() \u003c 6 || !message.substring(4,6).equals(\"t \")) { //exception if not fully spelt"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                String[] sections \u003d message.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                event \u003d new Event(sections[0], sections[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return ui.formatAdd(taskList.getTaskList(), event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(message, \"event\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 103
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class representing the command to terminate and exit duke.Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private boolean exit \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Executes the command and terminates duke.Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return ui.showByeMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * An abstract class used to represent a command interpreted from an input message. Extended by"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eAddCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eListCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eDoneCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eDeleteCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eFindCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " *     \u003cli\u003eByeCommand\u003c/li\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Executes the command by performing the necessary changes to the task list and the .txt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * file used as persistent storage, and returns a formatted String to be displayed by the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * command line interface / GUI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param tasks the duke.TaskList object that contains the task list in use"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object responsible for the reading of user input and the display of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *           the responses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the Storage object used to read and manipulate the .txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the formatted String to be displayed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException in the case of either parsing or IO errors"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public abstract String execute(duke.TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class that represents the command to delete an item from the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Commands.Command created to delete a task from the duke.TaskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DeleteCommand(String message) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            index \u003d Integer.parseInt(message.substring(7));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"empty\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (index \u003e taskList.getSize() || index \u003c 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"index\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e(taskList.getTaskList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            taskList.remove(index - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                throw new DukeException(\"\",\"io\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return ui.formatDelete(temp, index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 71
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Commands.Command to mark a task in the duke.TaskList as \u0027done\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message or in IO"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public DoneCommand(String message) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            index \u003d Integer.parseInt(message.substring(5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the TaskList object that contains the task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return \"List is empty! Please enter a valid command.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (index \u003e taskList.getSize() || index \u003c 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return \"Invalid index! Please try again.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            taskList.getTaskList().get(index - 1).setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                storage.updateFile(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return \"OOPS!!! An IO exception has occurred.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return ui.formatDone(taskList.getTaskList(), index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 62
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class representing the command used to find all tasks in the task list that contain the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * inputted query."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.Commands.Command to find a task based on inputted query."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param message the input message that resulted in the creation of the duke.Commands.Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @throws DukeException if an exception occurs in the parsing of the message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public FindCommand(String message) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.query \u003d message.substring(5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            throw new DukeException(\"\",\"other\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cTask\u003e res \u003d taskList.findTask(query);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return ui.formatFind(res);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 57
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Modifies the task list in use and returns the messages intended to be displayed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param taskList the duke.TaskList object that contains the task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param ui the Ui object that determines the displayed output of duke.Duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the string to be displayed in duke.Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return ui.formatList(taskList.getTaskList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a boolean value representing whether the program will terminate or not, used in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * duke.Duke to reassign a boolean variable checked at each iteration of a while loop."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a boolean value that represents whether the program will terminate after the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 31
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 61
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A launcher class for the GUI implementation of duke.Duke to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 13
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * Controller for duke.gui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 53
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class inheriting from duke.tasks.Task used to represent tasks that have both a description and an"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * associated deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for a duke.tasks.Deadline task, which consists of the description of the task and the deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * associated with it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * The program assumes the following formats for date and time:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *         dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *         dd/MM/yyyy hh:mm a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *         dd/MM/yyyy          (time assumed as 2359)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *                    HHmm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *                    hh:mm a  (date assumed as today)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param by the deadline associated with the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String[] simpleDateTime \u003d by.trim().split(\" \",2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            LocalDateTime byDT \u003d convertToLocalDateTime(simpleDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.by \u003d byDT.format(dateTimeFormatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            this.by \u003d by; // custom deadline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the duke.tasks.Deadline object, displaying its type (duke.tasks.Deadline),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * description and the deadline associated with it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a String representation of the duke.tasks.Deadline object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Deciphers the date and time mentioned in the input and returns a LocalDateTime object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * to be used for standardized date and time representation."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param simpleDateTime a String array that is the result of splicing the \"by\" section of the input command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the LocalDateTime object that is translated from the simple date and time keyed in as Strings"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private LocalDateTime convertToLocalDateTime(String[] simpleDateTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String defaultDate \u003d now.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        String defaultTime \u003d \"2359\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (simpleDateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String s \u003d simpleDateTime[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (s.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                // hh:mm a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return LocalDateTime.parse(defaultDate + \" \" + s, formatter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } else if (s.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                // HHmm"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return LocalDateTime.parse(defaultDate + \" \" + s, formatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                // dd/MM/yyyy"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                return LocalDateTime.parse(s + \" \" + defaultTime, formatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String date \u003d simpleDateTime[0];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            String time \u003d simpleDateTime[1];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (time.length() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                // dd/MM/yyyy hh:mm a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                // dd/MM/yyyy HHmm"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            return LocalDateTime.parse(date + \" \" + time, formatter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 93
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class inheriting from duke.tasks.Task used to represent tasks that have both a description and an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * associated location."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.tasks.Event object, which consists of the description of a task and a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * location that is associated with it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param at the location associated with the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.at \u003d at.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the duke.tasks.Event object, displaying its type (duke.tasks.Event),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * description and the location associated with it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a String representation of the duke.tasks.Event object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 33
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * duke.tasks.Task class used in duke.Duke. Extended by duke.tasks.Event, duke.tasks.ToDo, and duke.tasks.Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor for the duke.tasks.Task object, which is not used due to the further categorization"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * of duke.tasks.Task objects into the inherited duke.tasks.ToDo, duke.tasks.Event and duke.tasks.Deadline objects that extend the duke.tasks.ToDo Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the icon of the task that represents whether the task is done or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * v represents the task being done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * x represents the task being not done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the status icon of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (isDone ? \"v\" : \"x\"); // returns ticks (v) and crosses (x)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns the description of the Task object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return the description of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Return a String representation of the duke.tasks.Task, as displayed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * on the command line / in todo_list.txt"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a String representation of the duke.tasks.Task object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + this.getStatusIcon()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Sets the task as done. Note that conversion back to an un-done state is perceived"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * to be unnecessary as it does not make sense for done tasks to be un-done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 63
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " * A class inheriting from duke.tasks.Task used to represent tasks that has just a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Constructor used to create the duke.tasks.ToDo object, which contains only a description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * Returns a String representation of the duke.tasks.ToDo object, displaying its type (duke.tasks.ToDo),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * and description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     * @return a String representation of the duke.tasks.ToDo object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 27
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 19
    }
  },
  {
    "path": "src/test/java/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    static String wrap(String content) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        return (\"\\n__________________________________\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + content"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                + \"\\n__________________________________\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void testByeMessage() { // dummy test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(wrap(\"Bye. Hope to see you again soon!\"), Ui.showByeMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void testFormatList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        list.add(new ToDo(\"hello\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(i + 1)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                    .append(list.get(i).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            if (i !\u003d list.size() - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "                result.append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "            result.append(\"The list is empty!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(Ui.wrap(result.toString()), wrap(\"1. [T][x] hello\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 42
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void testToString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[D][x] Read book (by: whenever)\", new Deadline(\"Read book\", \"whenever\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[D][x] Celebrate My Birthday (by: 12/12/2019 11:59 PM)\", new Deadline(\"Celebrate My Birthday\", \"12/12/2019 2359\").toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[D][x] Celebrate My Birthday (by: 12/12/2019 12:20 PM)\", new Deadline(\"Celebrate My Birthday\", \"12/12/2019 12:20 PM\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[D][x] Read book (by: 12/09/2019 11:59 PM)\", new Deadline(\"Read book\", \"12/09/2019\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 17
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void testToString(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[E][x] Read book (at: COM1)\", new Event(\"Read book\", \"COM1\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 14
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rohan-av"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "        assertEquals(\"[T][x] Read book\", new ToDo(\"Read book\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rohan-av"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rohan-av": 13
    }
  }
]
