[
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 22,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.parse.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "class Main {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Main() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Could not read tasks from disk, will start with empty file\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        boolean hasExited \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (!hasExited \u0026\u0026 parser.hasNextLine()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Command command \u003d parser.parseLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                hasExited \u003d command.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (DukeException exceptionMessage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(exceptionMessage.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        new Main().run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shamussy": 49
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.printMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.printMessage(task.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.printMessage(\"You now have \" + size + \" tasks in the list\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            storage.writeFile(tasks.export());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Error writing tasks to file\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 31
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    boolean exit \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 15
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public DeleteCommand(String data) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        data \u003d data.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String pattern \u003d \"^[0-9]+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!data.matches(pattern)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The task number should be numeric only\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                this.taskNumber \u003d Integer.parseInt(data);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (NumberFormatException exceptionMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new DukeException(\"The number must be an integer and cannot exceed 9 digits\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (this.taskNumber \u003c\u003d tasks.size()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String taskInformation \u003d tasks.get(taskNumber).toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                tasks.delete(this.taskNumber);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage(taskInformation);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    storage.writeFile(tasks.export());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Error writing tasks to file\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionMessage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"Invalid task number, there are \" + tasks.size() + \" tasks\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"You entered: \" + data);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Invalid task number, there are \" + tasks.size() + \" tasks\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public DoneCommand(String data) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        data \u003d data.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String pattern \u003d \"^[0-9]+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!data.matches(pattern)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The task number should be numeric only\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                this.taskNumber \u003d Integer.parseInt(data);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } catch (NumberFormatException exceptionMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                throw new DukeException(\"The number must be an integer and cannot exceed 9 digits\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (tasks.get(taskNumber).isDone()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"The task is already done\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage(tasks.get(taskNumber).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    tasks.markDone(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printMessage(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printMessage(tasks.get(taskNumber).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        storage.writeFile(tasks.export());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                        ui.printError(\"Error writing tasks to file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                } catch (IndexOutOfBoundsException exceptionMessage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"Invalid task number, there are \" + tasks.size() + \" tasks\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printError(\"You entered: \" + data);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (IndexOutOfBoundsException exceptionMessage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Invalid task number, there are \" + tasks.size() + \" tasks\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"You entered: \" + data);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 55
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ui.printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 15
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!keyword.isEmpty() \u0026\u0026 !keyword.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ArrayList\u003cTask\u003e result \u003d tasks.filter(keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (result.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printError(\"There are no tasks that match this keyword\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                ui.printMessage(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                for (int i \u003d 0; i \u003c result.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    ui.printMessage(i + 1 + \".\" + result.get(i).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"Keyword cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printError(\"The list is empty\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            ui.printMessage(i + \".\" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 14
    }
  },
  {
    "path": "src/main/java/duke/parse/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.parse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Command parseLine() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        parseIsBlank(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String action \u003d parseAction(input).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String data \u003d parseData(input, action);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return parseActionMenu(action, data);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private void parseIsBlank(String input) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (input.isBlank() || input.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"User input is empty, please enter something\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String parseAction(String input) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] inputSplit \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (\"bye\".equals(inputSplit[0]) \u0026\u0026 inputSplit.length !\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"bye should not contain trailing arguments\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } else if (\"list\".equals(inputSplit[0]) \u0026\u0026 inputSplit.length !\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"list should not contain trailing arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return inputSplit[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String parseData(String input, String action) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String data \u003d input.substring(action.length(), input.length());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private Command parseActionMenu(String action, String data) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new DoneCommand(data);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new DeleteCommand(data);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new FindCommand(data);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new AddCommand(Deadline.create(data));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new AddCommand(Event.create(data));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return new AddCommand(Todo.create(data));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 75
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ArrayList\u003cString\u003e readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString\u003e out \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            out.add(sc.nextLine());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void writeFile(ArrayList\u003cString\u003e lines) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        new File(\"data/\").mkdirs(); //creates directory if it does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        FileWriter writer \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            writer.write(line + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 36
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static Deadline create(String data) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String description \u003d parseDeadlineDesc(data);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        LocalDateTime by \u003d parseDeadlineTime(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return new Deadline(description, by);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static String parseDeadlineDesc(String data) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (data.isEmpty() || data.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"Description or date cannot be empty or blank spaces only\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!data.contains(\" /by \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"Deadline must contain an end date using /by \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (\"deadline\".equals(data)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] splitInput \u003d data.split(\" /by \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (data.startsWith(\"deadline /by\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (splitInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The deadline requires an end date/time after specifying /by\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \". Make sure to use \u003cspace\u003e/by\u003cspace\u003e\u003cdate\u003e\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int index \u003d data.lastIndexOf(\" /by \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String description \u003d data.substring(0, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be \" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \"empty or space even when /by is correct\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static LocalDateTime parseDeadlineTime(String data) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int index \u003d data.lastIndexOf(\" /by \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String date \u003d data.substring(index + 5, data.length()); //+5 because of _/by_"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (date.isBlank() || date.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The time cannot be empty or space bar\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateRegex \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String timeRegex \u003d \"^(0[0-9]|1[0-9]|2[0-3])[0-5][0-9]$\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] dateTime \u003d date.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (dateTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The format is wrong, please try in DD/MM/YYYY HHMM format\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateOnly \u003d dateTime[0].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String timeOnly \u003d dateTime[1].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!dateOnly.matches(dateRegex)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The date format is wrong, please try in DD/MM/YYYY format\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!timeOnly.matches(timeRegex)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The time format is wrong, please try again in HHMM format\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return LocalDateTime.parse(date, inputFormatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"Time must be in the format day#/month#/yyyy hhmm.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" (by: \" + this.by.format(displayFormatter) + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String export() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"D | \" + super.export() + super.getDescription().length() + \" | \" + super.getDescription()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" | \" + this.by.format(inputFormatter).length() + \" | \" + this.by.format(inputFormatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 94
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final LocalDateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"EEEE dd MMMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static Event create(String data) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String description \u003d parseEventDesc(data);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        LocalDateTime at \u003d parseEventTime(data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return new Event(description, at);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static String parseEventDesc(String data) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (data.isEmpty() || data.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"Description or date cannot be empty or blank spaces only\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!data.contains(\" /at \")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"Event must contain an end date using /at \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (\"event\".equals(data)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] splitInput \u003d data.split(\" /at \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (data.startsWith(\"event /at\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (splitInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The event requires an end date/time after specifying /at\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \". Make sure to use \u003cspace\u003e/at\u003cspace\u003e\u003cdate\u003e\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int index \u003d data.lastIndexOf(\" /at \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String description \u003d data.substring(0, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be \" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    \"empty or space even when /at is correct\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private static LocalDateTime parseEventTime(String data) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        int index \u003d data.lastIndexOf(\" /at \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String date \u003d data.substring(index + 5, data.length()); //+5 because of _/at_"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (date.isBlank() || date.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The time cannot be empty or space bar\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateRegex \u003d \"(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String timeRegex \u003d \"^(0[0-9]|1[0-9]|2[0-3])[0-5][0-9]$\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String[] dateTime \u003d date.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (dateTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The format is wrong, please try in DD/MM/YYYY HHMM format\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String dateOnly \u003d dateTime[0].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String timeOnly \u003d dateTime[1].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!dateOnly.matches(dateRegex)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The date format is wrong, please try in DD/MM/YYYY format\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (!timeOnly.matches(timeRegex)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The time format is wrong, please try again in HHMM format\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            return LocalDateTime.parse(date, inputFormatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"Time must be in the format day#/month#/yyyy hhmm.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" (at: \" + this.at.format(displayFormatter) + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String export() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"D | \" + super.export() + super.getDescription().length() + \" | \" + super.getDescription()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                + \" | \" + this.at.format(inputFormatter).length() + \" | \" + this.at.format(inputFormatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 94
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    void markDone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private String getDoneChar() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return done ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        String boxedChar \u003d \"[\" + getDoneChar() + \"]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return boxedChar + \" \" + description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String export() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return (done ? \"1 | \" : \"0 | \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 37
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e stringTasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (String line : stringTasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String taskType \u003d line.substring(0, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String taskStatus \u003d line.substring(4, 5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String[] lineSplit \u003d line.split(\"\\\\|\", -1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int descriptionLength \u003d Integer.parseInt(lineSplit[2].trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int descriptionLengthIndex \u003d line.indexOf(\" | \", line.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int descriptionLengthLength \u003d lineSplit[2].length();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            int startOfDescriptionIndex \u003d descriptionLengthIndex + 1 + descriptionLengthLength + 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            String description \u003d line.substring(startOfDescriptionIndex,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    startOfDescriptionIndex + descriptionLength);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (\"1\".equals(taskStatus)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    todo.markDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String date \u003d line.substring(startOfDescriptionIndex + descriptionLength, line.length());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String[] dateSplit \u003d date.split(\"\\\\|\", -1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                int dateLength \u003d Integer.parseInt(dateSplit[1].trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                int dateLengthLength \u003d dateSplit[1].length();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                int startOfDateIndex \u003d 2 + dateLengthLength + 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                String dateString \u003d date.substring(startOfDateIndex, date.length());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                LocalDateTime by \u003d LocalDateTime.parse(dateString, inputFormatter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (\"1\".equals(taskStatus)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    deadline.markDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                date \u003d line.substring(startOfDescriptionIndex + descriptionLength, line.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                dateSplit \u003d date.split(\"\\\\|\", -1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                dateLength \u003d Integer.parseInt(dateSplit[1].trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                dateLengthLength \u003d dateSplit[1].length();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                startOfDateIndex \u003d 2 + dateLengthLength + 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                dateString \u003d date.substring(startOfDateIndex, date.length());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                inputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                LocalDateTime at \u003d LocalDateTime.parse(dateString, inputFormatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                if (\"1\".equals(taskStatus)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                    event.markDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public Task get(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return tasks.get(i - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(String keyword) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shamussy"
        },
        "content": "                output.add(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void markDone(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        tasks.get(i - 1).markDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void delete(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        tasks.remove(i - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public ArrayList\u003cString\u003e export() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            output.add(tasks.get(i - 1).export());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 106
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public static Todo create(String description) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        if (description.isEmpty() || description.isBlank()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty or blank spaces only\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public String export() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        return \"T | \" + super.export() + super.getDescription().length() + \" | \" + super.getDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 28
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shamussy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shamussy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shamussy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void printMessage(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"What can I do for you?\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    public void printError(String exceptionMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shamussy"
        },
        "content": "        printMessage(\"☹ OOPS!!! \" + exceptionMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shamussy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shamussy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shamussy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shamussy": 21
    }
  }
]
