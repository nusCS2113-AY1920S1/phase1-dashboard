[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "// group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "sourceSets.main.java.srcDirs \u003d [\u0027src\u0027]"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Duke/Commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected final String SPACE \u003d \"\\t    \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to set the entered string to the input variable and to set"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * the boolean variable isExit to false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Command(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Getter function for the boolean variable isExit which acts as a flag for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * whether the Exit command is entered by the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return isExit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Function executed upon receiving a command from the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    abstract public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 43
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Construction to initialize the variables of the parent class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DeadlineCommand(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks whether the format of the deadline command is correct, and if it is, adds the deadline task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * to the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newInput \u003d super.description.substring(9);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newInput.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"deadline\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int lastOccurrence \u003d newInput.lastIndexOf(\" /by \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String description \u003d newInput.substring(0,lastOccurrence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String dateAndTime \u003d newInput.substring(lastOccurrence+5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (description.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"deadline\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (dateAndTime.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDateAndTimeEmpty(\"deadline\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task x \u003d new Deadline(description, dateAndTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (!x.format) throw new DukeException(ui.errorMessages.invalidDateAndTime());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                tasks.add(x);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                tasks.acknowledgment();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            throw new DukeException(ui.errorMessages.taskWrongFormat(\"deadline\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 51
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Construction to initialize the variables of the parent class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DeleteCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks whether the format of the delete command is correct, and if it is, deletes the task using its index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * from the task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] newInput \u003d super.description.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if(newInput.length \u003d\u003d 1) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"delete\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int i \u003d Integer.parseInt(newInput[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (i \u003c 0 || i \u003e tasks.size()) throw new DukeException(ui.errorMessages.invalidIndex());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String numberOfTasks \u003d ((tasks.size() - 1) !\u003d 1) ? \"tasks\" : \"task\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int count \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ui.printDuke(\"Noted. I\u0027ve removed this task:\\n\" + SPACE + tasks.get(i - 1).getItem()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    + \"\\n\\t Now you have \" + count + \" \" + numberOfTasks + \" in the list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            tasks.remove(i - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            throw new DukeException(ui.errorMessages.taskWrongFormat(\"delete\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 45
    }
  },
  {
    "path": "src/main/java/Duke/Commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Construction to initialize the variables of the parent class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DoneCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks whether the format of the done command is correct, and if it is, marks the task as done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String[] newInput \u003d super.description.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if(newInput.length \u003d\u003d 1) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"done\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int i \u003d Integer.parseInt(newInput[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (i \u003c 0 || i \u003e tasks.size()) throw new DukeException(ui.errorMessages.invalidIndex());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            tasks.get(i - 1).isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ui.printDuke(\"Nice! I\u0027ve marked this task as done:\\n\" + super.SPACE + tasks.get(i - 1).getItem());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            throw new DukeException(ui.errorMessages.taskWrongFormat(\"done\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 41
    }
  },
  {
    "path": "src/main/java/Duke/Commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public EventCommand(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks whether the format of the event command is correct, and if it is, adds the event task to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * the task list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newInput \u003d super.description.substring(6);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newInput.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"event\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            int lastOccurrence \u003d newInput.lastIndexOf(\" /at \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String description \u003d newInput.substring(0,lastOccurrence);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String dateAndTime \u003d newInput.substring(lastOccurrence+5);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (description.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"event\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (dateAndTime.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDateAndTimeEmpty(\"event\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Task x \u003d new Event(description, dateAndTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (!x.format) throw new DukeException(ui.errorMessages.invalidDateAndTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                tasks.add(x);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                tasks.acknowledgment();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            throw new DukeException(ui.errorMessages.taskWrongFormat(\"event\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 46
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Construction to initialize the variables of the parent class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ExitCommand(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Updates the boolean variable isExit in the parent class to true indicating that the user has"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * entered the Exit command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ui.byeDuke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 32
    }
  },
  {
    "path": "src/main/java/Duke/Commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Construction to initialize the variables of the parent class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks whether the format of the find command is correct, and if it is, returns the matching tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * to the keyword(s) entered by the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newInput \u003d super.description.substring(5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newInput.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"find\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String description \u003d tasks.get(i).description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (newInput.length() \u003e description.length()) continue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (description.contains(newInput)) matchingTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "//            String[] descriptions \u003d tasks.get(i).description.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "//            for (int j \u003d 0; j \u003c descriptions.length; j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "//                if (newInput.equals(descriptions[j])) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "//                    matchingTasks.add(tasks.get(i)); break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ui.printDuke(\"There are no matching tasks in the list.\"); return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(ui.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(\"\\t Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (int i \u003d 0 ; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"\\t \"+(i+1)+\". \"+matchingTasks.get(i).getItem());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(ui.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 58
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ListCommand(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Displays the list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            ui.printDuke(\"There are no tasks in the list.\"); return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(ui.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(\"\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (int i \u003d 0 ; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"\\t \"+(i+1)+\". \"+tasks.get(i).getItem());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(ui.HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 33
    }
  },
  {
    "path": "src/main/java/Duke/Commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Construction to initialize the variables of the parent class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ToDoCommand(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks whether the format of the todo command is correct, and if it is, adds the todo task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * to the task list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param tasks object containing the task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param ui object which deals with interactions with the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param storage object which deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the task description entered by the user is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String newInput \u003d super.description.substring(5);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (newInput.trim().isEmpty()) throw new DukeException(ui.errorMessages.taskDescriptionEmpty(\"todo\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task x \u003d new ToDo(newInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        tasks.add(x);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        tasks.acknowledgment();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 39
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private static final String filePath \u003d \"src/Duke/data/duke.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to instantiate the ui, storage, tasks and parser objects"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param filePath string containing the path of the persistent file storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks \u003d this.storage.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Runs the Duke.Duke.DukeOperations program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void runDuke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.ui.welcomeDuke();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String fullCommand \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                Command command \u003d this.parser.parseInput(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                command.execute(this.tasks,this.ui,this.storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } catch(DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.ui.printDuke(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Main function"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        new Duke(filePath).runDuke();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 53,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Duke/DukeOperations/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.DukeOperations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to create new instance of UI object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks the command entered by the user and if valid, returns a command object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * corresponding to it"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param input the command entered by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @throws DukeException exception thrown when the command entered by the user is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Command parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (input.length()\u003d\u003d3 \u0026\u0026 input.equals(\"bye\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new ExitCommand(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003d\u003d 4 \u0026\u0026 input.equals(\"list\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0, 5).equals(\"done \"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003e\u003d 7 \u0026\u0026 input.substring(0, 7).equals(\"delete \"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0, 5).equals(\"todo \"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new ToDoCommand(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003e\u003d 9 \u0026\u0026 input.substring(0, 9).equals(\"deadline \"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new DeadlineCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0, 6).equals(\"event \"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new EventCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else if (input.length() \u003e\u003d 5 \u0026\u0026 input.substring(0, 5).equals(\"find \"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            throw new DukeException(this.ui.errorMessages.notRecognized());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 44
    }
  },
  {
    "path": "src/main/java/Duke/DukeOperations/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.DukeOperations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected ErrorMessages errorMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to update the filepath variable and instantiate the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * taskList and errorMessages objects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.errorMessages \u003d new ErrorMessages();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Reads the task list stored in the data file and updates the task list object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return object containing the task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public TaskList load() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String[] line \u003d scanner.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                boolean status \u003d (Integer.parseInt(line[1])\u003d\u003d1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (line[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskList.addToDo(line[2],status);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                else if (line[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskList.addDeadline(line[2],status,line[3]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                else if (line[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                    taskList.addEvent(line[2],status,line[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.fileNotFound();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Writes the contents of the task list to the data file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskList object containing the task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void update(TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            writer.print(taskList.writeListToFile());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            errorMessages.fileNotFound();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 70
    }
  },
  {
    "path": "src/main/java/Duke/DukeOperations/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.DukeOperations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.ErrorMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String HORIZONTAL_LINE \u003d \"\\t___________________________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ErrorMessages errorMessages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to instantiate the scanner and errorMessages objects"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.errorMessages \u003d new ErrorMessages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints welcome message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void welcomeDuke() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String tab \u003d \"\\t \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String logo \u003d tab+\" ____        _        \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                +tab+ \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                +tab+ \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                +tab+ \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                +tab+\"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.print(logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        printDuke(\"Hello! I\u0027m Duke.Duke.DukeOperations\\n\\t What can I do for you?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Reads the command from the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return the string entered by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints the input string in the format specific to Duke.Duke.DukeOperations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param output contains the string to be printed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void printDuke(String output) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(\"\\t \"+output);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints the exit message and closes the scanner object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void byeDuke() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        printDuke(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 61
    }
  },
  {
    "path": "src/main/java/Duke/ErrorHandling/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.ErrorHandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to instantiate the contents of the parent class"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param message error message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 12
    }
  },
  {
    "path": "src/main/java/Duke/ErrorHandling/ErrorMessages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.ErrorHandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ErrorMessages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating that the command entered by the user is unrecognized"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String notRecognized() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param task the string containing the relevant task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating that the task description of the entered task cannot be empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String taskDescriptionEmpty(String task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! The description of a \"+task+\" task cannot be empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param task the string containing the relevant task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating that the date and time component of the specific task cannot be empty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String taskDateAndTimeEmpty(String task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! The date and time component of a \"+task+\" task cannot be empty.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param task the string containing the relevant task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating the invalidity of the entered task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String taskWrongFormat(String task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! The format of the \"+task+\" task is invalid.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating the invalidity of the index entered by the user for the specific task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String invalidIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! The list index of the task entered is invalid.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating the invalidity of the entered date and time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String invalidDateAndTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! The date and time entered is invalid.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints relevant error message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string indicating that the persistent file storage could not be opened"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String fileNotFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"☹ OOPS!!! There was an error in opening the contents of the file.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 69
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DateAndTime {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String Day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String Year;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to parse the date and time string entered by the user according to the type of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param taskType indicates whether the task is a \u0027deadline\u0027 or an \u0027event\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DateAndTime(String dateAndTime, int taskType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (taskType \u003d\u003d 0) { // deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (dateAndTimeChecker(dateAndTime, taskType)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String date \u003d dateAndTime.split(\" \")[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String time \u003d dateAndTime.split(\" \")[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Day \u003d setDay(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Month \u003d setMonth(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Year \u003d setYear(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Time \u003d setTime(time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else { // event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (dateAndTimeChecker(dateAndTime, taskType)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String date \u003d dateAndTime.split(\" \")[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String startTime \u003d dateAndTime.split(\" \")[1].split(\"-\",2)[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String endTime \u003d dateAndTime.split(\" \")[1].split(\"-\",2)[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Day \u003d setDay(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Month \u003d setMonth(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Year \u003d setYear(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.startTime \u003d setTime(startTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.endTime \u003d setTime(endTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to parse the date and time string read from the persistent file storage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param eventType indicates whether the task is a \u0027deadline\u0027 or an \u0027event\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dummy variable to differentiate this constructor from the other"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DateAndTime(String dateAndTime, int eventType, int dummy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.Day \u003d dateAndTime.split(\" \")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.Month \u003d dateAndTime.split(\" \")[2];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.Year \u003d dateAndTime.split(\" \")[3].substring(0, dateAndTime.split(\" \")[3].length() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (eventType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.Time \u003d dateAndTime.split(\" \")[4];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.startTime \u003d dateAndTime.split(\" \")[4].split(\"-\",2)[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                this.endTime \u003d dateAndTime.split(\" \")[4].split(\"-\",2)[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks the validity of the date and time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param eventType indicates whether the task is a \u0027deadline\u0027 or an \u0027event\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return boolean value indicating validity of the date and time"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public boolean dateAndTimeChecker(String dateAndTime, int eventType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (eventType \u003d\u003d 0) { // deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if ((dateAndTime.split(\" \")).length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String[] date \u003d (dateAndTime.split(\" \")[0]).split(\"/\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String time \u003d dateAndTime.split(\" \")[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (dateChecker(date) \u0026\u0026 timeChecker(time)) return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else { // event"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if ((dateAndTime.split(\" \")).length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String[] date \u003d (dateAndTime.split(\" \")[0]).split(\"/\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String startTime \u003d dateAndTime.split(\" \")[1].split(\"-\",2)[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String endTime \u003d dateAndTime.split(\" \")[1].split(\"-\",2)[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                if (dateChecker(date) \u0026\u0026 timeChecker(startTime,endTime)) return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Getter function for date and time in the Duke.Duke.DukeOperations format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * e.g. for deadline, \u00272nd of December 2019, 6pm\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * e.g. for event, \u00272nd of December 2019, 6pm-7pm\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param eventType indicates whether the task is a \u0027deadline\u0027 or an \u0027event\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return the string of the date in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getDateAndTime(int eventType) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (eventType \u003d\u003d 0) return this.Day+\" of \"+this.Month+\" \"+this.Year+\", \"+this.Time;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        else return this.Day+\" of \"+this.Month+\" \"+this.Year+\", \"+this.startTime+\"-\"+this.endTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks the validity of the date in the format \u0027DD/MM/YY\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param date string containing the date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return boolean value indicating validity of the date"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean dateChecker(String[] date) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return (date.length \u003d\u003d 3 \u0026\u0026 Integer.parseInt(date[0]) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(date[0]) \u003c\u003d 31"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \u0026\u0026 Integer.parseInt(date[1]) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(date[1]) \u003c\u003d 12"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \u0026\u0026 Integer.parseInt(date[2]) \u003e\u003d 1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \u0026\u0026 dayOfMonthChecker(Integer.parseInt(date[0]), Integer.parseInt(date[1])));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks the validity of the time in the 24 hr format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param time string containing the time"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return boolean value indicating validity of the time"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean timeChecker(String time) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return (time.length() \u003d\u003d 4 \u0026\u0026 Integer.parseInt(time.substring(0, 2)) \u003e\u003d 0"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \u0026\u0026 Integer.parseInt(time.substring(0, 2)) \u003c 24 \u0026\u0026 Integer.parseInt(time.substring(2, 4)) \u003e\u003d 0"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \u0026\u0026 Integer.parseInt(time.substring(2, 4)) \u003c\u003d 59);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks the validity of the start and end times in the 24 hr format"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param startTime string containing the start time"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param endTime string containing the end time"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return boolean value indicating the validity of the start and end times"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean timeChecker(String startTime, String endTime) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return (timeChecker(startTime) \u0026\u0026 timeChecker(endTime)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                \u0026\u0026 Integer.parseInt(endTime)\u003e\u003dInteger.parseInt(startTime));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Checks the validity of the day of the month"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param day integer containing the day"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param month integer containing the month"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return boolean value indicating validity of the day of the month"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean dayOfMonthChecker(int day, int month) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        switch(month) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 1: case 3: case 5: case 7: case 8: case 10: case 12:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return (day\u003e\u003d1 \u0026\u0026 day\u003c\u003d31);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return (day\u003e\u003d1 \u0026\u0026 day\u003c\u003d28);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                return (day\u003e\u003d1 \u0026\u0026 day\u003c\u003d30);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Setter function for the day"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param date string containing the date"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return the string containing the day in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String setDay(String date) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int count \u003d Integer.parseInt(date.split(\"/\")[0]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (count\u003e\u003d10\u0026\u0026count\u003c\u003d20) return count+\"th\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        switch(count%10) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 1: return count+\"st\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 2: return count+\"nd\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 3: return count+\"rd\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default: return count+\"th\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Setter function for the month"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param date string containing the date"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return the string containing the month in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String setMonth(String date) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int count \u003d Integer.parseInt(date.split(\"/\")[1]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        switch(count) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 1: return \"January\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 2: return \"February\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 3: return \"March\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 4: return \"April\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 5: return \"May\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 6: return \"June\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 7: return \"July\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 8: return \"August\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 9: return \"September\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 10: return \"October\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            case 11: return \"November\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            default: return \"December\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Setter function for the year"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param date string containing the date"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return the string containing the year in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String setYear(String date) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return date.split(\"/\")[2];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Setter function for the time"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param time string containing the time in the 24 hr format"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string containing the time in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String setTime(String time) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int hours \u003d Integer.parseInt(time.substring(0,2));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        int minutes \u003d Integer.parseInt(time.substring(2,4));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String AM_PM \u003d (hours\u003e\u003d12) ? \"pm\": \"am\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return ((hours \u003d\u003d 0) ? \"12\" : ((hours\u003e12) ? (hours-12) : hours))+"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                ((minutes \u003d\u003d 0) ? \"\" : (\":\"+time.substring(2,4)))+AM_PM;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 220
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected DateAndTime dateAndTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor which checks the format of validity of the deadline command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * and interprets the date and time entered by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Deadline(String description, String dateAndTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        DateAndTime tempDate \u003d new DateAndTime(dateAndTime,0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (tempDate.dateAndTimeChecker(dateAndTime,0)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.dateAndTime \u003d tempDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            super.format \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor called when reading the deadline task from persistent file storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Deadline(String description, boolean isDone, String dateAndTime) { // when reading from file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateAndTime \u003d new DateAndTime(dateAndTime,0,0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the string containing the task description and the date and time in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string in the specific format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getItem() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"[D]\"+super.getItem()+\" (by: \"+this.dateAndTime.getDateAndTime(0)+\")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 44
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    protected DateAndTime dateAndTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor which checks the format of validity of the event command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * and interprets the date and time entered by the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Event(String description, String dateAndTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        DateAndTime tempDate \u003d new DateAndTime(dateAndTime,1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        if (tempDate.dateAndTimeChecker(dateAndTime,1)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            this.dateAndTime \u003d tempDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            super.format \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor called when reading the event task from persistent file storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param dateAndTime string containing the date and time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Event(String description, boolean isDone, String dateAndTime) { // when reading from file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateAndTime \u003d new DateAndTime(dateAndTime, 1,0);;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the string containing the task description and the date and time in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string in the specific format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getItem() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"[E]\"+super.getItem()+\" (at: \"+this.dateAndTime.getDateAndTime(1)+\")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 44
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public boolean format;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor instantiate the description, isDone and format variables"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * called when reading user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.format \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor instantiate the description, isDone and format variables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * called when reading from persistent file storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.format \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return returns the valid symbol"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"[\" + (this.isDone ? \"\\u2713\" : \"\\u2718\") + \"] \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the task description in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return the string in the specific format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getItem() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 50
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private final String SPACE \u003d \"\\t    \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to instantiate the ui and tasks objects"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the isEmpty attribute of the object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return attribute of ArrayList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.tasks.isEmpty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the size attribute of the object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return attribute of ArrayList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Retrieves the object at the index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param i integer containing the index of the object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return object retrieved at the index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return this.tasks.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Removes the object at the index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param i integer containing the index of the object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks.remove(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds the object to the ArrayList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param i integer containing the index of the object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void add(Task i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks.add(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds the task read from the persistent file storage to the ArrayList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description the string containing the task description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone the boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void addToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task x \u003d new ToDo(description,isDone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks.add(x);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds the task read from the persistent file storage to the ArrayList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description the string containing the task description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone the boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void addDeadline(String description, boolean isDone, String date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task x \u003d new Deadline(description,isDone,date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks.add(x);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Adds the task read from the persistent file storage to the ArrayList"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description the string containing the task description"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone the boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void addEvent(String description, boolean isDone, String date) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Task x \u003d new Event(description,isDone,date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.tasks.add(x);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Appends all the tasks in the ArrayList to a string and returns it"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return appended string containing task list in Duke.Duke.DukeOperations Format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public StringBuilder writeListToFile() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            String task \u003d this.tasks.get(i).getItem().substring(1,2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            output.append(task+\" | \"+((this.tasks.get(i).isDone) ? \"1\":\"0\")+\" | \"+ this.tasks.get(i).description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            if (task.equals(\"D\") || task.equals(\"E\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                String[] temp \u003d this.tasks.get(i).getItem().split(\": \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                output.append(\" | \"+temp[1].substring(0,temp[1].length()-1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            output.append(\"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Prints the acknowledgement upon adding a task to the list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void acknowledgment() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String numberOfTasks \u003d (this.tasks.size()!\u003d1) ? \"tasks\":\"task\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.ui.printDuke(\"Got it. I\u0027ve added this task:\\n\" + SPACE + this.tasks.get(this.tasks.size()-1).getItem()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                + \"\\n\\t Now you have \" + this.tasks.size() + \" \" + numberOfTasks + \" in the list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 122
    }
  },
  {
    "path": "src/main/java/Duke/Tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Duke.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to instantiate variables of parent class called when"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * reading user input"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Constructor to instantiate variables of parent class called when"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * reading from persistent file storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param description string containing the task description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @param isDone boolean variable indicating whether the task has been marked as done or not"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * Returns the string containing the task description in the Duke.Duke.DukeOperations format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     * @return string in the specific format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public String getItem() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return \"[T]\"+super.getItem();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 34
    }
  },
  {
    "path": "src/main/java/Test/DukeOperations/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Test.DukeOperations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.DukeOperations.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.ErrorHandling.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    Parser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ParserTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void parseInput() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"done 1\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"todo return book\") instanceof ToDoCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"deadline return book /by 12/12/2012 1800\") instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"event return book /at 12/12/2012 1800-1900\") instanceof EventCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            assertTrue(this.parser.parseInput(\"find book\") instanceof FindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        } catch(DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "            System.out.println(\"Testing failed\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 32
    }
  },
  {
    "path": "src/main/java/Test/Tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Test.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.runner.RunWith;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.runners.Parameterized;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "@RunWith(Parameterized.class)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String dateAndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String expected;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public DeadlineTest(String description, boolean isDone, String dateAndTime, String expected) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Parameterized.Parameters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public static Collection\u003cObject[]\u003e testConditions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return Arrays.asList(new Object[][] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"return book\",false, \"31st of May 2020, 5:56pm\",\"[D][✘] return book (by: 31st of May 2020, 5:56pm)\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"return book\",true,\"31st of May 2020, 5:56pm\",\"[D][✓] return book (by: 31st of May 2020, 5:56pm)\"}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Deadline userDeadline \u003d new Deadline(\"return book\", \"31/05/2020 1756\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"[D][✘] return book (by: 31st of May 2020, 5:56pm)\",userDeadline.getItem());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Deadline storageDeadline \u003d new Deadline(description,isDone,dateAndTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expected,storageDeadline.getItem());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 43
    }
  },
  {
    "path": "src/main/java/Test/Tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Test.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.runner.RunWith;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.runners.Parameterized;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "@RunWith(Parameterized.class)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String dateAndTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String expected;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public EventTest(String description, boolean isDone, String dateAndTime, String expected) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Parameterized.Parameters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public static Collection\u003cObject[]\u003e testConditions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return Arrays.asList(new Object[][] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"return book\",false, \"31st of May 2020, 5:56pm-11:59pm\",\"[E][✘] return book (at: 31st of May 2020, 5:56pm-11:59pm)\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"return book\",true,\"31st of May 2020, 5:56pm-11:59pm\",\"[E][✓] return book (at: 31st of May 2020, 5:56pm-11:59pm)\"}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void getItem() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Event userEvent \u003d new Event(\"return book\", \"31/05/2020 1756-2359\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"[E][✘] return book (at: 31st of May 2020, 5:56pm-11:59pm)\",userEvent.getItem());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        Event storageEvent \u003d new Event(description,isDone,dateAndTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expected,storageEvent.getItem());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 43
    }
  },
  {
    "path": "src/main/java/Test/Tasks/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Test.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void writeListToFile() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addToDo(\"return book\",true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addDeadline(\"return book\", true, \"31st of May 2020, 5:56pm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        taskList.addEvent(\"return book\",true,\"31st of May 2020, 5:56pm-11:59pm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String expectedOutput \u003d \"T | 1 | return book\\nD | 1 | return book | 31st of May 2020, 5:56pm\\nE | 1 | return book | 31st of May 2020, 5:56pm-11:59pm\\n\".trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        String actualOutput \u003d taskList.writeListToFile().toString().trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 20
    }
  },
  {
    "path": "src/main/java/Test/Tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "package Test.Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import Duke.Tasks.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.runner.RunWith;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import org.junit.runners.Parameterized;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "@RunWith(Parameterized.class)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    private String expected;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public ToDoTest(String description, boolean isDone, String expected) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Parameterized.Parameters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public static Collection\u003cObject[]\u003e testConditions() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        return Arrays.asList(new Object[][] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"return book\",false, \"[T][✘] return book\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "                {\"return book\",true,\"[T][✓] return book\"}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    public void getItem() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ToDo userToDo \u003d new ToDo(\"return book\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(\"[T][✘] return book\",userToDo.getItem());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        ToDo storageToDo \u003d new ToDo(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "        assertEquals(expected, storageToDo.getItem());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iamabhishek98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iamabhishek98": 41
    }
  }
]
