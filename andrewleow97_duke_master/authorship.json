[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 15,
      "-": 19
    }
  },
  {
    "path": "src/main/java/BlankCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * BlankCommand template that extends Command, used for default error handling as Command is an abstract class and cannot be instantiated"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class BlankCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Instantiating the BlankCommand class without any parameters"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public BlankCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 11
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Abstract class Command that the Parser class calls, and other specific Commands inherit from"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Returns isExit() value (default is false) to check if input loop should end or not"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return boolean isExit value"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 21
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Deadline class that includes:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * String description: description of deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * String by: input of do by date/time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Date date: formatted Date of \u0027String by\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Creates deadline Task from user input description and do-by date/time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param by Do-by date/time that the user inputs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws ParseException If the user input is not formatted in the correct dd/mm/yyyy hhmm format, throw ParseException, and re-request user for proper input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Deadline(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        date \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats deadline task details for storage purposes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String writeToFile(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"D | \" + getDoneInt() + \" | \" + this.description + \" | \" + this.by + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats deadline task details for UI printing purposes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"[D]\" + super.getStatusIcon() + this.description + \" (by: \" + this.date  + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 45
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Deadline Command that handles when user wants to add a deadline task to the tasklist, extends the abstract Command class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Instantiates DeadlineCommand from the Parser class, taking the users input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input Entire string input by the user of the format (deadline \u0027description\u0027 /by \u0027by\u0027)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException Handles bad formatting of the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws ParseException Handles bad date format of user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public DeadlineCommand(String input) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (!input.substring(8).contains(\"/by\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please input the correct format: deadline (description) /by (time)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String[] deadlineArray \u003d input.split(\"/by \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if ((input.substring(8).length() \u003c\u003d 1) || (deadlineArray[0].substring(8).isBlank())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (deadlineArray[1].length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.description \u003d deadlineArray[0].substring(9);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.by \u003d deadlineArray[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Adds the deadline task to the tasklist, prints confirmation through the ui as well as number of tasks in the list, and stores the newly added deadline task to the storage file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Throws ParseException and ArrayIndexOutOfBoundsException if input is formatted incorrectly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist of tasks that the new deadline task is added to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui Ui that handles printing of messages"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage Storage to store the tasklist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Deadline tempDeadline \u003d new Deadline(this.description, this.by);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks.taskList.add(tempDeadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"Got it, I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(tempDeadline.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"You now have \" + tasks.taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"☹ OOPS!!! Please enter a correct date format (dd/mm/yyyy HHmm)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"☹ OOPS!!! The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 57
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * DoneCommand that handles \u0027done\u0027 cases from user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Inherits Command class"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private int x;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Checks if input is valid, and converts it to an int to be stored in the class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Throws exceptions is user does not input a valid number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input User input of a number to be converted into an integer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public DoneCommand (String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (command[1].isEmpty() || command[1].isBlank() || input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please enter a valid number\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                this.x \u003d Integer.parseInt(command[1]) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Sets the isDone of a task to true/1, based on the index of the task in the task list, and the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * After which it saves the tasklist to the save file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist of tasks, sets the i-th task as done based on user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui for printing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage for saving the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException if task index is not in the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (this.x \u003c 0 || this.x \u003e\u003d tasks.taskList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! That task index is not in your list\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                tasks.taskList.get(x).markasDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                ui.showMessage(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                ui.showMessage(tasks.taskList.get(x).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showError(\"☹ OOPS!!! Please enter a valid number\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 49
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Main class Duke which"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    final static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(100); // initialize taskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static final String filePath \u003d \"src/main/java/data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Initiates duke with the defined filepath for saving, and tries to load tasks from the save file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param filePath string to the save file\u0027s path"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (FileNotFoundException | DukeException | ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Run command that runs the duke function in the main, intializes tasklist, ui and storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * while exit is false (i.e ExitCommand has not been issued) next line will be taken in as tokenized input, and sent to parser for execution of commands"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                Command c \u003d Parser.parse(ui, fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /*private static void printIndent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.print(\"    \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    } // print the indentation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private static void printILine() { // print the indented line"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void addToList(Task input) { // add Task class to the taskList ArrayList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        taskList.add(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void removeTask(int i) { // removing task from taskList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (i-1 \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! That task is not in your list\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            taskList.remove(i - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"Got it, I\u0027ve removed that task for you!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void printTask(int i) { // print a single task at index i, including completion status"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(taskList.get(i).toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void printList() { // print the list of tasks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.print(i+1 + \". \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(taskList.get(i).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void printDone(String index) { // marks task as done, and prints the task symbol"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            int i \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (i \u003e\u003d taskList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! That task is not in your list\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            taskList.get(i).markasDone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printTask(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void handleTodo(String input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ToDo tempToDo \u003d new ToDo(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        addToList(tempToDo);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        printTask(taskList.indexOf(tempToDo));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"You now have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    } // handle to do case, and print that its added"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void handleDeadline (String description, String time) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Deadline tempDeadline \u003d new Deadline(description.substring(9), time);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            addToList(tempDeadline);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(taskList.get(taskList.indexOf(tempDeadline)).toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"You now have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            //printILine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"☹ OOPS!!! Please enter a correct date format (dd/mm/yyyy HHmm)\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            //printILine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void handleEvent(String description, String time) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Event tempEvent \u003d new Event(description.substring(6), time);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            addToList(tempEvent);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(taskList.get(taskList.indexOf(tempEvent)).toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"You now have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"☹ OOPS!!! Please enter a correct date format (dd/mm/yyyy HHmm)\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void readFile() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            File file \u003d new File(\"src/main/java/data/duke.txt\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Scanner fileScan \u003d new Scanner(file);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            while (fileScan.hasNext()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                String temp \u003d fileScan.nextLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                String[] tempArray \u003d temp.split(\" \\\\| \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                Task t \u003d new Task(\"\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                switch (tempArray[0]) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        t \u003d new ToDo(tempArray[2]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        t \u003d new Deadline(tempArray[2], tempArray[3]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        t \u003d new Event(tempArray[2], tempArray[3]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! Invalid task found\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                if (tempArray[1] \u003d\u003d \"1\") {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    t.markasDone();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                addToList(t);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                //out.println(t.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printILine();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"☹ OOPS!!! There is no save file found, creating one for you @ src/main/java/data/duke.txt\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            //createFile();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printILine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printILine();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(e);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printILine();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printILine();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"☹ OOPS!!! Incorrect date format found\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printILine();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void writeFile() { // https://www.javatpoint.com/java-filewriter-class"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/data/duke.txt\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String temp \u003d \"\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            for (Task x: taskList) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                temp +\u003d x.writeToFile();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            fileWriter.write(temp);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"☹ OOPS!!! An error occurred in writing to your save file\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void findTask(String input) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ArrayList\u003cTask\u003e findArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (taskList.get(i).toString().contains(input)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                findArray.add(taskList.get(i));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "          //  } else if (taskList.get(i).) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (findArray.isEmpty()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println(\"☹ OOPS!!! No tasks in your task list match your search.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (int i \u003d 0; i \u003c findArray.size(); i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            out.println((i+1) + \". \" + findArray.get(i).toString());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"Hello from\\n\" + logo + \"\\nHow can I help you?\\n\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in); // initialize scanner to read input"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        boolean run \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        readFile();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        while (run) { // looping input reading"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] command \u003d input.split(\" \"); // split up input by spaces"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            switch (command[0]) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"bye\": // handles case bye, which sets run to false to exit loop"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printIndent();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    writeFile(); // write to file to save list on exit"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    run \u003d false; // set run to false in order to break the loop"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"list\": // print the list of tasks"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"done\": // done"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printDone(command[1]);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    writeFile();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"todo\": // to do"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if (input.substring(4).length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        handleTodo(input.substring(5));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        writeFile();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    catch (DukeException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printIndent();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        out.println(e.getMessage());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"deadline\": //deadline"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    try{"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if (!input.substring(8).contains(\"/by\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! Please input the correct format: deadline (description) /by (time)\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        String[] deadlineArray \u003d input.split(\"/by\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if ((input.substring(8).length() \u003c\u003d 1) || (deadlineArray[0].substring(8).isBlank())) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if (deadlineArray[1].length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        handleDeadline(deadlineArray[0], deadlineArray[1]);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        writeFile();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    catch (DukeException e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printIndent();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        out.println(e.getMessage());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if (!input.substring(5).contains(\"/at\")) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! Please input the correct format: event (description) /at (time)\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        String[] eventArray \u003d input.split(\"/at \");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if ((input.substring(5).length() \u003c\u003d 1) || eventArray[0].substring(5).isBlank()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException( \"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        if (eventArray[1].length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                            throw new DukeException( \"☹ OOPS!!! The time of a event cannot be empty.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        handleEvent(eventArray[0], eventArray[1]);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        writeFile();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    catch (DukeException e) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printIndent();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        out.println(e.getMessage());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"save\":"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    writeFile();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printIndent();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    out.println(\"Got it, I\u0027ve saved your list of tasks.\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"remove\":"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printIndent();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        removeTask((Integer.parseInt(command[1])));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        writeFile();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }  catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printIndent();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        out.println(\"☹ OOPS!!! That task index is not in your task list\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        findTask(input.substring(5));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printIndent();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        out.println(\"☹ OOPS!!! Please enter an input\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        printILine();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                default: // default add any non list/bye words as tasks"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printIndent();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    out.println(DukeException.toString(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    printILine();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 382,
      "-": 7
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Customized Exception class for Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static String toString(String error) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * * Event class that includes:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " *  * String description: description of Event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " *  * String time: input of event date/time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " *  * Date date: formatted Date of \u0027String time\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * * Creates Event Task from user input description and do-by date/time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param time Date/time that the user inputs"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws ParseException If the user input is not formatted in the correct dd/mm/yyyy hhmm format, throw ParseException, and re-request user for proper input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Event (String description, String time) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        date \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats event task details for storage purposes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String writeToFile(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"E | \" + getDoneInt() + \" | \" + this.description + \" | \" + this.time + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats event task details for UI printing purposes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return (\"[E]\" + super.getStatusIcon() + this.description + \" (at: \" + this.date + \")\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 48
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Event Command that handles when user wants to add a Event task to the tasklist, extends the abstract Command class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Instantiates EventCommand from the Parser class, taking the users input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input Entire string input by the user of the format (Event \u0027description\u0027 /at \u0027time\u0027)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException Handles bad formatting of the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws ParseException Handles bad date format of user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public EventCommand(String input) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (!input.substring(5).contains(\"/at\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please input the correct format: event (description) /at (time)\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] eventArray \u003d input.split(\"/at\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if ((input.substring(5).length() \u003c\u003d 1) || (eventArray[0].substring(5).isBlank())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (eventArray[1].length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The time of a event cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            this.description \u003d eventArray[0].substring(5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            this.by \u003d eventArray[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time of a event cannot be empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Adds the Event task to the tasklist, prints confirmation through the ui as well as number of tasks in the list, and stores the newly added Event task to the storage file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Throws ParseException and ArrayIndexOutOfBoundsException if input is formatted incorrectly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist of tasks that the new Event task is added to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui Ui that handles printing of messages"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage Storage to store the tasklist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (this.description.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (this.by.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time of a event cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Event tempEvent \u003d new Event(this.description, this.by);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            tasks.taskList.add(tempEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"Got it, I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(tempEvent.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"You now have \" + tasks.taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showError(\"☹ OOPS!!! Please enter a correct date format (dd/mm/yyyy HHmm)\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 61
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * ExitCommand that inherits the Command class, called by Parser when the user input is \u0027bye\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Sets isExit boolean to true, which exits the loop in Duke\u0027s run() function"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Also prints the exit message, and saves the tasklist to the save file at filePath"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui for printing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage for saving the save file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute (TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 18
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * FindCommand that inherits command, that searches the tasklist for tasks with similar words as the user input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private String findString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor that checks for the input length, and if it is valid save the input as the string to be found"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input The input that the user types into the command line"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException Thrown if the user does not add any input after \u0027find \u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public FindCommand (String input) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (input.substring(5).length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter an input\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        findString \u003d input.substring(5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Searches the taskList for the user\u0027s input, and stores it in a separate array to be printed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist of tasks to be searched for the user\u0027s input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui to handle printing of messages and errors"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage to handle storing the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ArrayList\u003cTask\u003e findArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.taskList.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (tasks.taskList.get(i).toString().contains(findString)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                findArray.add(tasks.taskList.get(i)); // add to findArray any tasks that contain the user\u0027s input in its toString() string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (findArray.isEmpty()) { // if list is empty, show error to user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showError(\"☹ OOPS!!! No tasks in your task list match your search.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d findArray.size(); i++) { // otherwise, print the list of tasks found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage((i+1) + \". \" + findArray.get(i).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 42
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * ListCommand that inherits the Command class, used by the Parser class when the user inputs \u0027list\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Prints the list of tasks (taskList in TaskList class) in order for the user to see"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Shows the task type, whether task is done, the description of the task and its do-by date if applicable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist of tasks to be listed and printed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui to handle printing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage to handle storing the task list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (tasks.taskList.isEmpty()) { // throw error if task list is empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Your list of tasks is empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showMessage(\"Here are the tasks in you list: \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.taskList.size(); i++) { // prints all tasks in tasklist formatted by order of index and its toString()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                ui.showMessage(i + 1 + \". \" + tasks.taskList.get(i).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 28
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Parser class that returns the Command to be used according to the first word of the user\u0027s input"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * parse method that returns a specific command according tothe first word of the user\u0027s input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui to handle printing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input input of the user in the command line"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns a Command according to the user\u0027s input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException thrown by default if the user\u0027s input does not match one of the cases"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws ParseException thrown if the user\u0027s input is not of a valid format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public static Command parse(Ui ui, String input) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            switch (command[0]) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new DoneCommand(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new ToDoCommand(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new DeadlineCommand(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new EventCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"save\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new SaveCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"remove\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new RemoveCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    return new FindCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | ParseException | NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ui.showError(\"☹ OOPS!!! Please enter a valid input\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return new BlankCommand(); // default case for error handling"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 46
    }
  },
  {
    "path": "src/main/java/RemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * RemoveCommand that inherits the Command class, that removes one task from the tasklist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private int x;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor that takes in the user\u0027s input from the command line, and checks for input validity"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * If input is valid, convert the user\u0027s input into an integer to store"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input The user\u0027s input in the command line"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException Thrown when the user\u0027s input is not a number, or does not input anything after \u0027remove \u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public RemoveCommand(String input) throws DukeException{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            if (command[1].isEmpty() || command[1].isBlank() || input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please enter a valid number\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                this.x \u003d Integer.parseInt(command[1]) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Takes the integer stored from the user\u0027s input, and checks if its index is within the range of the taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * If so, remove the indexed task from the list, prints the information back to the user, and saves the new task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks tasklist of task from which to remove the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui to handle printing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage to handle storing the save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException thrown when the input integer is out of bounds of the taskList ArrayList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (x \u003c 0 || x \u003e tasks.taskList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! That task index is not in your task list\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(tasks.taskList.get(x).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        tasks.taskList.remove(x);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(\"You now have \" + tasks.taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 44
    }
  },
  {
    "path": "src/main/java/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * SaveCommand class that inherits the Command class called by the parser class when user inputs \u0027save\u0027 and wants to save the current list to their save file"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the SaveCommand class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public SaveCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Calls the storage.saveFile method, and prints out a message that the list of tasks is saved"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks taskList of tasks to be saved"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui to handle printing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage to handle storing the save file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(\"Got it, I\u0027ve saved your list of tasks.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 22
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Storage class to handle reading and writing to the save file at a predefined filePath"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the Storage class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param filePath filePath of the save file to be read/written to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Scans the save file line by line, and stores its content in an ArrayList of tasks according to the data read"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns an ArrayList of tasks to be used by Duke"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws FileNotFoundException Handles if there is no file found at the filePath"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws ParseException thrown if there are errors in the save file\u0027s content"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            Scanner fileScan \u003d new Scanner(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            ArrayList\u003cTask\u003e fileList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            while (fileScan.hasNextLine()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                String temp \u003d fileScan.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                String[] tempArray \u003d temp.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                Task t \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                switch (tempArray[0]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        t \u003d new ToDo(tempArray[2]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        t \u003d new Deadline(tempArray[2], tempArray[3]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        t \u003d new Event(tempArray[2], tempArray[3]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                if (tempArray[1].contains(\"1\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                    t.markasDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                fileList.add(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            return fileList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to save the task list in Duke to the specified filePath"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param taskList Takes in the taskList of tasks, and saves to the save file task by task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(\"src/main/java/data/duke.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            String save \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            for (Task t: taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                save +\u003d t.writeToFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            fileWriter.write(save);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } catch (IOException e) { // required for fileWriter to not throw errors"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 72
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Task class to be inherited, contains the task description, and its completion status"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the Task class that takes in the task\u0027s description, and sets the tasks done status to false by default"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param description Description of the task according to the user\u0027s input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to mark the task as done by setting the boolean isDone to true (default is false)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void markasDone() { // set task as done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to return the task\u0027s status as either a tick or cross, according to its isDone variable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns either a tick or cross for printing purposes"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String getStatusIcon() { // tried copying from website unicode symbols not working"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return (isDone ? \"[✓]\" : \"[✗]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to return the task\u0027s status as an integer value (1 is done, 0 is not done)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the integer value of the boolean variable isDone"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public int getDoneInt() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return (isDone ? 1 : 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats the Task details for storage purposes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String writeToFile(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"T | \" + getDoneInt() + \" | \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats the Task details for printing purposes"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return (this.getStatusIcon() + this.description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 56
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * TaskList class to contain the tasklist that Duke uses to store tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(100);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the TaskList class that creates a new ArrayList of Tasks at initial capacity of 100"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e(100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the TaskList class that copies an existing ArrayList of Tasks to its own taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param List An existing ArrayList of Tasks read from storage to be copied into TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e List) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        taskList.addAll(List);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 23
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * To Do class that inherits the Task class to create a To Do task according to the user\u0027s input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the To Do class that takes in the user\u0027s description of the Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param description The task description according to the user\u0027s input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats to do task details for storage purposes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String writeToFile(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"T | \" + getDoneInt() + \" | \" + this.description + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Formats to do task details for printing purposes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return Returns the formatted string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return \"[T]\" + this.getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 31
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * ToDoCommand class that inherits the Command class called by the Parser class to handle when the user wants to add a new To Do task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the ToDoCommand class that takes in the user\u0027s input, and check for a valid description"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param input The user\u0027s input in the command line"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException Thrown when there is no description specified by the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public ToDoCommand(String input) throws DukeException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (input.substring(4).length() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            this.description \u003d input.substring(5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Adds a new To Do task according to the user\u0027s input to the tasklist, and prints information to the user. Finally, it will save the taskList to the save file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param tasks taskList of tasks to be added to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param ui ui to handle printing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param storage storage to handle storing the list of tasks to the save file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @throws DukeException Thrown when the user does not input a description after \u0027todo \u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        if (this.description.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ToDo tempToDo \u003d new ToDo(this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        tasks.taskList.add(tempToDo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(\"Got it, I\u0027ve added this task: \" );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(tempToDo.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ui.showMessage(\"You now have \" + tasks.taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        storage.saveFile(tasks.taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 39
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static java.lang.System.out;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " * Ui class that handles printing to the user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Constructor for the Ui class, that starts a new scanner to read in user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to print a line for formatting"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to print an indent for formatting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showIndent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.print(\"    \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to print the welcome message when Duke is first run"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"Hello from\\n\" + logo + \"\\nHow can I help you?\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to print a formatted message to the user"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param e String to be displayed to the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showMessage(String e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showIndent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to print the goodbye message to the user when the ExitCommand is called"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showIndent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to print a formatted error message to the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @param e String to be displayed to the user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showIndent();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        out.println(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to show a message when the save file cannot be loaded for some reason"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showMessage(\"Error loading from list of tasks at: src/main/java/data/duke.txt\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * Method to read the next line of the users input, called in Duke\u0027s run function"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 87
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 2
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class DukeTest extends ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void ToDoTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 12
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    public void ToDoTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Do this\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✗]Do this\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        int x \u003d todo.getDoneInt();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(x, 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(todo.getStatusIcon(),\"✗\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        todo.markasDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(todo.getStatusIcon(), \"✓\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        x \u003d todo.getDoneInt();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(x, 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✓]Do this\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andrewleow97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andrewleow97": 19
    }
  }
]
