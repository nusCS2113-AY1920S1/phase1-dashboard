[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * Deadline class inherits from TaskforDuke to represent a more specific task with a specific time to meet it"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class Deadline extends TaskforDuke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "    protected Integer[] by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * creates an instance of Deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public Deadline(String description, Integer[] by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * toString builds a string in the format [D] \u003cdescription\u003e (by: \u003cdate\u003e\u003ctime\u003e)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return string with detailed information about the Deadline instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDate() + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * getDate builds a string of the date in the format DD/MM/YY TTTT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return result"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String getDate(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String result \u003d by[0] + \"/\" + by[1] + \"/\" + by[2] + \" \" + by[3];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * extracts the date from the raw command given by the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws invalidDeadlineException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static Integer[] getByDate(String s) throws invalidDeadlineException{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(s.equals(\"deadline\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new invalidDeadlineException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String sExtracted \u003d s.replaceAll(\"deadline \", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] details \u003d sExtracted.split(\"/by \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] dateString \u003d details[1].split(\"/\", 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] timeString \u003d dateString[2].split(\" \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer[] date \u003d new Integer[4];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[0] \u003d Integer.parseInt(dateString[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[1] \u003d Integer.parseInt(dateString[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[2] \u003d Integer.parseInt(timeString[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[3] \u003d Integer.parseInt(timeString[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * getDetails returns description of the deadline command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return details[0]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws invalidDeadlineException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static String getDetails(String s) throws invalidDeadlineException{"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(s.equals(\"deadline\")){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new invalidDeadlineException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String sExtracted \u003d s.replaceAll(\"deadline \", \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] details \u003d sExtracted.split(\"/by \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return details[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 76
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Formatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "@SuppressWarnings(\"InfiniteLoopStatement\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": " * this class represents the main function"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": " * of Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private static Parser prsr \u003d new Parser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "            fileReader.populateTaskList(\"C:\\\\Users\\\\Lee Raiyan\\\\Documents\\\\1. NUS\\\\Semester 3\\\\CS2113T Software Engineering\\\\duke\\\\data\\\\dukedata.txt\",taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "        catch (IOException e){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"File Not Found!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String s \u003d \"null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "        while(true){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "            Scanner myObj \u003d new Scanner(System.in);  // Create a Scanner object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "            s \u003d myObj.nextLine();  // Read user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "                prsr.parseInput(s, taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "            catch (unknownCommandException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "                ui.unknownCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 34,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * Event class inherits from TaskforDuke to represent a more specific task with a specific time to attend it"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class Event extends TaskforDuke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "    protected Integer[] at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * creates an instance of Event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public Event(String description, Integer[] at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * toString builds a string in the format [D] \u003cdescription\u003e (by: \u003cdate\u003e\u003ctime\u003e)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return string with detailed information about the Deadline instance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDate() + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * getDate builds a string of the date in the format DD/MM/YY TTTT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return result"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String getDate(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String result \u003d at[0] + \"/\" + at[1] + \"/\" + at[2] + \" \" + at[3];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * extracts the date from the raw command given by the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws invalidEventException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static Integer[] getAtDate(String s) throws invalidEventException{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(s.equals(\"event\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new invalidEventException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String sExtracted \u003d s.replaceAll(\"event \", \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] details \u003d sExtracted.split(\"/at \", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] dateString \u003d details[1].split(\"/\", 3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] timeString \u003d dateString[2].split(\" \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer[] date \u003d new Integer[4];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[0] \u003d Integer.parseInt(dateString[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[1] \u003d Integer.parseInt(dateString[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[2] \u003d Integer.parseInt(timeString[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": "        date[3] \u003d Integer.parseInt(timeString[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * getDetails returns description of the deadline command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return details[0]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws invalidEventException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static String getDetails(String s) throws invalidEventException{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(s.equals(\"deadline\")){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new invalidEventException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String sExtracted \u003d s.replaceAll(\"event \", \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] details \u003d sExtracted.split(\"/at \", 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return details[0];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 77
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * Parser class represents the all the possible commands that can be taken in by Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * parseInput takes in the user\u0027s commands and executes specific methods based on each command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws unknownCommandException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void parseInput(String s, TaskList taskList) throws unknownCommandException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (s.equals(\"bye\")){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "            //save all data into text file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "            createFile g \u003d new createFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "            g.openFile();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "            g.addRecords(taskList.getTaskList().size(),taskList.getTaskList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "            g.closeFile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "            //print goodbye message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "            ui.goodbyeMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if (s.equals(\"list\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.list();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if (s.contains(\"done\")){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.done(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if(s.contains(\"delete\")){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.delete(s);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if ((s.contains(\"todo\"))){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String details \u003d Todo.getDetails(s);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "                taskList.addTodo(details);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "            catch(invalidTodoException e){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "                ui.dialogueEmpty(s);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if (s.contains(\"deadline\")){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "                Integer[] date \u003d Deadline.getByDate(s);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String details \u003d Deadline.getDetails(s);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "                taskList.addDeadline(details, date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "            catch(invalidDeadlineException e){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "                ui.dialogueEmpty(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if(s.contains(\"event\")){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "                Integer[] date \u003d Event.getAtDate(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String details \u003d Event.getDetails(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "                taskList.addEvent(details,date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woblek"
        },
        "content": "            catch(invalidEventException e){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "                ui.dialogueEmpty(s);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if(s.contains(\"find\")){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.find(s);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new unknownCommandException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 80
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": " * Storage class populates the duke tasklist with the .txt file specified in the path"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public Integer counterTaskList \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * load() reads each line of the .txt file using buffer reader"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * by reading the first character of each line, load() populates the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * Duke tasklist with instances of either Todo,Event, or Deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * for each line"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return tasklist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public ArrayList\u003cTaskforDuke\u003e load() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "        ArrayList\u003cTaskforDuke\u003e taskList \u003d new ArrayList\u003cTaskforDuke\u003e(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "        File file \u003d new File(\"C:\\\\Users\\\\Lee Raiyan\\\\Documents\\\\1. NUS\\\\Semester 3\\\\CS2113T Software Engineering\\\\duke\\\\data\\\\dukedata.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String st;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "        while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "            Character first \u003d st.charAt(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if (first.equals(\u0027T\u0027)){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //splitting string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] details \u003d st.split(\",\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //create todo and add task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "                taskList.add(new Todo(details[2]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "                if(details[1].equals(\"true\")){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "                    taskList.get(counterTaskList).setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "                counterTaskList++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "            else if (first.equals(\u0027D\u0027)){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //split string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] details \u003d st.split(\",\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] dateString \u003d details[3].split(\"/\", 3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] timeString \u003d dateString[2].split(\" \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "                Integer[] date \u003d new Integer[4];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[0] \u003d Integer.parseInt(dateString[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[1] \u003d Integer.parseInt(dateString[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[2] \u003d Integer.parseInt(timeString[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[3] \u003d Integer.parseInt(timeString[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //create and add deadline to tasklist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "                taskList.add(new Deadline(details[2], date));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "                if(details[1].equals(\"true\")){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": "                    taskList.get(counterTaskList).setDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //update counterTasklist"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "                counterTaskList++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "            else if (first.equals(\u0027E\u0027)){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //split string"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] details \u003d st.split(\",\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] dateString \u003d details[3].split(\"/\", 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "                String[] timeString \u003d dateString[2].split(\" \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": "                Integer[] date \u003d new Integer[4];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[0] \u003d Integer.parseInt(dateString[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[1] \u003d Integer.parseInt(dateString[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[2] \u003d Integer.parseInt(timeString[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woblek"
        },
        "content": "                date[3] \u003d Integer.parseInt(timeString[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //create and add deadline to tasklist"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woblek"
        },
        "content": "                taskList.add(new Event(details[2], date));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woblek"
        },
        "content": "                if(details[1].equals(\"true\")){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woblek"
        },
        "content": "                    taskList.get(counterTaskList).setDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woblek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woblek"
        },
        "content": "                //update counterTasklist"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woblek"
        },
        "content": "                counterTaskList++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woblek"
        },
        "content": "        br.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 92
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " * this class represents and arraylist of TaskforDuke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": " * and encompasses all methods related to the tasklist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "    ArrayList\u003cTaskforDuke\u003e taskList \u003d new ArrayList\u003cTaskforDuke\u003e(0);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method sets the tasklist"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void setTaskList(ArrayList\u003cTaskforDuke\u003e a) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.taskList \u003d a;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "        ui.welcomeMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method returns the tasklist"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return Arraylist\u003cTaskforDuke\u003e tasklist"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public ArrayList\u003cTaskforDuke\u003e getTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method adds an instance of Deadline to the tasklist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void addDeadline(String details,Integer[] date){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "        taskList.add(new Deadline(details,date));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Got it. I\u0027ve added this task: \" + details + \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"      \" + taskList.get(taskList.size()-1).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    You now have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method adds an instance of Event to the tasklist"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param details"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void addEvent(String details, Integer[] date){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "        taskList.add(new Event(details,date));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Got it. I\u0027ve added this task: \" + details + \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"      \" + taskList.get(taskList.size()-1).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    You now have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method adds an instance of Todo to the tasklist"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param details"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void addTodo(String details){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "        taskList.add(new Todo(details));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Got it. I\u0027ve added this task: \" + details + \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"      \" + taskList.get(taskList.size() - 1).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    You now have \" + taskList.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method finds an occurence of the substring s"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * and prints out the matching tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void find(String s){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String[] toFind \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for(int i \u003d 0; i \u003c taskList.size(); i++){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if(taskList.get(i).description.contains(toFind[1])){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woblek"
        },
        "content": "                System.out.println(\"    \" + (i + 1) + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method prints out the entire list of tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * populated by tasklist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void list(){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(taskList.size()\u003e0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woblek"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woblek"
        },
        "content": "                System.out.println(\"    \" + (i + 1) + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    Your list is empty!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method marks tasks as done and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * prints out which task has been marked as done"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void done(String s){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woblek"
        },
        "content": "        int indexDone \u003d Integer.parseInt(s.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(indexDone \u003e 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.get(indexDone - 1).setDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"      \" + taskList.get(indexDone - 1).toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this task removes an instance of task from the tasklist"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * depending on the index provided by user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void delete(String s){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "woblek"
        },
        "content": "            int indexDelete \u003d Integer.parseInt(s.replaceAll(\"[\\\\D]\", \"\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "woblek"
        },
        "content": "            String sDelete \u003d taskList.get(indexDelete - 1).toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.remove(indexDelete - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "woblek"
        },
        "content": "            //inform user of deletion"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    Noted! I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"      \" + sDelete);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    You now have \" + taskList.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 148
    }
  },
  {
    "path": "src/main/java/TaskforDuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * this class represents the superclass that excompasses all types of Tasks that"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " * Duke understands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class TaskforDuke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * TaskforDuke() creates an instance of a task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public TaskforDuke(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * getStatusIcon() returns a ASCII character tick or cross based on"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * whther the task is completed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return tick or cross"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return a string telling the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * that Todos have no dates"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String getDate(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return \"There is no date for Todo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * sets the boolean for the isDone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * of the task to be done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void setDone(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "//    public void setType(String s){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        type \u003d s;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription() ;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 60
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * this class inherits from the TaskforDuke class and represents a speicifc type of"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " * task that has no time attached to it"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class Todo extends TaskforDuke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method returns the description of the todo instance"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method builds a string of the details of the todo instance"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this methodd deletes all occurences of \"todo\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return string without substring \"todo\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws invalidTodoException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static String getDetails(String s) throws invalidTodoException{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(s.equals(\"todo\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new invalidTodoException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return s.replaceAll(\"todo \", \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 39
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * this class represents all the UI messaged output by duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * introduction message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void welcomeMessage(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String logo \u003d \"     ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "                + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "                + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "                + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "                + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    What can I do for you?\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method is the goodbye message at the end of Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void goodbyeMessage(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method prints an error for unkownCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void unknownCommand(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * this method prints an error for emptyString after the command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void dialogueEmpty(String s){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Character first \u003d s.charAt(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(first.equals(\u0027t\u0027)){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    ☹ OOPS!!! The description of a todo cannot be empty!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if(first.equals(\u0027d\u0027)){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    ☹ OOPS!!! The description of a deadline cannot be empty!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if(first.equals(\u0027e\u0027)){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    ☹ OOPS!!! The description of an event cannot be empty!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"    __________________________________________________________________________________________\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 66
    }
  },
  {
    "path": "src/main/java/createFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": " * This class encompasses all methods required to populate the .txt file with data from the Duke tasklist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class createFile {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private Formatter x;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * Reads the .txt file specified in the path provided"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * throws Exception if fails"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void openFile(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "            x \u003d new Formatter(\"C:\\\\Users\\\\Lee Raiyan\\\\Documents\\\\1. NUS\\\\Semester 3\\\\CS2113T Software Engineering\\\\duke\\\\data\\\\dukedata.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "        catch (Exception e){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"Error Opening the File!!!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * fills the .txt file with date from the tasklist using format class"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void addRecords(Integer a, ArrayList\u003cTaskforDuke\u003e taskList){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 0; i \u003c a; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "            Character c1 \u003d taskList.get(i).toString().charAt(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if(c1.equals(\u0027T\u0027)){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "                x.format(\"T,%s,%s\\n\", String.valueOf(taskList.get(i).isDone), taskList.get(i).description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if(c1.equals(\u0027D\u0027)){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "                x.format(\"D,%s,%s,%s\\n\", String.valueOf(taskList.get(i).isDone), taskList.get(i).description, taskList.get(i).getDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if(c1.equals(\u0027E\u0027)){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "                x.format(\"E,%s,%s,%s\\n\", String.valueOf(taskList.get(i).isDone), taskList.get(i).description, taskList.get(i).getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * closes the file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void closeFile(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "        x.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 54
    }
  },
  {
    "path": "src/main/java/fileMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * fileMissingException class inherits from Exception class to represent an error handler specifically for missingFiles"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class fileMissingException extends Exception{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 5
    }
  },
  {
    "path": "src/main/java/fileReader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": " * This class represents the method needed to take a .txt file from the provided path"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": " * and calls a method storage.load()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class fileReader {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private static Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * storage.load()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static void populateTaskList(String s, TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "        // Get the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "        File f \u003d new File(\"C:\\\\Users\\\\Lee Raiyan\\\\Documents\\\\1. NUS\\\\Semester 3\\\\CS2113T Software Engineering\\\\duke\\\\data\\\\dukedata.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "        // Check if the specified file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "        // Exists or not"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "            taskList.setTaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"File Not Found!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 35
    }
  },
  {
    "path": "src/main/java/invalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * invalidDeadlineException class inherits from Exception class to represent an error handler specifically"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " * for invalid format for user\u0027s deadline command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class invalidDeadlineException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 7
    }
  },
  {
    "path": "src/main/java/invalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * invalidEventException class inherits from Exception class to represent an error handler specifically"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " * for invalid format for user\u0027s event command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class invalidEventException extends Exception  {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 6
    }
  },
  {
    "path": "src/main/java/invalidTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * invalidTodoException class inherits from Exception class to represent an error handler specifically"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " * for invalid format for user\u0027s todo command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class invalidTodoException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 6
    }
  },
  {
    "path": "src/main/java/unknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": " * unknownCommandException class inherits from Exception class to represent an error handler specifically"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " * for invalid command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class unknownCommandException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 6
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer[] date \u003d {05,10,2019,1800};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String eventName \u003d \"send postcard to Malaysia\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Deadline deadline \u003d new Deadline(eventName, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "        assertEquals(\"[D][✘] send postcard to Malaysia (by: 5/10/2019 1800)\", deadline.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer[] date \u003d {05,10,2019,1800};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String eventName \u003d \"send postcard to Malaysia\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Deadline deadline \u003d new Deadline(eventName, date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "        assertEquals(\"5/10/2019 1800\", deadline.getDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 22
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer[] date \u003d {05,10,2019,1800};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String eventName \u003d \"watch movies with friends\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Event event \u003d new Event(eventName, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "        assertEquals(\"[E][✘] watch movies with friends (at: 5/10/2019 1800)\", event.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer[] date \u003d {05,10,2019,1800};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String eventName \u003d \"watch movies with friends\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Event event \u003d new Event(eventName, date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "        assertEquals(\"5/10/2019 1800\", event.getDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 23
    }
  }
]
