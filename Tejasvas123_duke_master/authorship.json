[
  {
    "path": "src/main/java/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddDeadlineCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! The description of deadline cannot be empty\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (splitInput.get(i).equals(\"/by\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Please make sure that you have entered \\\"/by\\\" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"to separate task and time\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tasks.addTask(new Deadline(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks.getAllTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 39
    }
  },
  {
    "path": "src/main/java/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddEventCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        int k \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String split1 \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String split2 \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! the description for an event cannot be empty\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (i \u003d 1; i \u003c splitInput.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (splitInput.get(i).equals(\"/at\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                k \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                split1 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                split2 +\u003d splitInput.get(i) + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Please make sure you have used \\\"/at\\\" to separate\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \" task and time\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        tasks.addTask(new Event(split1.trim(), split2.trim()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storage.saveData(tasks.getAllTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 39
    }
  },
  {
    "path": "src/main/java/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public AddToDoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tasks.addTask(new Todo(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            String taskA \u003d tasks.getTask(tasks.numTasks() - 1).toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.printAddTask(tasks.getAllTasks(),taskA);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(tasks.getAllTasks());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! The description of a todo list cannot be empty\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 19
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.exitDuke();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 8
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    boolean isExit \u003d false;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public abstract void execute(TaskList tasks,Ui ui,FileHandling storage) throws DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 9
    }
  },
  {
    "path": "src/main/java/DateTimeRecognition.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DateTimeRecognition {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DateTimeRecognition(String date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function enables Duke to read dates in a \"dd/MM/yyyy HHmm format\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the date format is incorrect."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void dateTime() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            SimpleDateFormat identifyFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            Date dateAndTime \u003d identifyFormat.parse(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" The format for including date and time for an event/\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"deadline is \u003cdd/mm/yyyy HHmm\u003e\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 25
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private DateTimeRecognition convertDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * Instantiates the Deadline class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param description stores the deadline task added by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param by stores the time by which the user is expected to finish the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user inputs a deadline task in invalid format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Deadline(String description, String by)throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        convertDate \u003d new DateTimeRecognition(this.by);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        convertDate.dateTime();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + by + \")\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"D\" + super.fileOutFormat() + \"|\" + by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 28
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DeleteCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int temp \u003d Integer.parseInt(splitInput.get(1)) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            String taskA \u003d tasks.getTask(temp).toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tasks.deleteTask(temp);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.deleteMessage(tasks.getAllTasks(), taskA);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage.saveData(tasks.getAllTasks());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (NumberFormatException obj) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a positive integer after \\\"delete\\\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a number that is present in the list\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 24
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "class DoneCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DoneCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            int temp \u003d Integer.parseInt(splitInput.get(1)) - 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tasks.getTask(temp).markAsDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.printMarkAsDone(tasks.getTask(temp).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (NumberFormatException obj) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a positive integer after \\\"done\\\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" OOPS! Enter a number that is present in the list\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 22
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private FileHandling storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the Duke class by loading data from a file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param filename stores the file name from which the data is being loaded."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Duke(String filename) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            storage \u003d new FileHandling(filename);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tasks \u003d new TaskList(storage.retrieveData());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is responsible for executing various tasks/commands related to Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                ui.printDash();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is responsible for instantiating Duke with the file name \"storeData.txt\"."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * storeData.txt is the file from which the data is loaded for the list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param args contains the supplied command-line arguments as an array of String objects."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        new Duke(\"storeData.txt\").run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 44,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private DateTimeRecognition to;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private DateTimeRecognition from;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This constructor instantiates the object for the Event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param description stores the event description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param at stores the time for the event in a particular format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the user inputs event task in an invalid format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Event(String description, String at)throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            List\u003cString\u003e splitDate \u003d Arrays.asList(at.split(\" to \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            from \u003d new DateTimeRecognition(splitDate.get(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            to \u003d new DateTimeRecognition(splitDate.get(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Format for an event is: \u003cevent\u003e /at \u003cdata and time\u003e to \u003cdate and time\u003e\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        from.dateTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        to.dateTime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + at + \")\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"E\" + super.fileOutFormat() + \"|\" + at);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 39
    }
  },
  {
    "path": "src/main/java/FileHandling.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class FileHandling {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private String file;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public FileHandling(String file) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function handles loading data from the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return a list that stores the tasks loaded from the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when there are errors while handling the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public ArrayList\u003cTask\u003e retrieveData() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            FileReader readFile \u003d new FileReader(this.file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            BufferedReader read \u003d new BufferedReader(readFile);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            ArrayList\u003cTask\u003e initialData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            String input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            while ((input \u003d read.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                int k \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                List\u003cString\u003e columns \u003d Arrays.asList(input.split(\"\\\\|\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                switch (columns.get(0)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    initialData.add(new Todo(columns.get(2)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    initialData.add(new Event(columns.get(2), columns.get(3)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    initialData.add(new Deadline(columns.get(2), columns.get(3)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    System.out.println(\"\\n     There is an invalid entry in the file. This entry will \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                            + \"not be copied to the list:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    System.out.println(\"     \" + input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    k \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    if (columns.get(1).equals(\"1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                        initialData.get(initialData.size() - 1).markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return initialData;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (FileNotFoundException obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Invalid file name/file path. File not found.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"Will make a new file ...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IOException obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Error while reading data from the file. Will continue \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                   + \"with empty list\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Index out of bounds. Probably due to invalid format of storing\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                    + \"Todo/Deadline/Event data\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function is responsible for saving data from the list into the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param storeDataInFile list of tasks that are to be stored in the file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when there are errors while loading data into the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e storeDataInFile) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            FileWriter writin \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            BufferedWriter outData \u003d new BufferedWriter(writin);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            for (int i \u003d 0; i \u003c storeDataInFile.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                outData.write(storeDataInFile.get(i).fileOutFormat());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                outData.newLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            outData.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } catch (IOException obj) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Error occurred while writing data to the file \" + obj);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 89
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private List\u003cString\u003e splitInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public FindCommand(List\u003cString\u003e splitInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.splitInput \u003d splitInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage)throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (splitInput.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Please enter a keyword after join\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String keyword \u003d String.join(\"\", splitInput.subList(1, splitInput.size()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ArrayList\u003cTask\u003e containsKeyword \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.numTasks(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            if (tasks.getTask(i).checkKeyword(keyword)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                containsKeyword.add(tasks.getTask(i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.keywordPrint(containsKeyword);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 26
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void execute(TaskList tasks,Ui ui,FileHandling storage) throws DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ui.printList(tasks.getAllTasks());"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 7
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function just parses the fullCommand into different tasks/commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param fullCommand stores the command entered by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @return objects of type Command depending on the command given by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @throws DukeException when the command given is invalid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public static Command parse(String fullCommand)throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        List\u003cString\u003e splitInput \u003d new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                Arrays.asList(fullCommand.split(\" \")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (splitInput.get(0).equals(\"done\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DoneCommand(splitInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (splitInput.get(0).equals(\"todo\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddToDoCommand(fullCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (splitInput.get(0).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddDeadlineCommand(splitInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (splitInput.get(0).equals(\"event\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new AddEventCommand(splitInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (splitInput.get(0).equals(\"delete\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new DeleteCommand(splitInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else if (splitInput.get(0).equals(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            return new FindCommand(splitInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            throw new DukeException(\" Please enter a valid command\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 36
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String ticks \u003d \"Y\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private final String cross \u003d \"N\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (isDone ? ticks : cross);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public boolean checkKeyword(String str) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (this.description.contains(str));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"[\" + getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"|\" + isDone + \"|\" + description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 32
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private ArrayList\u003cTask\u003e storeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e storeList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.storeList \u003d storeList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.storeList.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        this.storeList.remove(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return this.storeList.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return storeList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public int numTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return storeList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 33
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"[T]\" + super.toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String fileOutFormat() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return (\"T\" + super.fileOutFormat());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 15
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function responsible for printing a line."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printDash() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c 75; i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            str +\u003d \"_\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(str);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void printSpaces(String printStr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        System.out.println(\"    \" + printStr);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function prints the hello message every time Duke is initiated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Hello! I am Duke\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function prints the tasks stored in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param printData stores the list of tasks to be printed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e printData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        showList(printData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that Duke has marked the task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param printStr stores the task that has been marked as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printMarkAsDone(String printStr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Nice! I have marked this task as done:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" \" + printStr);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that Duke has added the task to the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param listOfTasks used for printing the number of tasks in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param taskA stores the task that is to be added to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void printAddTask(ArrayList\u003cTask\u003e listOfTasks, String taskA) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Got it. I have added this task:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\"  \" + taskA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        showNumTasks(listOfTasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void showNumTasks(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Now you have \" + listOfTasks.size()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + ((listOfTasks.size() \u003d\u003d 1) ? \" task in the list.\" : \" tasks in \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "                + \"the list\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    private void showList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "            printSpaces(\" \" + (i + 1) + \". \" + listOfTasks.get(i).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function prints the exit message every time Duke is closed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void exitDuke() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Bye.Hope to see you again soon.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function prints the error message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param errorMessage stores the error message."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(errorMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function tells the user that Duke has deleted the task from the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param taskList used for showing the number of tasks left in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param taskA stores the task that is deleted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void deleteMessage(ArrayList\u003cTask\u003e taskList, String taskA) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Noted. I have removed this task:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\"  \" + taskA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        showNumTasks(taskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function prints the tasks that match a given keyword."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param taskList stores the tasks that match a given keyword."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void keywordPrint(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(\" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        showList(taskList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * This function prints the message when there is an error in loading data from the file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     * @param message stores the error message."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    public void showLoadingError(String message) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printSpaces(message);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        printDash();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 132
    }
  },
  {
    "path": "src/test/java/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkBye() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Command c \u003d new ByeCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(c.isExit);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        c.execute(new TaskList(),new Ui(),new FileHandling(\"storeData.txt\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(c.isExit);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 15
    }
  },
  {
    "path": "src/test/java/DateTimeRecognitionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class DateTimeRecognitionTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkDateFormat() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        DateTimeRecognition dateA \u003d new DateTimeRecognition(\"qwrfEFER\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class,()-\u003e dateA.dateTime());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        DateTimeRecognition dateB \u003d new DateTimeRecognition(\"1800\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class,()-\u003e dateB.dateTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 15
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkParsing() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Parser obj \u003d new Parser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(DukeException.class,() -\u003e obj.parse(\"gfgregt4e\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 11
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkAddTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task store \u003d  new Todo(\"Borrow book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(store);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(store,obj.getTask(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkDeleteTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task store \u003d new Todo(\"join cca\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(store);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.deleteTask(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class,() -\u003e obj.getTask(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkNumTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(new Todo(\"quit cca\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(1,obj.numTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkGetTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(new Todo(\"Borrow book\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task num2 \u003d new Todo(\"Return book\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(num2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(num2.toString(),obj.getTask(1).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkGetAllTasks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        TaskList obj \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(new Todo(\"return book\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.addTask(new Todo(\"study for CS2113\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        ArrayList\u003cTask\u003e storeTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        storeTest \u003d obj.getAllTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(storeTest.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task taskA \u003d new Todo(\"return book\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task taskB \u003d new Todo(\"study for CS2113\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(storeTest.get(0).toString(),taskA.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(storeTest.get(1).toString(),taskB.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 55
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkGetStatusIcon() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task obj \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertEquals(\"N\",obj.getStatusIcon());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void checkMarkAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task obj \u003d new Todo(\"join cca\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        obj.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertTrue(obj.isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    void testCheckKeyword() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        Task obj \u003d new Todo(\"leave cca\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "        assertFalse(obj.checkKeyword(\"book\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tejasvas123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tejasvas123": 26
    }
  }
]
