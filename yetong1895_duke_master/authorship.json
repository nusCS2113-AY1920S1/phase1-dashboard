[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 11,
      "-": 17
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import jdk.jfr.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private storage storageObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private ArrayList\u003ctask\u003e listOfTasts;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private TaskList TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int counter \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will initialise the objects and load the data from the save file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        storageObject \u003d new storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        listOfTasts \u003d new ArrayList\u003ctask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        storageObject.load();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        listOfTasts \u003d storageObject.getListOfTasks();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        counter \u003d storageObject.getCounter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will initialise the tasklist and run the program"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * it will pass in the information that was obtained from the save data and pass to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * the TaskList object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        TaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        TaskList.setListOfTasks(listOfTasts);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        TaskList.setCounter(counter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        TaskList.startTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        counter \u003d TaskList.getCounter();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        listOfTasts \u003d TaskList.getListOfTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will save the userinputs into the save file and terminate the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        storageObject.setListOfTasks(listOfTasts);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        storageObject.setCounter(counter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        storageObject.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will start the program and close the program when the user is done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Duke Duke \u003d new Duke();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Duke.run();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        Duke.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 50,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        private String split[] \u003d new String[100];"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        private int taskNum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will split the string of user command into individual words"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the string of user input"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void breakString(String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            split \u003d command.split(\" \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will convert the string number to int number"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "      */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void convertToInt() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        taskNum \u003d Integer.valueOf(split[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will check if a string passed in is a numeric number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param s the string to be checked."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the input string is a numeric number, false if it is not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public static boolean isNumeric(final String s) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return s.chars().allMatch(Character::isDigit);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method check if the command is a valid \"done\" command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the user input String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the first word is a \"done\" keyword and second word is a numeric number or false otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkDone(String command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        breakString(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(split[0].equals(\"done\") \u0026\u0026 isNumeric(split[1]) \u003d\u003d true) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            convertToInt();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method check if the command is a valid \"delete\" command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the first word is a \"delete\" keyword and second word is a numeric number or false otherwise"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkDelete(String command) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        breakString(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(split[0].equals(\"delete\") \u0026\u0026 isNumeric(split[1]) \u003d\u003d true) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            convertToInt();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     *This method check if the command is a valid \"todo\" command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the first word is a \"todo\" keyword or false otherwise"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkTodo(String command) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(split[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method check if the command is a valid \"event\" command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the user input string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the first word is a \"event\" keyword or false otherwise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkEvent(String command) {//check if it is a event command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(split[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method check if the command is a valid \"deadline\" command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the user input string"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the first word is a \"deadline\" keyword or false otherwise"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkDeadline(String command) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(split[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method check if the command is a valid \"find\" command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param command the user input string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return true if the first word is a \"find\" keyword or false otherwise"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkFind(String  command) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(split[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the task number to be marked as done"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return taskNum the task number to be marked as done"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public int getTaskNum () {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method split the string in the save data"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param data the string from the save date"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void splitSaveData (String data) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        split \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the first word from the split save date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the first word of the split save data"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveData1 () {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return split[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the first word from the split save date"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the first word of the split save data"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveData2() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return split[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the first word from the split save date"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the first word of the split save data"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveData3() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return split[2];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the first word from the split save date"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the first word of the split save data"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveData4() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return split[3];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 152
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class    TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    Ui UiObject \u003d new Ui();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    Parser checker \u003d new Parser();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    ArrayList\u003ctask\u003e listOfTasks \u003d new ArrayList\u003ctask\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    dukeException exception \u003d new dukeException();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    Scanner inputs \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    date dateObject \u003d new date();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int counter \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int i;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String userDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the counter in this class equals to the counter that passed in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter the counter to be set in this method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void setCounter(int counter) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.counter \u003d counter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the listOfTasks in this class equals to the listOfTask equals to the listOfTasks that passed in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the array list to be passed in."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void setListOfTasks(ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the counter"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return counter the number of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public int getCounter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the array list listOfTasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return listOfTasks the list of task in this class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public ArrayList\u003ctask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will check for all of the user inputs and call the required method according to the keyword used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws IndexOutOfBoundsException the exception when accessing an index that is out of bound of the array list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws StringIndexOutOfBoundsException the exception when accessing a string that is out of the bound of the input string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void startTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            String userInputs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            userInputs \u003d inputs.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (userInputs.equals(\"bye\")) { //exit with the exit message"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                UiObject.exitMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (userInputs.equals(\"list\")) { //print out the list of inputs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (counter \u003d\u003d 0) {//check if the task list is empty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    UiObject.emptyMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    UiObject.listPrinting(counter,listOfTasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (checker.checkDelete(userInputs) \u003d\u003d true) {//check if the user command is a valid \u0027delete\u0027 command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                taskNum \u003d checker.getTaskNum();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (taskNum \u003e counter) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    exception.IndexOutOfBoundsException(listOfTasks, taskNum, counter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    UiObject.deleteMessage(taskNum,counter,listOfTasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    listOfTasks.remove(taskNum);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (checker.checkDone(userInputs) \u003d\u003d true) { //check if the user command is a valid \u0027done\u0027 command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                taskNum \u003d checker.getTaskNum();   //get the task number of the command to be done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (taskNum \u003e counter) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    exception.IndexOutOfBoundsException(listOfTasks, taskNum, counter); //handle exception; I.E user enter an invalid task number"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    if (listOfTasks.get(taskNum).checkDone() \u003d\u003d true) {//check if the task is already done"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        UiObject.checkDoneMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        listOfTasks.get(taskNum).markAsDone(); //mark the task as done"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        UiObject.MarkAsDoneMessage(taskNum,listOfTasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (checker.checkFind(userInputs) \u003d\u003d true) { //check if it is a valid \u0027find\u0027 command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                UiObject.checkFindMessage(counter,userInputs,listOfTasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (checker.checkTodo(userInputs) \u003d\u003d true) { //check if the user command is a valid \u0027todo\u0027 command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (userInputs.length() \u003c 6) { //handle exception; I.E. user have not enter the description of the task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    exception.StringIndexOutOfBoundsException(listOfTasks, userInputs, counter, \"todo\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    listOfTasks.add(new todos(userInputs.substring(5)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    UiObject.checkAddMessage(counter,listOfTasks);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (checker.checkEvent(userInputs) \u003d\u003d true) {//check if the user command is a valid \u0027event\u0027 command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                position \u003d userInputs.indexOf(\"/\"); //find the position of the separator \u0027/\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (position \u003d\u003d -1 || userInputs.length() \u003c\u003d position + 4) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    exception.StringIndexOutOfBoundsException(listOfTasks, userInputs, counter, \"event\");//call exception for invalid inputs"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {//valid inputs"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    userDate \u003d userInputs.substring(position + 4);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    dateObject.setCounter(counter);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    dateObject.dateConvert(userDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    if (dateObject.getCheckDate() \u003d\u003d true) {//check if the date input is valid"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        listOfTasks.add(new events(userInputs.substring(6, position - 1), userInputs.substring(position + 4)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        UiObject.checkAddMessage(counter,listOfTasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        counter--;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (checker.checkDeadline(userInputs) \u003d\u003d true) {//check if the user command is a valid \u0027deadline\u0027 command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                position \u003d userInputs.indexOf(\"/\"); //find the position of the separator \u0027/\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (position \u003d\u003d -1 || userInputs.length() \u003c\u003d position + 4) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    exception.StringIndexOutOfBoundsException(listOfTasks, userInputs, counter, \"deadline\");//call exception for invalid inputs"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    counter--;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    userDate \u003d userInputs.substring(position + 4);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    dateObject.setCounter(counter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    dateObject.dateConvert(userDate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    if (dateObject.getCheckDate() \u003d\u003d true) {//check if the date input is valid"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        listOfTasks.add(new deadLines(userInputs.substring(9, position - 1), userInputs.substring(position + 4)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        UiObject.checkAddMessage(counter,listOfTasks);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                        counter--;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else {//all other invalid inputs"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                UiObject.invalidMessage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            dateObject.setCounter(counter);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 146
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class Ui{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int i;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will repeat the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param input the string that the user have input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void repeatInput(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.printf(\"%s\\n\",input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the string that says the user task list is empty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void emptyMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Your task list is empty.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the list of tasks in the listOfTasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter the number of task in the listOfTasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list that containing all the tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void listPrinting(int counter,ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d counter; i +\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.printf(\"%d.\", i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(listOfTasks.get(i).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print which task is getting deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param taskNum the task number to be removed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter the number of task in the list of task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list containing all the tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void deleteMessage(int taskNum,int counter,ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(listOfTasks.get(taskNum).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.printf(\"Now you have %d tasks in the list.\\n\", counter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print which task is marking as done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param taskNum the task number to be mark as done"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list containg all the tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void MarkAsDoneMessage(int taskNum,ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");//print the task after marking as done"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(listOfTasks.get(taskNum).toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the message that the task is already marked as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void checkDoneMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"This task is already marked as done.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the item that are found by the find command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter the number of tasks in the list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param userInputs the keyword that the user want to find"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list containing all of the task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void checkFindMessage(int counter,String userInputs, ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d counter; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (listOfTasks.get(i).getDescription().contains(userInputs.substring(5))) { //find the keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                System.out.println(listOfTasks.get(i).toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the task that is being added to the list of tasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter the task number that is going to be printed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list containing all the task"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void checkAddMessage(int counter,ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"  \" + listOfTasks.get(counter).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Now you have \" + counter + \" tasks in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the invalid message when the user key in an invalid message"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void invalidMessage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.println(\"Sorry, the input is invalid\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will print the exit message when the user is leaving the app."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void exitMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        System.out.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 107
    }
  },
  {
    "path": "src/main/java/date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class date {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    String[] listOfDate \u003d new String[100]; //store the list of dates"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    Date dueDate \u003d new Date();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int counter \u003d 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private boolean checkDate \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Take in a counter and set the counter in this class as that counter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void setCounter(int counter) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.counter \u003d counter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * Take in the user input date and convert it to a system recognisable date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param inputDate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void dateConvert(String inputDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        listOfDate[counter] \u003d inputDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        position \u003d inputDate.indexOf(\"-\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if(position \u003d\u003d -1) { //if there is only one input time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                Date dueDate \u003d new SimpleDateFormat(\"dd.MM.yyyy HH mm\").parse(inputDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//                System.out.println(dueDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                checkDate \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else { //if there is a time range"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                Date dueDate1 \u003d new SimpleDateFormat(\"dd.MM.yyyy HH mm\").parse(inputDate.substring(0,position));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                Date dueDate2 \u003d new SimpleDateFormat(\"dd.MM.yyyy HH mm\").parse(inputDate.substring(0,position - 5)+inputDate.substring(position + 1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//                System.out.println(dueDate1 +\" to \"+ dueDate2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                checkDate \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch(ParseException e) {//if user input a invalid time format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            checkDate \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"Invalid date and time format. Please enter your date and time in the following format :\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    \"dd.mm.yyyy hh mm  i.e. 05.12.2019 12 30  OR\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    \"dd.mm.yyyy hh mm-hh mm  i.e. 05.12.2019 12 30-14 30\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * check if the input date is a valid input date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return checkDate the checker to see if the user input is a valid date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean getCheckDate () {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return checkDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//        return String.format(dueDate.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 57
    }
  },
  {
    "path": "src/main/java/deadLines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class deadLines extends task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public deadLines(String description,String by) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     *  return the stored format of the user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the string that contain the information from the user input of a deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the save format of the user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the string of the user input in saving format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return String.format(\"%s|%s|%s\",\"D\",super.saveFormat(),by);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 26
    }
  },
  {
    "path": "src/main/java/dukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class dukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    ArrayList\u003ctask\u003e listOfTasks \u003d new ArrayList\u003ctask\u003e();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    String temp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will check for IndexOutOfBoundsException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list of tasks that the user have input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param a that task number that the method is dealing with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter the number of tasks that is in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws IndexOutOfBoundsException the exception when user try to access a task number that is more than the total number of tasks in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void IndexOutOfBoundsException(ArrayList\u003ctask\u003e listOfTasks, int a, int counter) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            listOfTasks.get(a).markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                System.out.printf(\"Sorry, there is not task in the list.\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (counter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                System.out.printf(\"Sorry, there is only 1 task in the list.\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                System.out.printf(\"Sorry, there are only %d tasks in the list.\\n\", counter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will check for StringIndexOutOfBoundsException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list of tasks that the user have input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param inputs the current user input that needed to be checked."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param a the task number that the method is currently dealing with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param taskType what type of the task that the user input;todo, event or deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws StringIndexOutOfBoundsException the exception when user did not key in the valid information or date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void StringIndexOutOfBoundsException(ArrayList\u003ctask\u003e listOfTasks, String inputs, int a, String taskType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (inputs.length() \u003d\u003d 5 \u0026\u0026 taskType.equals(\"todo\")) { //hand the exception from \u0027todo\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"Sorry, the description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if(inputs.length() !\u003d 5 \u0026\u0026 taskType.equals(\"todo\")){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                listOfTasks.add(new todos(inputs.substring(5)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                System.out.println(\"Sorry, the description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        int position \u003d inputs.indexOf(\"/\"); //find the position of the separator \u0027/\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if(taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                listOfTasks.add(new events(inputs.substring(6, position - 1), inputs.substring(position + 4)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (inputs.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    System.out.println(\"Sorry, the description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (position \u003d\u003d -1 || inputs.length() \u003c\u003d position + 4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    System.out.println((\"Sorry, please enter a valid date and time\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } else if(taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                listOfTasks.add(new deadLines(inputs.substring(9, position - 1), inputs.substring(position + 4)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (inputs.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    System.out.println(\"Sorry, the description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                } else if (position \u003d\u003d -1 || inputs.length() \u003c\u003d position + 4) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    System.out.println((\"Sorry, please enter a valid date and time\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 74
    }
  },
  {
    "path": "src/main/java/events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class events extends task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//    private int rank;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public events(String description,String at) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//    public void setRank(int rank) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//        this.rank \u003d rank;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * return the stored format of the user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the string that contain the information from the user input of a event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the save format of the user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the string of the user input in saving format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return String.format(\"%s|%s|%s\",\"E\",super.saveFormat(),at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 29
    }
  },
  {
    "path": "src/main/java/saveRead.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class saveRead {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private Scanner read;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String datas;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will read the saves.txt file that stored the save data"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void openFile() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            read \u003d new Scanner(new File(\"saves.txt\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"Could not find any file\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will read the next line of the save data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void readFile() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            datas \u003d read.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//            System.out.println(\"You have no task in your list.Try to add some new tasks with todo/event/deadline keywords.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the data value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return datas the data value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return datas;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will close the scanner read."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void closeFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        read.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 46
    }
  },
  {
    "path": "src/main/java/saveWrite.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.lang.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class saveWrite {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private Formatter write;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will create a new file call saves"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @throws Exception if create file fail"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void openFile() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            write \u003d new Formatter(\"saves.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            System.out.println(\"You have an error.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will insert the string temp into the save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param temp the string to be insert into the save file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void addRecords(String temp) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        write.format(\"%s\\n\",temp);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will close the save file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void closeFile() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        write.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 33
    }
  },
  {
    "path": "src/main/java/storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class storage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    saveWrite write \u003d new saveWrite();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    saveRead read \u003d new saveRead();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    ArrayList\u003ctask\u003e listOfTasks \u003d new ArrayList\u003ctask\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    Parser checker \u003d new Parser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    date dateObject \u003d new date();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int counter \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private int taskNum,position,i;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    private String first,second,third,forth,temp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will set the listOfTasks in this class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param listOfTasks the list of class to be set in this class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void setListOfTasks(ArrayList\u003ctask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the listOfTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return listOfTasks the list of task to be return."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public ArrayList\u003ctask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method set the counter in this class to the counter that is passed in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param counter"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void setCounter(int counter) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.counter \u003d counter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method return the counter in this class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return counter the counter to be returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public int getCounter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will open the save file and read the data from the save file,the data will then be convert to display format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * and stored into the ArrayList of object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        //open save data"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        read.openFile(); //open the save file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        read.readFile();//read the value of counter in the save file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        temp \u003d read.getData();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        listOfTasks.add(new task(\"Dummy input to consume index 0\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        if (temp !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (temp.length() !\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                counter \u003d Integer.parseInt(temp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        for (i \u003d 1; i \u003c\u003d counter; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            read.readFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            temp \u003d read.getData();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            checker.splitSaveData(temp); //split the string temp"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            first \u003d checker.saveData1(); //first part; I.E. the task type"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            second \u003d checker.saveData2(); //second part; I.E done or not done"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            third \u003d checker.saveData3(); //third part; I.E description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            if (first.equals(\"T\")) { //if it is todo task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                listOfTasks.add(new todos(third));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (second.equals(\"1\"))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    listOfTasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (first.equals(\"E\")) { //if it is event task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                forth \u003d checker.saveData4();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                listOfTasks.add(new events(third, forth));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                dateObject.setCounter(counter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                dateObject.dateConvert(forth);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (second.equals(\"1\"))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    listOfTasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            } else if (first.equals(\"D\")) { //if it is deadline task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                forth \u003d checker.saveData4();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                listOfTasks.add(new deadLines(third, forth));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                dateObject.setCounter(counter);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                dateObject.dateConvert(forth);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                if (second.equals(\"1\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "                    listOfTasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        read.closeFile(); // close the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will convert the contents in the listOfTasks into the save format and save into the save file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        write.openFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        String numOfTasks \u003d Integer.toString(counter);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        write.addRecords(numOfTasks); //first save the value of counter into the save.txt file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        for(i \u003d 1;i \u003c\u003d counter; i++) {//loop through the array of objects and save the information into save.txt file"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            temp \u003d listOfTasks.get(i).saveFormat();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "            write.addRecords(temp);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        write.closeFile();//close the file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 108
    }
  },
  {
    "path": "src/main/java/task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import jdk.jfr.Description;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    protected int isDoneInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        isDoneInt \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void markAsDone() { //set the task as done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        isDoneInt \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public boolean checkDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return (isDone ? \"Y\" : \"N\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String toString() { //print out the status icon and the description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return\"[\"+ getStatusIcon()+\"]\"+\" \"+description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return String.format(\"%d|%s\",isDoneInt,description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 42
    }
  },
  {
    "path": "src/main/java/todos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class todos extends task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public todos(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the status icon and the description of a todo task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the string containing the status icon and the description"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String toString() { //print out the status icon and the description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * This method will return the user input in saving format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     * @return the string containing the user inputs in saving format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        return String.format(\"%s|%s\",\"T\",super.saveFormat());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 23
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yetong1895"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yetong1895"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yetong1895": 10
    }
  }
]
